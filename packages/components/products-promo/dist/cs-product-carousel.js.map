{"version":3,"file":null,"sources":["../../cs-teaser/src/cs-teaser.ts","../src/cs-product-carousel.ts"],"sourcesContent":["import $ from 'jQuery';\nimport Swiper from 'Swiper';\n\n/*\n* Product teaser\n*/\n/**\n * Creates new teaser object on given element with provided settings.\n * @param  {jQuery} $element jQuery element that contains complete outline for teaser.\n * Provided element should contain \".{teaserName}__wrapper\" element.\n * @param  {Object} settings Custom settings that will be passed along to Swiper.\n * @return {Object} New teaser object instance.\n */\nconst csTeaser: any = function( $element: any, settings: any ): void {\n    /**\n     * Required variables initialization.\n     */\n    settings = settings || {};\n    const teaser: any = this;\n    const teaserName: string = settings.teaserName ? settings.teaserName : 'cs-teaser';\n    const teaserClass: string = `.${teaserName}`;\n    const $teaserWrapper: any = $element.find( `${teaserClass}__wrapper` );\n    const paginationName: string = settings.paginationName ? settings.paginationName : `${teaserName}__pagination`;\n    const $pagination: any = $element.find( `.${paginationName}` );\n    const $teaserNumbers: any = $element.find( `${teaserClass}__numbers` );\n    const $teaserNumbersCurrent: any = $teaserNumbers.children( `${teaserClass}__number--current` );\n    const $teaserNumbersTotal: any = $teaserNumbers.children( `${teaserClass}__number--total` );\n    /**\n     * Holds current Swiper instance.\n     */\n    let swiperInstance: any;\n\n    /**\n     * Attaches component to HTML element.\n     */\n    $element.data( teaserName, this );\n\n    /**\n     * Tells if teaser should have dynamic or fixed number of visible slides.\n     * By default teaser will adjust number of visible slides according to it's\n     * parrent width. You can change this behaviour by specyfying custom settings.slidesPerView\n     * value, e.g. when settings.slidesPerView = 1 teaser will always show only one slide.\n     * @type {Boolean}\n     */\n    let dynamicNumOfSlides: any = !settings.slidesPerView || settings.slidesPerView === 'auto';\n\n    /**\n     * Contains current settings of slider.\n     */\n    let currentSettings: any;\n    /**\n     * Default settings for Swiper.\n     * @type {Object}\n     */\n    const defaultSettings: any = {\n        slideClass: `${teaserName}__slide`,\n        slideActiveClass: `${teaserName}__slide--active`,\n        slideVisibleClass: `${teaserName}__slide--visible`,\n        slideDuplicateClass: `${teaserName}__slide--clone`,\n        slideNextClass: `${teaserName}__slide--next`,\n        slidePrevClass: `${teaserName}__slide--prev`,\n        wrapperClass: `${teaserName}__slides`,\n        nextButton: $element.find( `${teaserClass}__nav--next` )[ 0 ],\n        prevButton: $element.find( `${teaserClass}__nav--prev` )[ 0 ],\n        buttonDisabledClass: `${teaserName}__nav--disabled`,\n        /**\n         * Maximum number of groups that will be still visible as dots.\n         * If you want pagination to always be dots you can either don't add\n         * .${teaserName}__numbers element in HTML or set this to something big.\n         * @type {number}\n         */\n        paginationBreakpoint: 5,\n        bulletClass: `${paginationName}-item`,\n        bulletActiveClass: `${paginationName}-item--active`,\n        paginationClickable: true,\n        spaceBetween: 20,   // Gap between slides.\n        slideMinWidth: 200,  // Minimum width of a slider.\n        watchSlidesVisibility: true,\n    };\n    currentSettings = $.extend( defaultSettings, settings );\n\n    /**\n     * Calculates number of slides that should be visible according to teaser's wrapper width.\n     * @return {number} Number of slides.\n     */\n    const calculateSlidesNumber: any = function(): number {\n        return Math.floor( $teaserWrapper.innerWidth() / ( currentSettings.slideMinWidth + currentSettings.spaceBetween ) );\n    };\n\n    if ( dynamicNumOfSlides ) {\n        currentSettings.slidesPerView =\n            currentSettings.slidesPerGroup = calculateSlidesNumber();\n    }\n\n    /**\n     * Renders dot(rhomb) pagination.\n     * @param  {number} totalGroupNumber Total number of groups.\n     */\n    const renderDotPagination: any = function( totalGroupNumber: number ): void {\n        $pagination.empty();\n        for ( let groupIndex: number = 0; groupIndex < totalGroupNumber; groupIndex = groupIndex + 1 ) {\n            let dotClass: string = '';\n            if ( groupIndex === Math.ceil( swiperInstance.activeIndex / swiperInstance.params.slidesPerGroup ) ) {\n                dotClass = swiperInstance.params.bulletActiveClass;\n            }\n\n            $pagination.append( `<li class=\"${swiperInstance.params.bulletClass} ${dotClass}\">\n                <button class=\"${paginationName}-button\">${( groupIndex + 1 )}</button></li>`\n            );\n        }\n\n        $teaserNumbers.removeClass( `${teaserName}__numbers--visible` );\n        $pagination.removeClass( `${paginationName}--hidden` );\n    };\n\n    /**\n     * Swipes on pagination click to appropriate slide.\n     * @param  {Object} event Event Object\n     */\n    const clickDotPagination: any = function( event?: Event ): void {\n        event.preventDefault();\n        swiperInstance.slideTo( $( this ).index() * swiperInstance.params.slidesPerView );\n    };\n\n    /**\n     * Renders number pagination.\n     * @param  {number} totalGroupNumber Total number of groups.\n     */\n    const renderNumberPagination: any = function( totalGroupNumber: number ): void {\n        const currentGroupIndex: number = Math.ceil( swiperInstance.activeIndex / swiperInstance.params.slidesPerGroup + 1 );\n        $teaserNumbersCurrent.text( currentGroupIndex );\n        $teaserNumbersTotal.text( totalGroupNumber );\n\n        $pagination.addClass( `${paginationName}--hidden` );\n        $teaserNumbers.addClass( `${teaserName}__numbers--visible` );\n    };\n\n    /**\n     * Updates pagination by adjusting it's type and contents e.g. after window resize.\n     */\n    const updatePagination: any = function(): void {\n        if ( $teaserNumbers.length && swiperInstance.params.paginationBreakpoint ) {\n            const totalSlidesNumber: number = $teaserNumbersTotal.attr( `data-${teaserName}-total` ) || swiperInstance.slides.length;\n            const totalGroupNumber: number = Math.ceil( totalSlidesNumber / swiperInstance.params.slidesPerGroup );\n            if ( totalGroupNumber > swiperInstance.params.paginationBreakpoint ) {\n                renderNumberPagination( totalGroupNumber );\n            } else {\n                renderDotPagination( totalGroupNumber );\n            }\n        }\n    };\n    currentSettings.onSlideChangeStart = updatePagination; // Update navigation after every// slide switch.\n\n    /**\n     * Updates slider sizing by adjusting number of visible slides and pagination.\n     */\n    const updateSliderSizing: any = function(): void {\n        if ( !$element.is( ':visible' ) ) {\n            return null;\n        }\n\n        if ( dynamicNumOfSlides ) {\n            currentSettings.slidesPerView =\n                currentSettings.slidesPerGroup = calculateSlidesNumber();\n        }\n        swiperInstance.params = $.extend( swiperInstance.params, currentSettings );\n        updatePagination();\n        swiperInstance.update();\n    };\n\n    swiperInstance = new Swiper( $element.find( `${teaserClass}__wrapper` ), currentSettings );\n    currentSettings.onSlideChangeStart = updatePagination;\n    updatePagination();\n    $( window ).on( 'resize', updateSliderSizing );\n    $pagination.on( 'click', `.${paginationName}-item`, clickDotPagination );\n\n    /**\n     * Returns Swiper object.\n     * @return {Swiper} Swiper object.\n     */\n    teaser.getSwiper = function(): void {\n        return swiperInstance;\n    };\n\n    /**\n     * Updates teaser with new settings.\n     * @param  {Object} settings New settings to apply.\n     */\n    teaser.update = function( newSettings?: any ): void {\n        newSettings = newSettings || {};\n        currentSettings = $.extend( currentSettings, newSettings );\n        swiperInstance.params = $.extend( swiperInstance.params, currentSettings );\n        dynamicNumOfSlides = !currentSettings.slidesPerView || currentSettings.slidesPerView === 'auto';\n        updateSliderSizing();\n    };\n\n    /**\n     * Destroyes teaser.\n     */\n    teaser.destroy = function(): void {\n        $( window ).off( 'resize', updatePagination );\n        $pagination.off( 'click', `.${paginationName}__item`,\n            clickDotPagination\n        );\n        swiperInstance.destroy();\n    };\n};\n\nexport default csTeaser;\n","import $ from 'jQuery';\n\nimport csTeaser from '../../cs-teaser/src/cs-teaser';\n\n// Initialize hero carousels\n\nconst init: any = function(): void {\n    $( '.cs-product-carousel' ).each( function(): Object {\n        return new csTeaser( $( this ), {\n            teaserName: 'cs-product-carousel',\n        } );\n    } );\n};\n\nexport { init };\n"],"names":[],"mappings":"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"}