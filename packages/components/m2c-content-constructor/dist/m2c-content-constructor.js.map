{"version":3,"file":null,"sources":["../../cc-component-configurator/src/cc-component-configurator.ts","../../cc-button-configurator/src/cc-button-configurator.ts","../../../customizations/m2c-button-configurator/src/m2c-button-configurator.ts","../../cc-category-links-configurator/src/cc-category-links-configurator.ts","../../../customizations/m2c-category-links-configurator/src/m2c-category-links-configurator.ts","../../cc-headline-configurator/src/cc-headline-configurator.ts","../../../customizations/m2c-headline-configurator/src/m2c-headline-configurator.ts","../../action-button/src/action-button.ts","../../cc-component-actions/src/cc-component-actions.ts","../../cc-component-adder/src/cc-component-adder.ts","../../cc-component-placeholder/src/cc-component-placeholder.ts","../../cc-hero-carousel-configurator/src/cc-hero-carousel-configurator.ts","../../../customizations/m2c-hero-carousel-configurator/src/m2c-hero-carousel-configurator.ts","../../cc-image-teaser-configurator/src/cc-image-teaser-configurator.ts","../../../customizations/m2c-image-teaser-configurator/src/m2c-image-teaser-configurator.ts","../../cc-paragraph-configurator/src/cc-paragraph-configurator.ts","../../../customizations/m2c-paragraph-configurator/src/m2c-paragraph-configurator.ts","../../cc-product-carousel-configurator/src/cc-product-carousel-configurator.ts","../../../customizations/m2c-product-carousel-configurator/src/m2c-product-carousel-configurator.ts","../../cc-static-block-configurator/src/cc-static-block-configurator.ts","../../../customizations/m2c-static-block-configurator/src/m2c-static-block-configurator.ts","../../cc-component-picker/src/cc-component-picker.ts","../../cc-component-headline-preview/src/cc-component-headline-preview.ts","../../cc-component-image-teaser-preview/src/cc-component-image-teaser-preview.ts","../../cc-component-hero-carousel-preview/src/cc-component-hero-carousel-preview.ts","../../cc-component-static-cms-block-preview/src/cc-component-static-cms-block-preview.ts","../../cc-layout-builder/src/cc-layout-builder.ts","../../../customizations/m2c-layout-builder/src/m2c-layout-builder.ts","../src/m2c-content-constructor.ts"],"sourcesContent":["/**\n * Base configurator component.\n * This component is responsible for providing base functionality for other configurators.\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccComponentConfigurator: vuejs.ComponentOption = {\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: '',\n        },\n        /**\n         * Property containing callback triggered when user saves component.\n         * For default, we are providing a dummy function so we can skip the type check.\n         */\n        save: {\n            type: Function,\n            default: (): Function => (): undefined => undefined,\n        },\n        /**\n         * Property containing callback triggered when configuration is changed.\n         * For default, we are providing a dummy function so we can skip the type check.\n         */\n        change: {\n            type: Function,\n            default: (): Function => (): undefined => undefined,\n        },\n        /**\n         *\n         */\n        configuration: {\n            type: String,\n            default(): any {},\n        },\n    },\n    methods: {\n        onChange( event?: Event ): void {\n            // Serialize reactive data.\n            const data: any = JSON.parse( JSON.stringify( this.configuration ) );\n            // Trigger event and callback.\n            this.$dispatch( 'cc-component-configurator__changed', data );\n            this.change( data );\n        },\n        onSave( event?: Event ): void {\n            // Serialize reactive data.\n            const data: any = JSON.parse( JSON.stringify( this.configuration ) );\n            // Trigger event and callback.\n            this.$dispatch( 'cc-component-configurator__saved', data );\n            this.save( data );\n        },\n    },\n    events: {\n        /**\n         * Listen on save event from Content Configurator component.\n         */\n        'cc-component-configurator__save'(): void {\n            if ( this._events['cc-component-configurator__save'].length === 1 ) {\n                this.onSave();\n            }\n        },\n    },\n};\n\nexport { ccComponentConfigurator };\nexport default ccComponentConfigurator;\n","import ccComponentConfigurator from '../../cc-component-configurator/src/cc-component-configurator';\n\n/**\n * button configurator component.\n * This component is responsible for displaying buttons configuration form\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccButtonConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccComponentConfigurator,\n    ],\n    template: `<form class=\"cc-button-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\n        <div class=\"cs-input cs-input--type-inline\">\n            <label for=\"cfg-label\" class=\"cs-input__label\">Label:</label>\n            <input type=\"text\" v-model=\"configuration.label\" id=\"cfg-label\" class=\"cs-input__input\" @change=\"onChange\">\n        </div>\n        <div class=\"cs-input cs-input--type-inline\">\n            <label for=\"cfg-target\" class=\"cs-input__label\">Target:</label>\n            <input type=\"text\" v-model=\"configuration.target\" id=\"cfg-target\" class=\"cs-input__input\" @change=\"onChange\">\n        </div>\n        <button type=\"submit\">Save</button>\n    </form>`,\n    props: {\n        configuration: {\n            type: Object,\n            default: {\n                label: '',\n                target: '',\n            },\n        },\n    },\n};\n\nexport default ccButtonConfigurator;\n","import ccButtonConfigurator from '../../../components/cc-button-configurator/src/cc-button-configurator';\n\nimport $ from 'jquery';\nimport $t from 'mage/translate';\n\nconst m2cButtonConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccButtonConfigurator,\n    ],\n    template: `<form class=\"m2c-button-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\n        <div class=\"m2-input m2-input--type-inline\">\n            <label for=\"cfg-label\" class=\"m2-input__label\">${$t( 'Label' )}:</label>\n            <input type=\"text\" v-model=\"configuration.label\" id=\"cfg-label\" class=\"m2-input__input\" @change=\"onChange\">\n        </div>\n        <div class=\"m2-input m2-input--type-addon m2-input--type-inline | m2c-button-configurator__item-form-element\">\n            <label for=\"cfg-target\" class=\"m2-input__label\">${$t( 'Target' )}:</label>\n            <div class=\"m2-input__addon-wrapper\">\n                <input type=\"text\" class=\"m2-input__input m2-input--type-readonly | m2c-button-configurator__target\" readonly v-model=\"configuration.target\" id=\"cfg-target\">\n                <span class=\"m2-input__addon | m2c-button-configurator__widget-chooser-trigger\" @click=\"openCtaTargetModal()\">\n                    <svg class=\"m2-input__addon-icon\">\n                        <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#icon_link' }\"></use>\n                    </svg>\n                </span>\n            </div>\n        </div>\n    </form>`,\n    props: {\n        /*\n         * Single's component configuration\n         */\n        configuration: {\n            type: Object,\n            default: {\n                label: '',\n                target: '',\n            },\n        },\n        /* Get assets for displaying component images */\n        assetsSrc: {\n            type: String,\n            default: '',\n        },\n    },\n    events: {\n        /**\n         * Listen on save event from Content Configurator component.\n         */\n        'cc-component-configurator__save'(): void {\n            this.onSave();\n        },\n    },\n    methods: {\n        /* Opens modal with M2 built-in widget chooser\n         */\n        openCtaTargetModal(): void {\n            widgetTools.openDialog( `${window.location.origin}/admin/admin/widget/index/widget_target_id/cfg-target` );\n\n            /* clean current value since widget chooser doesn't do that to allow multiple widgets\n             * we don't want that since this should be url for CTA\n             */\n            this.configuration.target = '';\n\n            this.wWidgetListener();\n        },\n        /* Sets listener for widget chooser\n         * It triggers component.onChange to update component's configuration\n         * after value of target input is changed\n         */\n        widgetSetListener(): void {\n            const component: any = this;\n\n            $( '.m2c-button-configurator__cta-target-link' ).on( 'change', (): void => {\n                component.onChange();\n            } );\n        },\n        /* \n         * Check if widget chooser is loaded. If not, wait for it\n         */\n        wWidgetListener(): void {\n            if ( typeof wWidget !== 'undefined' && widgetTools.dialogWindow[ 0 ].innerHTML !== '' ) {\n                this.disableNotLinksOptions();\n            } else {\n                setTimeout( this.wWidgetListener, 300 );\n            }\n        },\n        /* \n         * Hide all options in widget chooser that are not links\n         */\n        disableNotLinksOptions(): void {\n            if ( wWidget.widgetEl && wWidget.widgetEl.options ) {\n                $( wWidget.widgetEl.options ).each( function( i: boolean, el: any ): void {\n                    if ( el.value.split( '\\\\' ).pop() !== 'Link' && i !== 0 ) {\n                        $( el ).hide();\n                    }\n                } );\n            }\n        },\n    },\n    ready(): void {\n        this.widgetSetListener();\n    },\n};\n\nexport default m2cButtonConfigurator;\n","import ccComponentConfigurator from '../../cc-component-configurator/src/cc-component-configurator';\n\n/**\n * Category links configurator component.\n * This component is responsible for displaying category links configuration form\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccCategoryLinksConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccComponentConfigurator,\n    ],\n    template: `<form class=\"cc-category-links-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\n        <div class=\"cs-input cs-input--type-inline\">\n            <label for=\"cfg-main_category_id\" class=\"cs-input__label\">Main category ID:</label>\n            <input type=\"text\" v-model=\"configuration.main_category_id\" id=\"cfg-main_category_id\" class=\"cs-input__input\" @change=\"onChange\">\n        </div>\n        <div class=\"cs-input cs-input--type-inline\">\n            <label for=\"cfg-sub_categories_ids\" class=\"cs-input__label\">Subcategories ID's:</label>\n            <input type=\"text\" v-model=\"configuration.sub_categories_ids\" id=\"cfg-sub_categories_ids\" class=\"cs-input__input\" @change=\"onChange\">\n        </div>\n        <div class=\"cs-input cs-input--type-inline\">\n            <label for=\"cfg-shownumbers\" class=\"cs-input__label\">Show numbers:</label>\n            <input type=\"checkbox\" v-model=\"configuration.shownumber\" id=\"cfg-shownumbers\" class=\"cs-input__input\" @change=\"onChange\">\n        </div>\n        <button type=\"submit\">Save</button>\n    </form>`,\n    props: {\n        configuration: {\n            type: Object,\n            default: {\n                main_category_id: '',\n                sub_categories_ids: '',\n                shownumber: false,\n            },\n        },\n    },\n};\n\nexport default ccCategoryLinksConfigurator;\n","import ccCategoryLinksConfigurator from '../../../components/cc-category-links-configurator/src/cc-category-links-configurator';\n\nconst m2cCategoryLinksConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccCategoryLinksConfigurator,\n    ],\n    template: `<form class=\"m2c-category-links-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\n        <div class=\"m2-input m2-input--type-inline\">\n            <label for=\"cfg-main_category_id\" class=\"m2-input__label\">Main category ID:</label>\n            <input type=\"text\" v-model=\"configuration.main_category_id\" id=\"cfg-main_category_id\" class=\"m2-input__input\" @change=\"onChange\">\n        </div>\n        <div class=\"m2-input m2-input--type-inline\">\n            <label for=\"cfg-sub_categories_ids\" class=\"m2-input__label\">Subcategories ID's:</label>\n            <input type=\"text\" v-model=\"configuration.sub_categories_ids\" id=\"cfg-sub_categories_ids\" class=\"m2-input__input\" @change=\"onChange\">\n        </div>\n        <div class=\"m2-input m2-input--type-inline\">\n            <label for=\"cfg-shownumbers\" class=\"m2-input__label\">Show numbers:</label>\n            <input type=\"checkbox\" v-model=\"configuration.shownumber\" id=\"cfg-shownumbers\" class=\"m2-input__input\" @change=\"onChange\">\n        </div>\n    </form>`,\n};\n\nexport default m2cCategoryLinksConfigurator;\n","import ccComponentConfigurator from '../../cc-component-configurator/src/cc-component-configurator';\n\n/**\n * Headline configurator component.\n * This component is responsible for displaying headlines configuration form\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccHeadlineConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccComponentConfigurator,\n    ],\n    template: `<form class=\"cc-headline-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\n        <div class=\"cs-input cs-input--type-inline\">\n            <label for=\"cfg-headline\" class=\"cs-input__label\">Headline:</label>\n            <input type=\"text\" v-model=\"configuration.title\" id=\"cfg-headline\" class=\"cs-input__input\" @change=\"onChange\">\n        </div>\n        <div class=\"cs-input cs-input--type-inline\">\n            <label for=\"cfg-subheadline\" class=\"cs-input__label\">Subheadline:</label>\n            <input type=\"text\" v-model=\"configuration.subtitle\" id=\"cfg-subheadline\" class=\"cs-input__input\" @change=\"onChange\">\n        </div>\n        <button type=\"submit\">Save</button>\n    </form>`,\n    props: {\n        configuration: {\n            type: Object,\n            default: {\n                title: '',\n                subtitle: '',\n            },\n        },\n    },\n};\n\nexport default ccHeadlineConfigurator;\n","import ccHeadlineConfigurator from '../../../components/cc-headline-configurator/src/cc-headline-configurator';\n\nconst m2cHeadlineConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccHeadlineConfigurator,\n    ],\n    template: `<form class=\"m2c-headline-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\n        <div class=\"m2-input m2-input--type-inline\">\n            <label for=\"cfg-headline\" class=\"m2-input__label\">Headline:</label>\n            <input type=\"text\" v-model=\"configuration.title\" id=\"cfg-headline\" class=\"m2-input__input\" @change=\"onChange\">\n        </div>\n        <div class=\"m2-input m2-input--type-inline\">\n            <label for=\"cfg-subheadline\" class=\"m2-input__label\">Subheadline:</label>\n            <input type=\"text\" v-model=\"configuration.subtitle\" id=\"cfg-subheadline\" class=\"m2-input__input\" @change=\"onChange\">\n        </div>\n    </form>`,\n};\n\nexport default m2cHeadlineConfigurator;\n","/**\n * Action button component version.\n * Small component that allows to set it's content.\n *\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst actionButton: vuejs.ComponentOption = {\n    template: `<button class=\"action-button {{ class }}\" @click=\"_onClick\">\n        <slot></slot>\n    </button>`,\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: '',\n        },\n    },\n    methods: {\n        /**\n         * Button click handler.\n         * This handler triggers \"action-button__click\" event up the DOM chain when called.\n         * @param {Event} event Click event object.\n         */\n        _onClick( event: Event ): void {\n            this.$dispatch( 'action-button__click', event );\n        },\n    },\n};\n\nexport default actionButton;\n","/**\n * Component actions component.\n * This component is responsible for displaying and handling user interactions of\n * side utility navigation for each component that supports:\n * - Moving component up,\n * - Moving component down,\n * - Opening component settings,\n * - Deleting component.\n *\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst componentActions: vuejs.ComponentOption = {\n    template: `<aside class=\"cc-component-actions | {{ class }}\">\n        <div class=\"cc-component-actions__top\">\n            <slot name=\"cc-component-actions__top\"></slot>\n        </div>\n        <div class=\"cc-component-actions__bottom\">\n            <slot name=\"cc-component-actions__bottom\"></slot>\n        </div>\n    </aside>`,\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: String,\n            default: '',\n            coerce: ( value: String ): String => value.replace( 'cc-component-actions', '' ),\n        },\n    },\n};\n\nexport default componentActions;\n","/**\n * Component controller component.\n * This component is responsible for displaying annd handling component adding button\n * @type {vuejs.ComponentOption} Vue component object.\n */\n\nconst componentAdder: vuejs.ComponentOption = {\n    template: `<section class=\"cc-component-adder | {{ class }}\">\n        <div class=\"cc-component-adder__button-wrapper\" @click=\"onCreateComponent\">\n            <slot></slot>\n        </div>\n    </section>`,\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: String,\n            default: '',\n            coerce( value: string ): string {\n                return value.replace( 'cc-component-adder', '' );\n            },\n        },\n        /**\n         * Property containing callback triggered when user clicks \"add component\" button.\n         */\n        createComponent: {\n            type: Function,\n        },\n    },\n    methods: {\n        /**\n         * \"Add component\" button click handler.\n         * This handler triggers \"cc-component-adder__create-component\" event up the DOM chain when called.\n         * @param {Event} event Click event object.\n         */\n        onCreateComponent( event: Event ): void {\n            this.$dispatch( 'cc-component-adder__create-component', event );\n            if ( typeof this.createComponent === 'function' ) {\n                this.createComponent( event );\n            }\n        },\n    },\n};\n\nexport default componentAdder;\n","/**\n * Component placeholder component.\n */\nconst componentPlaceholder: any = {\n    template: `<div class=\"cc-component-placeholder\">\n        <div class=\"cc-component-placeholder__content\">\n            <slot></slot>\n        </div>\n    </div>`,\n};\n\nexport default componentPlaceholder;\n","import template from './cc-hero-carousel-configurator.tpl';\n\nimport ccComponentConfigurator from '../../cc-component-configurator/src/cc-component-configurator';\n\nimport actionButton from '../../action-button/src/action-button';\n\nimport componentActions from '../../cc-component-actions/src/cc-component-actions';\nimport componentAdder from '../../cc-component-adder/src/cc-component-adder';\nimport componentPlaceholder from '../../cc-component-placeholder/src/cc-component-placeholder';\n\n/**\n * Hero carousel configurator component.\n * This component is responsible for displaying image teaser's configuration form\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccHeroCarouselConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccComponentConfigurator,\n    ],\n    template,\n    /**\n     * Get dependencies\n     */\n    components: {\n        'action-button': actionButton,\n        'cc-component-adder': componentAdder,\n        'cc-component-actions': componentActions,\n        'cc-component-placeholder': componentPlaceholder,\n    },\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: '',\n        },\n        /**\n         * Single's component configuration \n         */\n        configuration: {\n            type: Object,\n            default(): Object {\n                return {\n                    items: [],\n                };\n            },\n        },\n    },\n};\n\nexport default ccHeroCarouselConfigurator;\n","import ccHeroCarouselConfigurator from '../../../components/cc-hero-carousel-configurator/src/cc-hero-carousel-configurator';\n\nimport $ from 'jquery';\nimport $t from 'mage/translate';\nimport alert from 'Magento_Ui/js/modal/alert';\nimport confirm from 'Magento_Ui/js/modal/confirm';\n\n// Pattern for teaser Item\nconst heroItemDataPattern: any = {\n    image: '',\n    decodedImage: '',\n    displayVariant: 'variant-1',\n    headline: '',\n    subheadline: '',\n    paragraph: '',\n    ctaLabel: $t( 'Check offer' ),\n    href: '',\n    sizeInfo: '',\n    aspectRatio: '',\n};\n\n/**\n * M2C skin for Hero configurator component.\n * This component is responsible for displaying hero carousel's configuration form\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst m2cHeroCarouselConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccHeroCarouselConfigurator,\n    ],\n    template: `<div class=\"m2c-hero-carousel-configurator | {{ class }}\">\n        <div class=\"m2c-hero-carousel-configurator__modal\" v-el:error-modal></div>\n        <div class=\"m2c-hero-carousel-configurator__global-configuration\">\n            <div class=\"m2-input\">\n                <label for=\"cfg-hc-hero-display-variant\" class=\"m2-input__label\">${$t( 'Mobile display variant' )}:</label>\n                <select name=\"cfg-hc-hero-display-variant\" class=\"m2-input__select\" id=\"cfg-hc-hero-display-variant\" v-model=\"configuration.mobileDisplayVariant\" v-bind=\"{ 'style': 'background-image: url( ' + assetsSrc + 'images/dropdown-arrows-bg.svg ), linear-gradient( #e3e3e3, #e3e3e3 ), linear-gradient( #adadad, #adadad )' }\">\n                    <option value=\"slider\">${$t( 'Display as slider' )}</option>\n                    <option value=\"list\">${$t( 'Display as list - one under another' )}</option>\n                </select>\n            </div>\n        </div>\n        <cc-component-adder>\n            <button is=\"action-button\" class=\"action-button action-button--look_important action-button--type_icon-only | m2c-hero-carousel-configurator__item-action-button\" @click=\"createNewHeroItem( 0 )\">\n                <svg class=\"action-button__icon action-button__icon--size_300\">\n                    <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#icon_plus' }\"></use>\n                </svg>\n            </button>\n        </cc-component-adder>\n        <template v-for=\"item in configuration.items\">\n            <div class=\"m2c-hero-carousel-configurator__item\" id=\"m2c-hero-carousel-item-{{ $index }}\">\n                <div class=\"m2c-hero-carousel-configurator__item-actions\">\n                    <cc-component-actions>\n                        <template slot=\"cc-component-actions__top\">\n                            <button is=\"action-button\" class=\"action-button action-button--look_default action-button--type_icon-only | cc-component-actions__button cc-component-actions__button--up | m2c-hero-carousel-configurator__item-action-button\" @click=\"moveHeroItemUp( $index )\" :class=\"[ isFirstHeroItem( $index ) ? 'action-button--look_disabled' : '' ]\" :disabled=\"isFirstHeroItem( $index )\">\n                                <svg class=\"action-button__icon action-button__icon--size_100\">\n                                    <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#icon_arrow-up' }\"></use>\n                                </svg>\n                            </button>\n                            <button is=\"action-button\" class=\"action-button action-button--look_default action-button--type_icon-only | cc-component-actions__button cc-component-actions__button--down | m2c-hero-carousel-configurator__item-action-button\" @click=\"moveHeroItemDown( $index )\" :class=\"[ isLastHeroItem( $index ) ? 'action-button--look_disabled' : '' ]\" :disabled=\"isLastHeroItem( $index )\">\n                                <svg class=\"action-button__icon action-button__icon--size_100\">\n                                    <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#icon_arrow-down' }\"></use>\n                                </svg>\n                            </button>\n                        </template>\n                        <template slot=\"cc-component-actions__bottom\">\n                            <button is=\"action-button\" class=\"action-button action-button--look_default action-button--type_icon-only | cc-component-actions__button cc-component-actions__button--delete | m2c-hero-carousel-configurator__item-action-button\" @click=\"deleteHeroItem( $index )\">\n                                <svg class=\"action-button__icon\">\n                                    <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#icon_trash-can' }\"></use>\n                                </svg>\n                            </button>\n                        </template>\n                    </cc-component-actions>\n                </div>\n                <div class=\"m2c-hero-carousel-configurator__item-content\">\n                    <div v-bind:class=\"[ 'm2c-hero-carousel-configurator__item-col-left', configuration.items[$index].image ? 'm2c-hero-carousel-configurator__item-col-left--look-image-uploaded' : '' ]\">\n                        <div class=\"m2c-hero-carousel-configurator__toolbar\">\n                            <span class=\"m2c-hero-carousel-configurator__size-info\">{{ configuration.items[$index].sizeInfo }}</span>\n                            <template v-if=\"configuration.items[$index].image\">\n                                <a href=\"#\" @click=\"getImageUploader( $index )\">${$t( 'Change image' )}</a>\n                            </template>\n                            <template v-else>\n                                <a href=\"#\" @click=\"getImageUploader( $index )\">${$t( 'Upload image' )}</a>\n                            </template>\n                        </div>\n                        <div class=\"m2c-hero-carousel-configurator__item-image-wrapper\">\n                            <img :src=\"configuration.items[$index].image\" class=\"m2c-hero-carousel-configurator__item-image\" v-show=\"configuration.items[$index].image\">\n                            <input type=\"hidden\" v-model=\"configuration.items[$index].image\">\n                            <input type=\"hidden\" class=\"m2c-hero-carousel-configurator__image-url\" id=\"hero-img-{{$index}}\">\n                        </div>\n                    </div>\n                    <div class=\"m2c-hero-carousel-configurator__item-col-right\">\n                        <div class=\"m2-input | m2c-hero-carousel-configurator__item-form-element\">\n                            <label for=\"cfg-hc-item{{ $index }}-variant\" class=\"m2-input__label\">${$t( 'Display variant' )}:</label>\n                            <select name=\"cfg-hc-item{{ $index }}-variant\" class=\"m2-input__select\" id=\"cfg-hc-item{{ $index }}-variant\" v-model=\"configuration.items[$index].displayVariant\" v-bind=\"{ 'style': 'background-image: url( ' + assetsSrc + 'images/dropdown-arrows-bg.svg ), linear-gradient( #e3e3e3, #e3e3e3 ), linear-gradient( #adadad, #adadad )' }\">\n                                <option value=\"variant-1\">${$t( 'Text vertically centered on the left' )}</option>\n                                <option value=\"variant-2\">${$t( 'Text vertically centered in the middle' )}</option>\n                                <option value=\"variant-3\">${$t( 'Text on the bottom, left corner' )}</option>\n                                <option value=\"variant-4\">${$t( 'Text on the bottom - centered' )}</option>\n                            </select>\n                        </div>\n                        <div class=\"m2-input | m2c-hero-carousel-configurator__item-form-element\">\n                            <label for=\"cfg-hc-item{{ $index }}-headline\" class=\"m2-input__label\">${$t( 'Headline' )}:</label>\n                            <input type=\"text\" v-model=\"configuration.items[$index].headline\" id=\"cfg-hc-item{{ $index }}-headline\" class=\"m2-input__input\">\n                        </div>\n                        <div class=\"m2-input | m2c-hero-carousel-configurator__item-form-element\">\n                            <label for=\"cfg-hc-item{{ $index }}-subheadline\" class=\"m2-input__label\">${$t( 'Subheadline' )}:</label>\n                            <input type=\"text\" v-model=\"configuration.items[$index].subheadline\" id=\"cfg-hc-item{{ $index }}-subheadline\" class=\"m2-input__input\">\n                        </div>\n                        <div class=\"m2-input | m2c-hero-carousel-configurator__item-form-element\">\n                            <label for=\"cfg-hc-item{{ $index }}-paragraph\" class=\"m2-input__label\">${$t( 'Paragraph' )}:</label>\n                            <textarea type=\"text\" v-model=\"configuration.items[$index].paragraph\" id=\"cfg-hc-item{{ $index }}-paragraph\" class=\"m2-input__textarea\" placeholder=\"(max 200 characters)\" maxlength=\"200\"></textarea>\n                        </div>\n                        <div class=\"m2-input | m2c-hero-carousel-configurator__item-form-element\">\n                            <label for=\"cfg-hc-item{{ $index }}-cta-label\" class=\"m2-input__label\">${$t( 'CTA label' )}:</label>\n                            <input type=\"text\" v-model=\"configuration.items[$index].ctaLabel\" id=\"cfg-hc-item{{ $index }}-cta-label\" class=\"m2-input__input\">\n                        </div>\n                        <div class=\"m2-input m2-input--type-addon | m2c-hero-carousel-configurator__item-form-element\">\n                            <label for=\"hero-ctatarget-output-{{ $index }}\" class=\"m2-input__label\">${$t( 'CTA target link' )}:</label>\n                            <input type=\"text\" class=\"m2-input__input m2-input--type-readonly | m2c-hero-carousel-configurator__cta-target-link\" readonly v-model=\"configuration.items[$index].href\" id=\"hero-ctatarget-output-{{ $index }}\">\n                            <span class=\"m2-input__addon | m2c-hero-carousel-configurator__widget-chooser-trigger\" @click=\"openCtaTargetModal( $index )\">\n                                <svg class=\"m2-input__addon-icon\">\n                                    <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#icon_link' }\"></use>\n                                </svg>\n                            </span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <cc-component-adder v-if=\"configuration.items.length\">\n                <button is=\"action-button\" class=\"action-button action-button--look_important action-button--type_icon-only | m2c-hero-carousel-configurator__item-action-button\" @click=\"createNewHeroItem( $index + 1 )\">\n                    <svg class=\"action-button__icon action-button__icon--size_300\">\n                        <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#icon_plus' }\"></use>\n                    </svg>\n                </button>\n            </cc-component-adder>\n        </template>\n    </div>`,\n    props: {\n        /*\n         * Single's component configuration\n         */\n        configuration: {\n            type: Object,\n            default: {\n                mobileDisplayVariant: 'slider',\n                items: [ JSON.parse( JSON.stringify( heroItemDataPattern ) ) ],\n            },\n        },\n        /* get assets for displaying component images */\n        assetsSrc: {\n            type: String,\n            default: '',\n        },\n        /* Obtain base-url for the image uploader */\n        uploaderBaseUrl: {\n            type: String,\n            default: '',\n        },\n        /* Obtain image endpoint to place permanent url for uploaded images */\n        imageEndpoint: {\n            type: String,\n            default: '',\n        },\n    },\n    events: {\n        /**\n         * Listen on save event from Content Configurator component.\n         */\n        'cc-component-configurator__save'(): void {\n            this.cleanupConfiguration();\n            this.onSave();\n        },\n    },\n    methods: {\n        /* Opens M2's built-in image manager modal\n         * Manages all images: image upload from hdd, select image that was already uploaded to server\n         * @param index {number} - index of image of hero item\n         */\n        getImageUploader( index: number ): void {\n            MediabrowserUtility.openDialog( `${this.uploaderBaseUrl}target_element_id/hero-img-${index}/`,\n                'auto',\n                'auto',\n                $t( 'Insert File...' ),\n                {\n                    closed: true,\n                },\n            );\n        },\n\n        /* Listener for image uploader\n         * Since Magento does not provide any callback after image has been chosen\n         * we have to watch for target where decoded url is placed\n         */\n        imageUploadListener(): void {\n            const component: any = this;\n            let isAlreadyCalled: boolean = false;\n\n            // jQuery has to be used, for some reason native addEventListener doesn't catch change of input's value\n            $( document ).on( 'change', '.m2c-hero-carousel-configurator__image-url', ( event: Event ): void => {\n                if ( !isAlreadyCalled ) {\n                    isAlreadyCalled = true;\n                    component.onImageUploaded( event.target );\n                    setTimeout( (): void => {\n                        isAlreadyCalled = false;\n                    }, 100 );\n                }\n            } );\n        },\n\n        /* Action after image was uploaded\n         * URL is encoded, so strip it and decode Base64 to get {{ media url=\"...\"}} format\n         * which will go to the items.image and will be used to display image on front end\n         * @param input { object } - input with raw image path which is used in admin panel\n         */\n        onImageUploaded( input: any ): void {\n            const _this: any = this;\n            const itemIndex: any = input.id.substr( input.id.length - 1 );\n            const encodedImage: any = input.value.match( '___directive\\/([a-zA-Z0-9]*)' )[ 1 ];\n            const imgEndpoint: string = this.imageEndpoint.replace( '{/encoded_image}', encodedImage );\n\n            this.configuration.items[ itemIndex ].decodedImage = Base64 ? Base64.decode( encodedImage ) : window.atob( encodedImage );\n\n            const img: any = new Image();\n            img.onload = function(): void {\n                const ar: string = _this.getAspectRatio( img.naturalWidth, img.naturalHeight );\n                _this.configuration.items[ itemIndex ].image = img.getAttribute( 'src' );\n                _this.configuration.items[ itemIndex ].sizeInfo = `${img.naturalWidth}x${img.naturalHeight}px (${ar})`;\n                _this.configuration.items[ itemIndex ].aspectRatio = ar;\n                _this.checkImageSizes();\n                _this.onChange();\n            };\n            img.src = imgEndpoint;\n        },\n        /* Opens modal with M2 built-in widget chooser\n         * @param index {number} - index of teaser item to know where to place output of widget chooser\n         */\n        openCtaTargetModal( index: number ): void {\n            widgetTools.openDialog( `${window.location.origin}/admin/admin/widget/index/widget_target_id/hero-ctatarget-output-${index}` );\n\n            /* clean current value since widget chooser doesn't do that to allow multiple widgets\n             * we don't want that since this should be url for CTA\n             */\n            this.configuration.items[ index ].href = '';\n\n            this.wWidgetListener();\n        },\n        /* Sets listener for widget chooser\n         * It triggers component.onChange to update component's configuration\n         * after value of item.href is changed\n         */\n        widgetSetListener(): void {\n            const component: any = this;\n\n            $( '.m2c-hero-carousel-configurator__cta-target-link' ).on( 'change', (): void => {\n                component.onChange();\n            } );\n        },\n        /* \n         * Check if widget chooser is loaded. If not, wait for it\n         */\n        wWidgetListener(): void {\n            if ( typeof wWidget !== 'undefined' && widgetTools.dialogWindow[ 0 ].innerHTML !== '' ) {\n                this.disableNotLinksOptions();\n            } else {\n                setTimeout( this.wWidgetListener, 300 );\n            }\n        },\n        /* \n         * Hide all options in widget chooser that are not links\n         */\n        disableNotLinksOptions(): void {\n            if ( wWidget.widgetEl && wWidget.widgetEl.options ) {\n                $( wWidget.widgetEl.options ).each( function( i: boolean, el: any ): void {\n                    if ( el.value.split( '\\\\' ).pop() !== 'Link' && i !== 0 ) {\n                        $( el ).hide();\n                    }\n                } );\n            }\n        },\n        /**\n         * Creates new hero item and adds it to a specified index.\n         * @param {number} index New component's index in components array.\n         */\n        createNewHeroItem( index: number ): void {\n            this.configuration.items.splice( index, 0, JSON.parse( JSON.stringify( heroItemDataPattern ) ) );\n            this.onChange();\n        },\n        /**\n         * Moves hero item under given index up by swaping it with previous element.\n         * @param {number} index Hero item's index in array.\n         */\n        moveHeroItemUp( index: number ): void {\n            if ( index > 0 ) {\n                this.configuration.items.splice( index - 1, 0, this.configuration.items.splice( index, 1 )[ 0 ] );\n                this.onChange();\n            }\n        },\n        /**\n         * Moves hero item under given index down by swaping it with next element.\n         * @param {number} index Hero item's index in array.\n         */\n        moveHeroItemDown( index: number ): void {\n            if ( index < this.configuration.items.length - 1 ) {\n                this.configuration.items.splice( index + 1, 0, this.configuration.items.splice( index, 1 )[ 0 ] );\n                this.onChange();\n            }\n        },\n        /**\n         * Tells if item with given index is the first hero item.\n         * @param  {number}  index Index of the hero item.\n         * @return {boolean}       If hero item is first in array.\n         */\n        isFirstHeroItem( index: number ): boolean {\n            return index === 0;\n        },\n        /**\n         * Tells if hero item with given index is the last hero item.\n         * @param  {number}  index Index of the hero item.\n         * @return {boolean}       If hero item is last in array.\n         */\n        isLastHeroItem( index: number ): boolean {\n            return index === this.configuration.items.length - 1;\n        },\n        /* Removes hero item after Delete button is clicked\n         * and triggers hero item's onChange to update it's configuration\n         * @param index {number} - index of hero item to remove\n         */\n        deleteHeroItem( index: number ): void {\n            const component: any = this;\n\n            confirm( {\n                content: $t( 'Are you sure you want to delete this item?' ),\n                actions: {\n                    confirm(): void {\n                        component.configuration.items.splice( index, 1 );\n                        component.onChange();\n                    },\n                },\n            } );\n        },\n        /* Cleans configuration for M2C content constructor after Saving component\n         * All empty hero items has to be removed to not get into configuration object\n         */\n        cleanupConfiguration(): void {\n            const filteredArray: any = this.configuration.items.filter( ( item: any ): any => item.image !== '' );\n            this.configuration.items = filteredArray;\n            this.onChange();\n        },\n        /* Checks if images are all the same size\n         * If not - displays error by firing up this.displayImageSizeMismatchError()\n         * @param images {array} - array of all uploaded images\n         */\n        checkImageSizes(): boolean {\n            const itemsToCheck = JSON.parse(JSON.stringify(this.configuration.items)).filter((item: any): boolean => {\n                return Boolean(item.aspectRatio); // Filter out items without aspect ratio set yet.\n            });\n            for ( let i: number = 0; i < itemsToCheck.length; i++ ) {\n                if ( itemsToCheck[ i ].aspectRatio !== itemsToCheck[ 0 ].aspectRatio ) {\n                    alert( {\n                        title: $t( 'Warning' ),\n                        content: $t( 'Images you have uploaded have different aspect ratio. This may cause this component to display wrong. We recommend all images uploaded to have the same aspect ratio.' ),\n                    } );\n                    return false;\n                }\n            }\n            return true;\n        },\n        /* Returns greatest common divisor for 2 numbers\n         * @param a {number}\n         * @param b {number}\n         * @return {number} - greatest common divisor\n         */\n        getGreatestCommonDivisor( a: number, b: number ): number {\n            if ( !b ) {\n                return a;\n            }\n\n            return this.getGreatestCommonDivisor( b, a % b );\n        },\n        /* Returns Aspect ratio for 2 numbers based on GDC algoritm (greatest common divisor)\n         * @param a {number}\n         * @param b {number}\n         * @return {number} - greatest common divisor\n         */\n        getAspectRatio( a: number, b: number ): string {\n            let c: number = this.getGreatestCommonDivisor( a, b );\n\n            return `${( a / c )}:${( b / c )}`;\n        },\n    },\n    ready(): void {\n        this.imageUploadListener();\n        this.widgetSetListener();\n    },\n};\n\nexport default m2cHeroCarouselConfigurator;\n","import ccComponentConfigurator from '../../cc-component-configurator/src/cc-component-configurator';\n\nimport actionButton from '../../action-button/src/action-button';\n\nimport componentActions from '../../cc-component-actions/src/cc-component-actions';\nimport componentAdder from '../../cc-component-adder/src/cc-component-adder';\nimport componentPlaceholder from '../../cc-component-placeholder/src/cc-component-placeholder';\n\ninterface TeaserItem {\n    image: string;\n    decodedImage: string;\n    headline: string;\n    paragraph: string;\n    ctaLabel: string;\n    ctaTarget: string;\n};\n\n// Pattern for teaser Item\nconst teaserItemPrototype: any = {\n    image: '',\n    decodedImage: '',\n    headline: '',\n    paragraph: '',\n    ctaLabel: 'More',\n    href: '',\n    sizeInfo: '',\n    aspectRatio: '',\n};\n\n/**\n * Image teaser configurator component.\n * This component is responsible for displaying image teaser's configuration form\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccImageTeaserConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccComponentConfigurator,\n    ],\n    components: {\n        'action-button': actionButton,\n        'cc-component-adder': componentAdder,\n        'cc-component-actions': componentActions,\n        'cc-component-placeholder': componentPlaceholder,\n    },\n    template: `<form class=\"cc-image-teaser-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\n        <section class=\"cc-image-teaser-configurator__section\">\n            <div class=\"cs-input cs-input--type-inline\">\n                <label for=\"cfg-it-width\" class=\"cs-input__label\">Teaser width:</label>\n                <select name=\"cfg-it-width-select\" class=\"cs-input__select\" id=\"cfg-it-width\" v-model=\"configuration.teaserWidth\" @change=\"onChange\">\n                    <option value=\"full-width\" selected>Full browser width</option>\n                    <option value=\"limited-width\">Breaking point width (1280px)</option>\n                </select>\n            </div>\n            <div class=\"cs-input cs-input--type-inline\">\n                <label for=\"cfg-it-images-per-slide\" class=\"cs-input__label\">Images per slide:</label>\n                <select name=\"cfg-it-images-per-slide\" class=\"cs-input__select\" id=\"cfg-it-images-per-slide\" v-model=\"configuration.itemsPerSlide\" @change=\"onChange\">\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                    <option value=\"6\">6</option>\n                    <option value=\"7\">7</option>\n                    <option value=\"8\">8</option>\n                    <option value=\"9\">9</option>\n                </select>\n            </div>\n        </section>\n\n        <section class=\"cc-image-teaser-configurator__section\">\n            <div class=\"cc-image-teaser-configurator__teaser\">\n                <template v-for=\"item in configuration.items\">\n                    <div class=\"cc-image-teaser-configurator__teaser-item\" id=\"cc-image-teaser-item-{{ $index }}\">\n                        <div class=\"cc-image-teaser-configurator__toolbar\">\n                            <span class=\"cc-image-teaser-configurator__teaser-item-title\">Banner {{ $index+1 }}/{{ configuration.items.length }}</span>\n                            <a href=\"#\" class=\"cc-image-teaser-configurator__upload-link\" href=\"#\">Upload image</a>\n                        </div>\n                        <div class=\"cc-image-teaser-configurator__image-holder-outer\">\n                            <div class=\"cc-image-teaser-configurator__image-holder-inner\">\n                                <input type=\"hidden\" value=\"\" class=\"cc-image-teaser-configurator__image-url\" v-model=\"configuration.items[$index].image\" @change=\"onChange\">\n                            </div>\n                        </div>\n                        <div class=\"cs-input cs-input--type-required\">\n                            <label for=\"cfg-it-teaser{{ $index+1 }}-headline\" class=\"cs-input__label\">Headline:</label>\n                            <input type=\"text\" v-model=\"configuration.items[$index].headline\" id=\"cfg-it-teaser{{ $index+1 }}-headline\" class=\"cs-input__input\" @change=\"onChange\">\n                        </div>\n                        <div class=\"cs-input cs-input--type-required\">\n                            <label for=\"cfg-it-teaser{{ $index+1 }}-paragraph\" class=\"cs-input__label\">Paragraph:</label>\n                            <textarea type=\"text\" v-model=\"configuration.items[$index].paragraph\" id=\"cfg-it-teaser{{ $index+1 }}-paragraph\" class=\"cs-input__textarea cs-input__textarea--look-thin\" @change=\"onChange\" placeholder=\"(max 200 characters)\" maxlength=\"200\"></textarea>\n                        </div>\n                        <div class=\"cs-input\">\n                            <label for=\"cfg-it-teaser{{ $index+1 }}-cta-label\" class=\"cs-input__label\">CTA label:</label>\n                            <input type=\"text\" v-model=\"configuration.items[$index].ctaLabel\" id=\"cfg-it-teaser{{ $index+1 }}-cta-label\" class=\"cs-input__input\" @change=\"onChange\">\n                        </div>\n                        <div class=\"cs-input\">\n                            <label for=\"cfg-it-teaser{{ $index+1 }}-cta-target\" class=\"cs-input__label\">CTA target link:</label>\n                            <input type=\"text\" v-model=\"item.ctaTarget\" id=\"cfg-it-teaser{{ $index+1 }}-cta-target\" class=\"cs-input__input\" @change=\"onChange\">\n                        </div>\n                    </div>\n                </template>\n            </div>\n        </section>\n\n        <section class=\"cc-image-teaser-configurator__section cc-image-teaser-configurator__section--type-actions\">\n            <button type=\"submit\">Save</button>\n        </section>\n    </form>`,\n    data(): any {\n        return {\n            scenarioOptions: {\n                // Teaser width scenario elements.\n                teaserWidth: {\n                    'c': {\n                        name: 'Container width',\n                        iconId: 'tw_content-width',\n                        disabled: false,\n                        teasersLimit: true,\n                    },\n                    'w': {\n                        name: 'Window width',\n                        iconId: 'tw_window-width',\n                        disabled: false,\n                        teasersLimit: true,\n                    },\n                    'w-s': {\n                        name: 'Window slider',\n                        iconId: 'tw_window-slider',\n                        disabled: false,\n                        teasersLimit: false,\n                    },\n                },\n                // Desktop layout scenario elements.\n                desktopLayout: {\n                    '1': {\n                        name: '1 in row',\n                        iconId: 'dl_1',\n                        disabled: false,\n                        teasersNum: 1,\n                    },\n                    '2': {\n                        name: '2 in row',\n                        iconId: 'dl_2',\n                        disabled: false,\n                        teasersNum: 2,\n                    },\n                    '3': {\n                        name: '3 in row',\n                        iconId: 'dl_3',\n                        disabled: false,\n                        teasersNum: 3,\n                    },\n                    '4': {\n                        name: '4 in row',\n                        iconId: 'dl_4',\n                        disabled: false,\n                        teasersNum: 4,\n                    },\n                    '6': {\n                        name: '6 in row',\n                        iconId: 'dl_6',\n                        disabled: false,\n                        teasersNum: 6,\n                    },\n                },\n                // Text positioning scenario elements.\n                textPositioning: {\n                    'over': {\n                        name: 'Text over image',\n                        iconId: 'tl_over',\n                        disabled: false,\n                        textPosition: true,\n                    },\n                    'under': {\n                        name: 'Text below image',\n                        iconId: 'tl_under',\n                        disabled: false,\n                        textPosition: false,\n                    },\n                },\n\n                // Mobile layout scenario elements.\n                mobileLayout: {\n                    'large': {\n                        name: 'Large teaser',\n                        iconId: 'ml_col',\n                        disabled: false,\n                    },\n                    'slider': {\n                        name: 'Slider',\n                        iconId: 'ml_slider',\n                        disabled: false,\n                    },\n                    'row': {\n                        name: 'Teasers in row',\n                        iconId: 'ml_2-2',\n                        disabled: false,\n                    },\n                    'col': {\n                        name: 'Teasers in column',\n                        iconId: 'ml_col',\n                        disabled: false,\n                    },\n                    '1-2': {\n                        name: 'Big, two small',\n                        iconId: 'ml_1-2',\n                        disabled: false,\n                    },\n                    '2-2': {\n                        name: '2 in row, 2 rows',\n                        iconId: 'ml_2-2',\n                        disabled: false,\n                    },\n                    '1-2-1': {\n                        name: 'Big, two small, big',\n                        iconId: 'ml_1-2',\n                        disabled: false,\n                    },\n                    '2-2-2': {\n                        name: '2 in row, 3 rows',\n                        iconId: 'ml_2-2',\n                        disabled: false,\n                    },\n                },\n            },\n            availableScenarios: [\n                ['c', '1', 'over', ['large']],\n\n                ['c', '2', 'over', ['col', 'row', 'slider']],\n                ['c', '2', 'under', ['col']],\n\n                ['c', '3', 'over', ['col', 'slider', '1-2']],\n                ['c', '3', 'under', ['col']],\n\n                ['c', '4', 'over', ['2-2', 'slider', '1-2-1']],\n                ['c', '4', 'under', ['col']],\n\n                ['c', '6', 'over', ['2-2-2', 'slider']],\n                ['c', '6', 'under', ['2-2-2', 'slider']],\n\n                ['w', '1', 'over', ['large']],\n\n                ['w', '2', 'over', ['col', 'row', 'slider']],\n                ['w', '2', 'under', ['col']],\n\n                ['w', '3', 'over', ['col', 'slider', '1-2']],\n                ['w', '3', 'under', ['col']],\n\n                ['w', '4', 'over', ['2-2', 'slider', '1-2-1']],\n                ['w', '4', 'under', ['col']],\n\n                ['w-s', '1', 'over', ['slider']],\n\n                ['w-s', '2', 'over', ['slider']],\n                ['w-s', '2', 'under', ['slider']],\n\n                ['w-s', '3', 'over', ['slider']],\n                ['w-s', '3', 'under', ['slider']],\n\n                ['w-s', '4', 'over', ['slider']],\n                ['w-s', '4', 'under', ['slider']],\n            ],\n        };\n    },\n    props: {\n        /**\n         * Image teaser configuration\n         */\n        configuration: {\n            type: Object,\n            default(): Object {\n                return {\n                    items: [ JSON.parse( JSON.stringify( teaserItemPrototype ) ) ],\n                    ignoredItems: [],\n                    currentScenario: {\n                        teaserWidth: {},\n                        desktopLayout: {},\n                        textPositioning: {},\n                        mobileLayout: {},\n                    },\n                };\n            },\n        },\n    },\n    created(): void {\n        if (this.configuration.ignoredItems === undefined) {\n            this.configuration.ignoredItems = [];\n        }\n    },\n    methods: {\n        _collectPossibleOptions(filteredScenarios: Array<Array<any>>): any {\n            const teaserWidthIndex: number = 0;\n            const desktopLayoutIndex: number = 1;\n            const textPositionIndex: number = 2;\n            const mobileLayoutsIndex: number = 3;\n            let possibleOptions: any = {\n                teaserWidth: {},\n                desktopLayout: {},\n                textPositioning: {},\n                mobileLayout: {},\n            };\n\n            filteredScenarios.forEach((filteredScenario: Array<any>) => {\n                possibleOptions.teaserWidth[filteredScenario[teaserWidthIndex]] = true;\n                possibleOptions.desktopLayout[filteredScenario[desktopLayoutIndex]] = true;\n                possibleOptions.textPositioning[filteredScenario[textPositionIndex]] = true;\n                filteredScenario[mobileLayoutsIndex].forEach((mobileLayout: string) => {\n                    possibleOptions.mobileLayout[mobileLayout] = true;\n                });\n            });\n\n            Object.keys(possibleOptions).forEach((scenarioElement: string): void => {\n                possibleOptions[scenarioElement] = Object.keys(possibleOptions[scenarioElement]);\n            });\n\n            return possibleOptions;\n        },\n\n        _findPossibleOptions(teaserWidth: string, desktopLayout: string, textPosition: string, mobileLayout: string): void {\n            const teaserWidthIndex: number = 0;\n            const desktopLayoutIndex: number = 1;\n            const textPositionIndex: number = 2;\n            const mobileLayoutsIndex: number = 3;\n            // Make a copy of available scenarios to prevent reference copying.\n            let filteredScenarios: Array<Array<string>> = JSON.parse(JSON.stringify(this.availableScenarios));\n\n            if (teaserWidth) {\n                filteredScenarios = filteredScenarios.filter((availableScenario: any) => {\n                    return availableScenario[teaserWidthIndex] === teaserWidth;\n                });\n            }\n\n            if (desktopLayout) {\n                filteredScenarios = filteredScenarios.filter((availableScenario: any) => {\n                    return availableScenario[desktopLayoutIndex] === desktopLayout;\n                });\n            }\n\n            if (textPosition) {\n                filteredScenarios = filteredScenarios.filter((availableScenario: any) => {\n                    return !textPosition || availableScenario[textPositionIndex] === textPosition;\n                });\n            }\n\n            if (mobileLayout) {\n                filteredScenarios = filteredScenarios.filter((availableScenario: any) => {\n                    return availableScenario[mobileLayoutsIndex].indexOf(mobileLayout) !== -1;\n                });\n                filteredScenarios = filteredScenarios.map((availableScenario: any) => {\n                    availableScenario[mobileLayoutsIndex] = [mobileLayout];\n                    return availableScenario;\n                });\n            }\n\n            return this._collectPossibleOptions(filteredScenarios);\n        },\n\n        toggleOption( optionCategory: string, optionId: string ): void {\n            if (this.configuration.currentScenario[optionCategory].id) {\n                this.configuration.currentScenario[optionCategory] = {};\n            } else {\n                this.configuration.currentScenario[optionCategory] = this.scenarioOptions[optionCategory][optionId];\n                this.configuration.currentScenario[optionCategory].id = optionId;\n            }\n\n            this.togglePossibleOptions();\n            this.adjustVisibleItems();\n        },\n\n        adjustVisibleItems(): void {\n            const items: Array<TeaserItem> = this.configuration.items;\n            const itemsNumber: number = this.configuration.currentScenario.desktopLayout.teasersNum;\n            const itemsLimit: boolean = this.configuration.currentScenario.teaserWidth.teasersLimit;\n\n            if ( itemsLimit && items.length > itemsNumber ) {\n                const removedItems: Array<any> = items.splice(itemsNumber, items.length - itemsNumber);\n                this.configuration.ignoredItems = removedItems.concat(this.configuration.ignoredItems);\n            } else if (items.length < itemsNumber) {\n                items.concat(this.configuration.ignoredItems.splice(0, itemsNumber - items.length));\n\n                for (let addedItems: number = 0; addedItems < itemsNumber - items.length; addedItems++) {\n                    items.push(JSON.parse(JSON.stringify(teaserItemPrototype)));\n                }\n            }\n        },\n\n        togglePossibleOptions(): void {\n            const currentScenario: any = this.configuration.currentScenario;\n            const possibleOptions: any = this._findPossibleOptions(\n                currentScenario.teaserWidth.id,\n                currentScenario.desktopLayout.id,\n                currentScenario.textPositioning.id,\n                currentScenario.mobileLayout.id,\n            );\n\n            Object.keys(this.scenarioOptions).forEach((optionCategory: string) => {\n                Object.keys(this.scenarioOptions[optionCategory]).forEach((scenarioOptionId: string) => {\n                    this.scenarioOptions[optionCategory][scenarioOptionId].disabled = possibleOptions[optionCategory].indexOf(scenarioOptionId) === -1;\n                });\n            });\n        },\n\n        canAddTeaser(): boolean {\n            const items: Array<TeaserItem> = this.configuration.items;\n            const itemsLimit: number = this.configuration.currentScenario.teaserWidth.teasersLimit;\n\n            return ( !itemsLimit || items.length < itemsLimit );\n        },\n    },\n};\n\nexport default ccImageTeaserConfigurator;\n","import $ from 'jquery';\nimport $t from 'mage/translate';\nimport alert from 'Magento_Ui/js/modal/alert';\nimport confirm from 'Magento_Ui/js/modal/confirm';\n\nimport ccImageTeaserConfigurator from '../../../components/cc-image-teaser-configurator/src/cc-image-teaser-configurator';\n\n// Pattern for teaser Item\nconst teaserItemPrototype: any = {\n    image: '',\n    decodedImage: '',\n    displayVariant: '1',\n    headline: '',\n    subheadline: '',\n    paragraph: '',\n    ctaLabel: $t( 'More' ),\n    href: '',\n    sizeInfo: '',\n    aspectRatio: '',\n};\n\n/**\n * M2C Image teaser component for admin panel.\n * This component is responsible for managing image teasers including image upload and widget chooser\n */\nconst m2cImageTeaserConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccImageTeaserConfigurator,\n    ],\n    template: `<div class=\"m2c-image-teaser-configurator {{ classes }} | {{ mix }}\" {{ attributes }}>\n        <section class=\"m2c-image-teaser-configurator__section\">\n            <h3 class=\"m2c-image-teaser-configurator__subtitle\">Teaser Width</h3>\n            <div class=\"m2c-image-teaser-configurator__scenario-options\">\n                <div\n                    :class=\"{\n                        'm2c-image-teaser-configurator__option--selected': configuration.currentScenario.teaserWidth.id == optionId,\n                        'm2c-image-teaser-configurator__option--disabled': option.disabled,\n                    }\"\n                    class=\"m2c-image-teaser-configurator__option\"\n                    v-for=\"(optionId, option) in scenarioOptions.teaserWidth\"\n                    @click=\"!option.disabled && toggleOption('teaserWidth', optionId)\">\n                    <div class=\"m2c-image-teaser-configurator__option-wrapper\">\n                        <svg class=\"m2c-image-teaser-configurator__option-icon\">\n                            <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#' + option.iconId }\"></use>\n                        </svg>\n                    </div>\n                    <p class=\"m2c-image-teaser-configurator__option-name\">\n                        {{ option.name }}\n                    </p>\n                </div>\n            </div>\n\n        </section>\n        <section class=\"m2c-image-teaser-configurator__section\">\n            <h3 class=\"m2c-image-teaser-configurator__subtitle\">Desktop Layout</h3>\n            <div class=\"m2c-image-teaser-configurator__scenario-options\">\n                <div\n                    :class=\"{\n                        'm2c-image-teaser-configurator__option--selected': configuration.currentScenario.desktopLayout.id == optionId,\n                        'm2c-image-teaser-configurator__option--disabled': option.disabled,\n                    }\"\n                    class=\"m2c-image-teaser-configurator__option\"\n                    v-for=\"(optionId, option) in scenarioOptions.desktopLayout\"\n                    @click=\"!option.disabled && toggleOption('desktopLayout', optionId)\">\n                    <div class=\"m2c-image-teaser-configurator__option-wrapper\">\n                        <svg class=\"m2c-image-teaser-configurator__option-icon\">\n                            <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#' + option.iconId }\"></use>\n                        </svg>\n                    </div>\n                    <p class=\"m2c-image-teaser-configurator__option-name\">\n                        {{ option.name }}\n                    </p>\n                </div>\n            </div>\n        </section>\n        <section class=\"m2c-image-teaser-configurator__section\">\n            <h3 class=\"m2c-image-teaser-configurator__subtitle\">Text Positioning</h3>\n            <div class=\"m2c-image-teaser-configurator__scenario-options\">\n                <div\n                    :class=\"{\n                        'm2c-image-teaser-configurator__option--selected': configuration.currentScenario.textPositioning.id == optionId,\n                        'm2c-image-teaser-configurator__option--disabled': option.disabled,\n                    }\"\n                    class=\"m2c-image-teaser-configurator__option\"\n                    v-for=\"(optionId, option) in scenarioOptions.textPositioning\"\n                    @click=\"!option.disabled && toggleOption('textPositioning', optionId)\">\n                    <div class=\"m2c-image-teaser-configurator__option-wrapper\">\n                        <svg class=\"m2c-image-teaser-configurator__option-icon\">\n                            <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#' + option.iconId }\"></use>\n                        </svg>\n                    </div>\n                    <p class=\"m2c-image-teaser-configurator__option-name\">\n                        {{ option.name }}\n                    </p>\n                </div>\n            </div>\n        </section>\n        <section class=\"m2c-image-teaser-configurator__section\">\n            <h3 class=\"m2c-image-teaser-configurator__subtitle\">Mobile Layout</h3>\n            <div class=\"m2c-image-teaser-configurator__scenario-options\">\n                <div\n                    :class=\"{\n                        'm2c-image-teaser-configurator__option--selected': configuration.currentScenario.mobileLayout.id == optionId,\n                        'm2c-image-teaser-configurator__option--disabled': option.disabled,\n                    }\"\n                    class=\"m2c-image-teaser-configurator__option\"\n                    v-for=\"(optionId, option) in scenarioOptions.mobileLayout\"\n                    @click=\"!option.disabled && toggleOption('mobileLayout', optionId)\">\n                    <div class=\"m2c-image-teaser-configurator__option-wrapper\">\n                        <svg class=\"m2c-image-teaser-configurator__option-icon\">\n                            <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#' + option.iconId }\"></use>\n                        </svg>\n                    </div>\n                    <p class=\"m2c-image-teaser-configurator__option-name\">\n                        {{ option.name }}\n                    </p>\n                </div>\n            </div>\n        </section>\n\n        <section class=\"m2c-image-teaser-configurator__section\">\n            <cc-component-adder v-if=\"canAddTeaser()\">\n                <button is=\"action-button\" class=\"action-button action-button--look_important action-button--type_icon-only | m2c-image-teaser-configurator__item-action-button\" @click=\"createTeaserItem( 0 )\">\n                    <svg class=\"action-button__icon action-button__icon--size_300\">\n                        <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#icon_plus' }\"></use>\n                    </svg>\n                </button>\n            </cc-component-adder>\n            <template v-for=\"item in configuration.items\">\n                <div class=\"m2c-image-teaser-configurator__item\" id=\"m2c-image-teaser-item-{{ $index }}\">\n                    <div class=\"m2c-image-teaser-configurator__item-actions\">\n                        <cc-component-actions>\n                            <template slot=\"cc-component-actions__top\">\n                                <button is=\"action-button\" class=\"action-button action-button--look_default action-button--type_icon-only | cc-component-actions__button cc-component-actions__button--up | m2c-image-teaser-configurator__item-action-button\" @click=\"moveImageTeaserUp( $index )\" :class=\"[ isFirstImageTeaser( $index ) ? 'action-button--look_disabled' : '' ]\" :disabled=\"isFirstImageTeaser( $index )\">\n                                    <svg class=\"action-button__icon action-button__icon--size_100\">\n                                        <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#icon_arrow-up' }\"></use>\n                                    </svg>\n                                </button>\n                                <button is=\"action-button\" class=\"action-button action-button--look_default action-button--type_icon-only | cc-component-actions__button cc-component-actions__button--down | m2c-image-teaser-configurator__item-action-button\" @click=\"moveImageTeaserDown( $index )\" :class=\"[ isLastImageTeaser( $index ) ? 'action-button--look_disabled' : '' ]\" :disabled=\"isLastImageTeaser( $index )\">\n                                    <svg class=\"action-button__icon action-button__icon--size_100\">\n                                        <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#icon_arrow-down' }\"></use>\n                                    </svg>\n                                </button>\n                            </template>\n                            <template slot=\"cc-component-actions__bottom\">\n                                <button is=\"action-button\" class=\"action-button action-button--look_default action-button--type_icon-only | cc-component-actions__button cc-component-actions__button--delete | m2c-image-teaser-configurator__item-action-button\" @click=\"deleteTeaserItem( $index )\">\n                                    <svg class=\"action-button__icon\">\n                                        <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#icon_trash-can' }\"></use>\n                                    </svg>\n                                </button>\n                            </template>\n                        </cc-component-actions>\n                    </div>\n                    <div class=\"m2c-image-teaser-configurator__item-content\">\n                        <div v-bind:class=\"[ 'm2c-image-teaser-configurator__item-col-left', configuration.items[$index].image ? 'm2c-image-teaser-configurator__item-col-left--look-image-uploaded' : '' ]\">\n                            <div class=\"m2c-image-teaser-configurator__toolbar\">\n                                <span class=\"m2c-image-teaser-configurator__size-info\">{{ configuration.items[$index].sizeInfo }}</span>\n                                <template v-if=\"configuration.items[$index].image\">\n                                    <a href=\"#\" @click=\"getImageUploader( $index )\">${$t( 'Change image' )}</a>\n                                </template>\n                                <template v-else>\n                                    <a href=\"#\" @click=\"getImageUploader( $index )\">${$t( 'Upload image' )}</a>\n                                </template>\n                            </div>\n                            <div class=\"m2c-image-teaser-configurator__item-image-wrapper\">\n                                <img :src=\"configuration.items[$index].image\" class=\"m2c-image-teaser-configurator__item-image\" v-show=\"configuration.items[$index].image\">\n                                <input type=\"hidden\" v-model=\"configuration.items[$index].image\">\n                                <input type=\"hidden\" class=\"m2c-image-teaser-configurator__image-url\" id=\"image-teaser-img-{{$index}}\">\n                            </div>\n                        </div>\n                        <div class=\"m2c-image-teaser-configurator__item-col-right\">\n                            <div class=\"m2-input | m2c-hero-carousel-configurator__item-form-element\">\n                                <label for=\"cfg-it-item{{ $index }}-variant\" class=\"m2-input__label\">${$t( 'Display variant' )}:</label>\n                                <select name=\"cfg-it-item{{ $index }}-variant\" class=\"m2-input__select\" id=\"cfg-it-item{{ $index }}-variant\" v-model=\"configuration.items[$index].displayVariant\" v-bind=\"{ 'style': 'background-image: url( ' + assetsSrc + 'images/dropdown-arrows-bg.svg ), linear-gradient( #e3e3e3, #e3e3e3 ), linear-gradient( #adadad, #adadad )' }\">\n                                    <option value=\"1\">${$t( 'Text vertically centered on the left' )}</option>\n                                    <option value=\"3\">${$t( 'Text vertically centered in the middle' )}</option>\n                                    <option value=\"2\">${$t( 'Text on the bottom, left corner' )}</option>\n                                    <option value=\"4\">${$t( 'Text on the bottom - centered' )}</option>\n                                </select>\n                            </div>\n                            <div class=\"m2-input | m2c-image-teaser-configurator__item-form-element\">\n                                <label for=\"cfg-hc-item{{ $index }}-headline\" class=\"m2-input__label\">${$t( 'Headline' )}:</label>\n                                <input type=\"text\" v-model=\"configuration.items[$index].headline\" id=\"cfg-hc-item{{ $index }}-headline\" class=\"m2-input__input\">\n                            </div>\n                            <div class=\"m2-input | m2c-image-teaser-configurator__item-form-element\">\n                                <label for=\"cfg-hc-item{{ $index }}-subheadline\" class=\"m2-input__label\">${$t( 'Subheadline' )}:</label>\n                                <input type=\"text\" v-model=\"configuration.items[$index].subheadline\" id=\"cfg-hc-item{{ $index }}-subheadline\" class=\"m2-input__input\">\n                            </div>\n                            <div class=\"m2-input | m2c-image-teaser-configurator__item-form-element\">\n                                <label for=\"cfg-hc-item{{ $index }}-paragraph\" class=\"m2-input__label\">${$t( 'Paragraph' )}:</label>\n                                <textarea type=\"text\" v-model=\"configuration.items[$index].paragraph\" id=\"cfg-hc-item{{ $index }}-paragraph\" class=\"m2-input__textarea\" placeholder=\"(max 200 characters)\" maxlength=\"200\"></textarea>\n                            </div>\n                            <div class=\"m2-input | m2c-image-teaser-configurator__item-form-element\">\n                                <label for=\"cfg-hc-item{{ $index }}-cta-label\" class=\"m2-input__label\">${$t( 'CTA label' )}:</label>\n                                <input type=\"text\" v-model=\"configuration.items[$index].ctaLabel\" id=\"cfg-hc-item{{ $index }}-cta-label\" class=\"m2-input__input\">\n                            </div>\n                            <div class=\"m2-input m2-input--type-addon | m2c-image-teaser-configurator__item-form-element\">\n                                <label for=\"image-teaser-ctatarget-output-{{ $index }}\" class=\"m2-input__label\">${$t( 'CTA target link' )}:</label>\n                                <input type=\"text\" class=\"m2-input__input m2-input--type-readonly | m2c-image-teaser-configurator__cta-target-link\" readonly v-model=\"configuration.items[$index].href\" id=\"image-teaser-ctatarget-output-{{ $index }}\">\n                                <span class=\"m2-input__addon | m2c-image-teaser-configurator__widget-chooser-trigger\" @click=\"openCtaTargetModal( $index )\">\n                                    <svg class=\"m2-input__addon-icon\">\n                                        <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#icon_link' }\"></use>\n                                    </svg>\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <cc-component-adder v-if=\"configuration.items.length && canAddTeaser()\">\n                    <button is=\"action-button\" class=\"action-button action-button--look_important action-button--type_icon-only | m2c-image-teaser-configurator__item-action-button\" @click=\"createTeaserItem( $index + 1 )\">\n                        <svg class=\"action-button__icon action-button__icon--size_300\">\n                            <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#icon_plus' }\"></use>\n                        </svg>\n                    </button>\n                </cc-component-adder>\n            </template>\n        </section>\n    </div>`,\n    props: {\n        /**\n         * Image teaser configuration\n         */\n        configuration: {\n            type: Object,\n            default(): Object {\n                return {\n                    items: [ JSON.parse( JSON.stringify( teaserItemPrototype ) ) ],\n                    ignoredItems: [],\n                    currentScenario: {\n                        teaserWidth: {},\n                        desktopLayout: {},\n                        textPositioning: {},\n                        mobileLayout: {},\n                    },\n                };\n            },\n        },\n        /* get assets for displaying component images */\n        assetsSrc: {\n            type: String,\n            default: '',\n        },\n        /* Obtain base-url for the image uploader */\n        uploaderBaseUrl: {\n            type: String,\n            default: '',\n        },\n        /* Obtain image endpoint to place permanent url for uploaded images */\n        imageEndpoint: {\n            type: String,\n            default: '',\n        },\n    },\n    events: {\n        /**\n         * Listen on save event from Content Configurator component.\n         */\n        'cc-component-configurator__save'(): void {\n            this.cleanupConfiguration();\n            this.onSave();\n        },\n    },\n    methods: {\n        /* Opens M2's built-in image manager modal.\n         * Manages all images: image upload from hdd, select image that was already uploaded to server.\n         * @param index {number} - index of image of image teaser.\n         */\n        getImageUploader( index: number ): void {\n            MediabrowserUtility.openDialog( `${this.uploaderBaseUrl}target_element_id/image-teaser-img-${index}/`,\n                'auto',\n                'auto',\n                $t( 'Insert File...' ),\n                {\n                    closed: true,\n                },\n            );\n        },\n\n        /* Listener for image uploader\n         * Since Magento does not provide any callback after image has been chosen\n         * we have to watch for target where decoded url is placed\n         */\n        imageUploadListener(): void {\n            const component: any = this;\n            let isAlreadyCalled: boolean = false;\n\n            // jQuery has to be used, for some reason native addEventListener doesn't catch change of input's value\n            $( document ).on( 'change', '.m2c-image-teaser-configurator__image-url', ( event: Event ): void => {\n                if ( !isAlreadyCalled ) {\n                    isAlreadyCalled = true;\n                    component.onImageUploaded( event.target );\n                    setTimeout( (): void => {\n                        isAlreadyCalled = false;\n                    }, 100 );\n                }\n            } );\n        },\n\n        /* Action after image was uploaded\n         * URL is encoded, so strip it and decode Base64 to get {{ media url=\"...\"}} format\n         * which will go to the items.image and will be used to display image on front end\n         * @param input { object } - input with raw image path which is used in admin panel\n         */\n        onImageUploaded( input: any ): void {\n            const _this: any = this;\n            const itemIndex: any = input.id.substr( input.id.length - 1 );\n            const encodedImage: any = input.value.match( '___directive\\/([a-zA-Z0-9]*)' )[ 1 ];\n            const imgEndpoint: string = this.imageEndpoint.replace( '{/encoded_image}', encodedImage );\n\n            this.configuration.items[ itemIndex ].decodedImage = Base64 ? Base64.decode( encodedImage ) : window.atob( encodedImage );\n\n            const img: any = new Image();\n            img.onload = function(): void {\n                const ar: string = _this.getAspectRatio( img.naturalWidth, img.naturalHeight );\n                _this.configuration.items[ itemIndex ].image = img.getAttribute( 'src' );\n                _this.configuration.items[ itemIndex ].sizeInfo = `${img.naturalWidth}x${img.naturalHeight}px (${ar})`;\n                _this.configuration.items[ itemIndex ].aspectRatio = ar;\n                _this.checkImageSizes();\n                _this.onChange();\n            };\n            img.src = imgEndpoint;\n        },\n\n        /* Creates another teaser item using teaserItemPrototype */\n        createTeaserItem( index: number ): void {\n            this.configuration.items.splice( index, 0, JSON.parse( JSON.stringify( teaserItemPrototype ) ) );\n            this.onChange();\n        },\n\n        /**\n         * Moves image teaser item under given index up by swaping it with previous element.\n         * @param {number} index Image teaser's index in array.\n         */\n        moveImageTeaserUp( index: number ): void {\n            if ( index > 0 ) {\n                this.configuration.items.splice( index - 1, 0, this.configuration.items.splice( index, 1 )[ 0 ] );\n                this.onChange();\n            }\n        },\n        /**\n         * Moves image teaser item under given index down by swaping it with next element.\n         * @param {number} index Image teaser's index in array.\n         */\n        moveImageTeaserDown( index: number ): void {\n            if ( index < this.configuration.items.length - 1 ) {\n                this.configuration.items.splice( index + 1, 0, this.configuration.items.splice( index, 1 )[ 0 ] );\n                this.onChange();\n            }\n        },\n        /**\n         * Tells if item with given index is the first image teaser.\n         * @param  {number}  index Index of the image teaser.\n         * @return {boolean}       If image teaser is first in array.\n         */\n        isFirstImageTeaser( index: number ): boolean {\n            return index === 0;\n        },\n        /**\n         * Tells if image teaser with given index is the last image teaser.\n         * @param  {number}  index Index of the image teaser.\n         * @return {boolean}       If image teaser is last in array.\n         */\n        isLastImageTeaser( index: number ): boolean {\n            return index === this.configuration.items.length - 1;\n        },\n\n        /* Opens modal with M2 built-in widget chooser\n         * @param index {number} - index of teaser item to know where to place output of widget chooser\n         */\n        openCtaTargetModal( index: number ): void {\n            const component: any = this;\n\n            widgetTools.openDialog( `${window.location.origin}/admin/admin/widget/index/widget_target_id/image-teaser-ctatarget-output-${index}` );\n\n            /* clean current value since widget chooser doesn't do that to allow multiple widgets\n             * we don't want that since this should be url for CTA */\n            component.configuration.items[ index ].ctaTarget = '';\n\n            this.wWidgetListener();\n        },\n        /* Sets listener for widget chooser\n         * It triggers component.onChange to update component's configuration\n         * after value of item.ctaTarget is changed\n         */\n        widgetSetListener(): void {\n            const component: any = this;\n\n            $( '.m2c-image-teaser-configurator__cta-target-link' ).on( 'change', (): void => {\n                component.onChange();\n            } );\n        },\n        /* \n         * Check if widget chooser is loaded. If not, wait for it\n         */\n        wWidgetListener(): void {\n            if ( typeof wWidget !== 'undefined' && widgetTools.dialogWindow[ 0 ].innerHTML !== '' ) {\n                this.disableNotLinksOptions();\n            } else {\n                setTimeout( this.wWidgetListener, 300 );\n            }\n        },\n        /* \n         * Hide all options in widget chooser that are not links\n         */\n        disableNotLinksOptions(): void {\n            if ( wWidget.widgetEl && wWidget.widgetEl.options ) {\n                $( wWidget.widgetEl.options ).each( function( i: boolean, el: any ): void {\n                    if ( el.value.split( '\\\\' ).pop() !== 'Link' && i !== 0 ) {\n                        $( el ).hide();\n                    }\n                } );\n            }\n        },\n\n        /* Checks if it's possible to display Delete button\n         * This function is used in component's template\n         * Button can be displayed only on items that have item uploaded\n         * @param index {number} - index of teaser item\n         * @returns Boolean\n         */\n        isPossibleToDelete( index: number ): Boolean {\n            if ( ( index !== 0 || this.configuration.items.length > 1 ) && this.configuration.items[ index ].image !== '' ) {\n                return true;\n            }\n\n            return false;\n        },\n\n        /* Removes teaser item after Delete button is clicked\n         * and triggers component's onChange to update it's configuration\n         * @param index {number} - index of teaser item to remove\n         */\n        deleteTeaserItem( index: number ): void {\n            const component: any = this;\n\n            confirm( {\n                content: $t( 'Are you sure you want to delete this item?' ),\n                actions: {\n                    confirm(): void {\n                        component.configuration.items.splice( index, 1 );\n                        component.onChange();\n                    },\n                },\n            } );\n        },\n\n        /* Checks if images are all the same size\n         * If not - displays error by firing up this.displayImageSizeMismatchError()\n         * @param images {array} - array of all uploaded images\n         */\n        checkImageSizes(): boolean {\n            const itemsToCheck = JSON.parse(JSON.stringify(this.configuration.items)).filter((item: any): boolean => {\n                return Boolean(item.aspectRatio); // Filter out items without aspect ratio set yet.\n            });\n            for ( let i: number = 0; i < itemsToCheck.length; i++ ) {\n                if ( itemsToCheck[ i ].aspectRatio !== itemsToCheck[ 0 ].aspectRatio ) {\n                    alert( {\n                        title: $t( 'Warning' ),\n                        content: $t( 'Images you have uploaded have different aspect ratio. This may cause this component to display wrong. We recommend all images uploaded to have the same aspect ratio.' ),\n                    } );\n                    return false;\n                }\n            }\n            return true;\n        },\n        /* Returns greatest common divisor for 2 numbers\n         * @param a {number}\n         * @param b {number}\n         * @return {number} - greatest common divisor\n         */\n        getGreatestCommonDivisor( a: number, b: number ): number {\n            if ( !b ) {\n                return a;\n            }\n\n            return this.getGreatestCommonDivisor( b, a % b );\n        },\n        /* Returns Aspect ratio for 2 numbers based on GDC algoritm (greatest common divisor)\n         * @param a {number}\n         * @param b {number}\n         * @return {number} - greatest common divisor\n         */\n        getAspectRatio( a: number, b: number ): string {\n            let c: number = this.getGreatestCommonDivisor( a, b );\n\n            return `${( a / c )}:${( b / c )}`;\n        },\n        /* Cleans configuration for M2C content constructor after Saving component\n         * All empty teaser items has to be removed to not get into configuration object\n         */\n        cleanupConfiguration(): void {\n            this.configuration.items = this.configuration.items.filter( ( item: any ): any => item.image !== '' );\n            this.configuration.ignoredItems = this.configuration.ignoredItems.filter( ( item: any ): any => item.image !== '' );\n            this.onChange();\n        },\n    },\n    ready(): void {\n        this.imageUploadListener();\n        this.widgetSetListener();\n    },\n};\n\nexport default m2cImageTeaserConfigurator;\n","/* tslint:disable:no-console */\n\nimport ccComponentConfigurator from '../../cc-component-configurator/src/cc-component-configurator';\n\n/**\n * Paragraph configurator component.\n * This component is responsible for displaying paragraph configuration form\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccParagraphConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccComponentConfigurator,\n    ],\n    template: `<form class=\"cc-paragraph-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\n        <div class=\"cs-input cs-input--type-inline\">\n            <label for=\"textarea-cfg-paragraph\" class=\"cs-input__label cs-input__label--look-top-align\">Paragraph:</label>\n            <textarea name=\"name\" v-model=\"configuration.paragraph\" id=\"textarea-cfg-paragraph\" class=\"cs-input__textarea\" placeholder=\"Your HTML here\" @change=\"onChange\"></textarea>\n        </div>\n        <button type=\"submit\">Save</button>\n    </form>`,\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: '',\n        },\n        configuration: {\n            type: Object,\n            default: {\n                paragraph: '',\n            },\n        },\n    },\n};\n\nexport default ccParagraphConfigurator;\n","import ccParagraphConfigurator from '../../../components/cc-paragraph-configurator/src/cc-paragraph-configurator';\n\nimport $ from 'jquery';\nimport $t from 'mage/translate';\nimport Vue from 'Vue';\n\n/**\n * M2C skin for Paragraph configurator component.\n * This component is responsible for displaying paragraph configuration form\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst m2cParagraphConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccParagraphConfigurator,\n    ],\n    template: `<form class=\"m2c-paragraph-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\n        \n        <div class=\"m2c-paragraph-configurator__error\" v-text=\"tempConfiguration.errorMessage\" v-show=\"tempConfiguration.errorMessage\">\n        </div>\n\n        <div class=\"m2-input\">\n            <label for=\"input-cfg-id\" class=\"m2-input__label\">${$t( 'Identifier' )}:</label>\n            <input type=\"text\" name=\"cfg-id\" v-model=\"tempConfiguration.identifier\" id=\"input-cfg-id\" class=\"m2-input__input m2-input__input--limited-width\" @blur=\"stripSpaces( tempConfiguration.identifier )\" maxlength=\"30\">\n        </div>\n        <div class=\"m2-input\">\n            <label for=\"input-cfg-title\" class=\"m2-input__label\">${$t( 'Title' )}:</label>\n            <input type=\"text\" name=\"cfg-title\" v-model=\"tempConfiguration.title\" id=\"input-cfg-title\" class=\"m2-input__input m2-input__input--limited-width\" maxlength=\"100\">\n        </div>\n        <div class=\"m2-input\">\n            <label for=\"textarea-cfg-paragraph\" class=\"m2-input__label m2-input__label--look-top-align\">${$t( 'HTML' )}:</label>\n\n            <div class=\"buttons-set | m2c-paragraph-configurator__wysiwyg-buttons\">\n                <button type=\"button\" class=\"scalable action-show-hide\" id=\"toggle-wysiwyg\">${$t( 'Show / Hide Editor' )}</button>\n                <button type=\"button\" class=\"scalable action-add-widget plugin\" @click=\"openWidgetModal()\" v-show=\"!isEditorVisible\">${$t( 'Insert Widget' )}...</button>\n                <button type=\"button\" class=\"scalable action-add-image plugin\" @click=\"openMediaModal()\" v-show=\"!isEditorVisible\">${$t( 'Insert Image' )}...</button>\n                <button type=\"button\" class=\"scalable add-variable plugin\" @click=\"openMagentoVariablesModal()\" v-show=\"!isEditorVisible\">${$t( 'Insert Variable' )}...</button>\n            </div>\n\n            <textarea name=\"cfg-paragraph\" v-model=\"tempConfiguration.content\" id=\"textarea-cfg-paragraph\" class=\"m2-input__textarea | m2c-paragraph-configurator__textarea\"></textarea>\n        </div>\n    </form>`,\n    props: {\n        /*\n         * Single's component configuration\n         */\n        configuration: {\n            type: Object,\n            default(): any {\n                return {\n                    blockId: '',\n                };\n            },\n        },\n        restToken: {\n            type: String,\n            default: '',\n        },\n        wysiwygConfig: {\n            type: String,\n            default: '',\n        },\n        /* Obtain base-url for the image uploader */\n        uploaderBaseUrl: {\n            type: String,\n            default: '',\n        },\n    },\n    data(): void {\n        return {\n            /*\n             * This object if used to operate inside component. We want to bind data to inputs,\n             * but we don't need them to be saved in m2c component's config. Only ID is needed,\n             * since rest of data id fetched from database.\n             */\n            tempConfiguration: {\n                identifier: '',\n                title: '',\n                content: '',\n                errorMessage: '',\n            },\n\n            isEditorVisible: true,\n\n            // wysiwyg editor object\n            editor: undefined,\n        };\n    },\n    ready(): void {\n        // Check if wysiwygConfig was passed - means that editor is enabled in admin panel\n        if ( this.wysiwygConfig !== '' ) {\n            this.wysiwygCfg = JSON.parse( this.wysiwygConfig );\n            this.wysiwygCfg.height = '300px';\n        }\n\n        // Init loader and hide it\n        $( 'body' ).one().loadingPopup( {\n            timeout: false,\n        } ).trigger( 'hideLoadingPopup' );\n\n        // If ID is already provided (means we're in edit mode)\n        if ( this.configuration.blockId ) {\n            const component: any = this;\n\n            // Show loader before request\n            $( 'body' ).trigger( 'showLoadingPopup' );\n\n            // Send request to REST API to get CMS block data if in edit mode\n            this.$http( {\n                headers: {\n                    Accept: 'application/json',\n                    Authorization: component.restToken,\n                },\n                method: 'get',\n                url: `${ window.location.origin }/rest/V1/cmsBlock/${this.configuration.blockId}`,\n            } ).then( ( response: any ): void => {\n\n                // Hide loader\n                $( 'body' ).trigger( 'hideLoadingPopup' );\n\n                // Update components tempConfiguration\n                component.tempConfiguration.identifier = response.data.identifier;\n                component.tempConfiguration.title = response.data.title;\n                component.tempConfiguration.content = response.data.content;\n\n                // initialize customized WYSIWYG\n                if ( component.wysiwygCfg ) {\n                    component.initWysiwyg();\n                }\n\n            }, ( response: any ): void => {\n                $( 'body' ).trigger( 'hideLoadingPopup' );\n            } );\n        } else {\n            // initialize customized WYSIWYG\n            if ( this.wysiwygCfg ) {\n                this.initWysiwyg();\n            }\n        }\n    },\n    events: {\n        /**\n         * Listen on save event from Content Configurator component.\n         */\n        'cc-component-configurator__save'(): void {\n            const component: any = this;\n\n            // Construct data for REST API\n            const dataConstruct: any = {\n                block: {\n                    identifier: this.tempConfiguration.identifier,\n                    title: this.tempConfiguration.title,\n                    content: this.tempConfiguration.content,\n                    active: true,\n                },\n            };\n\n            // Show loader before request\n            $( 'body' ).trigger( 'showLoadingPopup' );\n\n            // Send request to REST API\n            this.$http( {\n                headers: {\n                    Accept: 'application/json',\n                    Authorization: component.restToken,\n                },\n                method: this.configuration.blockId ? 'put' : 'post',\n                url: this.configuration.blockId ? `${ window.location.origin }/rest/V1/cmsBlock/${this.configuration.blockId}` : `${ window.location.origin }/rest/V1/cmsBlock`,\n                body: dataConstruct,\n            } ).then( ( response: any ): void => {\n\n                // If status is OK update component's configuration and run Save to save component data\n                if ( response.ok ) {\n                    component.configuration.blockId = response.data.id;\n\n                    // Hide loader\n                    $( 'body' ).trigger( 'hideLoadingPopup' );\n                    component.onSave();\n                }\n            }, ( response: any ): void => {\n                // if failed and response returned any message, put it into error div, else put default text\n                if ( response.message ) {\n                    component.tempConfiguration.errorMessage = response.data.message;\n                } else {\n                    component.tempConfiguration.errorMessage = $t( 'An error occured. Please try again later.' );\n                }\n\n                // Set headers back\n                Vue.http.headers.custom.Accept = 'text/html';\n\n                // Hide loader\n                $( 'body' ).trigger( 'hideLoadingPopup' );\n            } );\n        },\n    },\n    methods: {\n        stripSpaces( str: string ): void {\n            const striped: string = str.split( ' ' ).join( '-' ).toLowerCase();\n            this.tempConfiguration.identifier = striped;\n        },\n        /* Opens modal with M2 built-in widget chooser\n         */\n        openWidgetModal(): void {\n            widgetTools.openDialog( `${this.wysiwygCfg.widget_window_url}widget_target_id/textarea-cfg-paragraph` );\n        },\n        /* Opens modal with M2 built-in media uploader\n         */\n        openMediaModal(): void {\n            MediabrowserUtility.openDialog( `${this.uploaderBaseUrl}target_element_id/textarea-cfg-paragraph`,\n                'auto',\n                'auto',\n                $t( 'Insert File...' ),\n                {\n                    closed: true,\n                },\n            );\n        },\n        /* Opens modal with M2 built-in variables\n         */\n        openMagentoVariablesModal(): void {\n            MagentovariablePlugin.loadChooser( `${window.location.origin}/admin/admin/system_variable/wysiwygPlugin/`, 'textarea-cfg-paragraph' );\n        },\n        initWysiwyg(): void {\n            const _this: any = this;\n\n            window.tinyMCE_GZ = window.tinyMCE_GZ || {};\n            window.tinyMCE_GZ.loaded = true;\n\n            require( [\n                'mage/translate',\n                'mage/adminhtml/events',\n                'm2cTinyMceWysiwygSetup',\n                'mage/adminhtml/wysiwyg/widget',\n            ], function(): void {\n                // Setup (this global variable is already set in constructor.phtml)\n                csWysiwygEditor = new m2cTinyMceWysiwygSetup( 'textarea-cfg-paragraph', _this.wysiwygCfg );\n\n                // Initialization\n                csWysiwygEditor.setup( 'exact' );\n                _this.isEditorVisible = true;\n\n                // Set listener for enable/disable editor button\n                Event.observe( 'toggle-wysiwyg', 'click', function(): void {\n                    csWysiwygEditor.toggle();\n                    _this.isEditorVisible = !_this.isEditorVisible;\n                }.bind( csWysiwygEditor ) );\n\n                // Set handlers for editor\n                const editorFormValidationHandler = csWysiwygEditor.onFormValidation.bind( csWysiwygEditor );\n                varienGlobalEvents.attachEventHandler( 'formSubmit', editorFormValidationHandler );\n                varienGlobalEvents.clearEventHandlers( 'open_browser_callback' );\n\n                // Add callback for editor's IMAGE button to open file uploader while clicked\n                varienGlobalEvents.attachEventHandler( 'open_browser_callback', csWysiwygEditor.openFileBrowser );\n            } );\n        },\n    },\n};\n\nexport default m2cParagraphConfigurator;\n","import ccComponentConfigurator from '../../cc-component-configurator/src/cc-component-configurator';\n\n/**\n * Product carousel configurator component.\n * This component is responsible for displaying product carousel's configuration form\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccProductCarouselConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccComponentConfigurator,\n    ],\n    template: `<form class=\"cc-product-carousel-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\n        <div class=\"cs-input cs-input--type-inline\">\n            <label for=\"cfg-pc-category\" class=\"cs-input__label\">Select Category:</label>\n            <select name=\"cfg-pc-category-select\" class=\"cs-input__select\" id=\"cfg-pc-category\" v-model=\"configuration.category_id\" @change=\"onChange\">\n                <option value=\"\">-- Please select category --</option>\n            </select>\n        </div>\n        <div class=\"cs-input cs-input--type-inline\">\n            <label for=\"cfg-pc-order-by\" class=\"cs-input__label\">Order by:</label>\n            <select name=\"cfg-pc-order-by\" class=\"cs-input__select\" id=\"cfg-pc-order-by\" v-model=\"configuration.order_by\" @change=\"onChange\">\n                <option value=\"creation_date-DESC\">Creation date: newest</option>\n                <option value=\"creation_date-ASC\">Creation date: oldest</option>\n                <option value=\"price-DESC\">Price: cheapest</option>\n                <option value=\"price-ASC\">Price: most expensive</option>\n            </select>\n            <select name=\"cfg-pc-order-type\" class=\"cs-input__select\" v-model=\"configuration.order_type\" @change=\"onChange\">\n                <option value=\"ASC\">ASC</option>\n                <option value=\"DESC\">DESC</option>\n            </select>\n        </div>\n        <div class=\"cs-input cs-input--type-inline\">\n            <label for=\"cfg-pc-order-by\" class=\"cs-input__label\">Show:</label>\n            <select name=\"cfg-pc-limit\" class=\"cs-input__select\" id=\"cfg-pc-limit\" v-model=\"configuration.limit\" @change=\"onChange\">\n                <option value=\"20\">20 products</option>\n                <option value=\"40\">40 products</option>\n                <option value=\"60\">60 products</option>\n                <option value=\"80\">80 products</option>\n                <option value=\"100\">100 products</option>\n            </select>\n        </div>\n\n        <button type=\"submit\">Save</button>\n    </form>`,\n    props: {\n        configuration: {\n            type: Object,\n            default(): Object {\n                return {\n                    category_id: '',\n                    order_by: 'creation_date',\n                    order_type: 'DESC',\n                    limit: 20,\n                };\n            },\n        },\n    },\n};\n\nexport default ccProductCarouselConfigurator;\n","import ccProductCarouselConfigurator from '../../../components/cc-product-carousel-configurator/src/cc-product-carousel-configurator';\n\n/**\n * M2C Product carousel component for admin panel.\n * This component is responsible for managing product carousel's configuration\n */\nconst m2cProductCarouselConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccProductCarouselConfigurator,\n    ],\n    template: '#m2c-product-carousel-form',\n};\n\nexport default m2cProductCarouselConfigurator;\n","import ccComponentConfigurator from '../../cc-component-configurator/src/cc-component-configurator';\n\n/**\r\n * Static block configurator component.\r\n * This component is responsible for displaying static block's configuration form\r\n * @type {vuejs.ComponentOption} Vue component object.\r\n */\r\nconst ccStaticBlockConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccComponentConfigurator,\n    ],\n    template: `<form class=\"cc-static-block-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\r\n        <div class=\"cs-input cs-input--type-inline\">\r\n            <label for=\"cfg-static-block\" class=\"cs-input__label\">Static block:</label>\r\n            <select name=\"select\" class=\"cs-input__select\" id=\"cfg-static-block\" v-model=\"configuration.identifier\" @change=\"onChange\">\r\n                <option value=\"1\" selected>Foo</option>\r\n                <option value=\"2\">Bar</option>\r\n            </select>\r\n        </div>\r\n        <button type=\"submit\">Save</button>\r\n    </form>`,\r\n    props: {\n        configuration: {\r\n            type: Object,\r\n            default: {\r\n                identifier: '',\r\n            },\r\n        },\r\n    },\n};\r\n\r\nexport default ccStaticBlockConfigurator;\r\n","import ccStaticBlockConfigurator from '../../../components/cc-static-block-configurator/src/cc-static-block-configurator';\r\n\r\nconst m2cStaticBlockConfigurator: vuejs.ComponentOption = {\r\n    mixins: [\n        ccStaticBlockConfigurator,\n    ],\n    template: '#m2c-static-blocks-form',\n};\n\r\nexport default m2cStaticBlockConfigurator;\r\n","/**\n * Single component information object.\n */\ninterface IComponentInformation {\n    type: string;\n    /**\n     * Name of the component (will be displayed in front).\n     * @type {string}\n     */\n    name: string;\n    description: string;\n}\n\n/**\n * Components information object that should be returned by AJAX call to API.\n */\ninterface IComponentsInformation {\n    components: IComponentInformation[];\n}\n\n/**\n * Componen picker.\n * Lists all types of components available in m2c in the grid/list mode\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccComponentPicker: vuejs.ComponentOption = {\n    template: `<section class=\"cc-component-picker | {{ class }}\">\n        <ul class=\"cc-component-picker__list\" v-if=\"availableComponents.length\">\n            <li class=\"cc-component-picker__list-item cc-component-picker__list-item--{{component.type}}\" v-for=\"component in availableComponents\">\n                <a class=\"cc-component-picker__component-link\" href=\"#\" @click.prevent=\"onPickComponent( component.type )\">\n                    <span class=\"cc-component-picker__component-figure\">\n                        <svg class=\"cc-component-picker__component-icon\">\n                            <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#icon_component-' + component.type }\"></use>\n                        </svg>\n                    </span>\n                    <span class=\"cc-component-picker__component-name\">{{ component.name }}</span>\n                </a>\n                <p class=\"cc-component-picker__component-description\">{{ component.description }}</p>\n            </li>\n        </ul>\n        <p class=\"cc-component-picker__no-components\" v-if=\"!availableComponents.length\">\n            No components available.\n        </p>\n    </section>`,\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: String,\n            default: '',\n            coerce: ( value: String ): String => value.replace( 'cc-component-picker', '' ),\n        },\n        /**\n         * Property containing callback triggered when user picks component.\n         */\n        pickComponent: {\n            type: Function,\n        },\n        /**\n         * JSON stringified array containing available components.\n         */\n        components: {\n            type: String,\n            default: '',\n        },\n        /**\n         * URL for API returning JSON stringified array containing available components.\n         */\n        componentsEndpoint: {\n            type: String,\n            default: '',\n        },\n        /**\n         * Assets src for icon\n         */\n        assetsSrc: {\n            type: String,\n            default: '',\n        },\n    },\n    data(): any {\n        return {\n            availableComponents: [],\n        };\n    },\n    ready(): void {\n        // If inline JSON is provided then parse it.\n        if ( this.components ) {\n            this.availableComponents = JSON.parse( this.components );\n        } else if ( this.componentsEndpoint ) {\n            // Otherwise load from endpoint if URL provided.\n            this.$http.get( this.componentsEndpoint ).then( function( response: vuejs.HttpResponse ): void {\n                this.availableComponents = response.json();\n            } );\n        }\n    },\n    methods: {\n        /**\n         * Component pick click handler.\n         * This handler triggers \"cc-component-picker__pick\" event up the DOM chain when called.\n         * @param {Event} event Click event object.\n         */\n        onPickComponent( componentType: String ): void {\n            this.$dispatch( 'cc-component-picker__pick', componentType );\n\n            if ( typeof this.pickComponent === 'function' ) {\n                this.pickComponent( componentType );\n            }\n        },\n    },\n};\n\nexport default ccComponentPicker;\n","/**\n * Single component information interface.\n */\ninterface IComponentInformation {\n    title: string;\n    subtitle: string;\n}\n\n/**\n * Headline preview component.\n * This component is responsible for displaying preview of headline component in Layout Builder (admin panel)\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccComponentHeadlinePreview: vuejs.ComponentOption = {\n    template: `<div class=\"cc-component-headline-preview\">\n        <h1 class=\"cc-component-headline-preview__headline\">{{ configuration.title }}</h1>\n        <h2 class=\"cc-component-headline-preview__subheadline\">{{ configuration.subtitle }}</h2>\n    </div>`,\n    props: {\n        /**\n         * Single's component configuration \n         */\n        configuration: {\n            type: Object,\n        },\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: '',\n        },\n    },\n};\n\nexport default ccComponentHeadlinePreview;\n","/**\n * Single component information interface.\n */\ninterface IComponentInformation {\n    teaserWidth: string;\n    items: [\n        {\n            image: string,\n            headline: string,\n            paragraph: string,\n            ctaLabel: string,\n            ctaTarget: string,\n        },\n    ];\n};\n\n/**\n * Image teaser preview component.\n * This component is responsible for displaying preview of image teaser component in Layout Builder (admin panel)\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccComponentImageTeaserPreview: vuejs.ComponentOption = {\n    template: `<div class=\"cc-component-image-teaser-preview\">\n        <div class=\"cc-component-image-teaser-preview__items\">\n            <template v-for=\"item in configuration.items\">\n                <div class=\"cc-component-image-teaser-preview__item-wrapper-outer\" id=\"cc-image-teaser-item-{{ $index }}\" v-show=\"configuration.items[$index].image\">\n                    <div class=\"cc-component-image-teaser-preview__item-wrapper-inner\">\n                        <div class=\"cc-component-image-teaser-preview__item\">\n                            <img :src=\"configuration.items[$index].image\" class=\"cc-component-image-teaser-preview__item-image\">\n                            <h3 class=\"cc-component-image-teaser-preview__item-index\">Banner {{ $index+1 }}/{{ configuration.items.length }}</h3>\n                        </div>\n                    </div>\n                </div>\n            </template>\n        </div>\n    </div>`,\n    props: {\n        configuration: {\n            type: Object,\n        },\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: '',\n        },\n    },\n};\n\nexport default ccComponentImageTeaserPreview;\n","/**\n * Single component information interface.\n */\ninterface IComponentInformation {\n    items: [\n        {\n            image: string,\n            headline: string,\n            subheadline: string,\n            paragraph: string,\n            ctaLabel: string,\n            ctaTarget: string,\n            displayVariant: string\n        },\n        ];\n};\n\n/**\n * Image teaser preview component.\n * This component is responsible for displaying preview of image teaser component in Layout Builder (admin panel)\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccComponentHeroCarouselPreview: vuejs.ComponentOption = {\n    template: `<div class=\"cc-component-hero-carousel-preview\">\n        <div class=\"cc-component-hero-carousel-preview__wrapper\">\n            <div class=\"cc-component-hero-carousel-preview__background\">\n                <img :src=\"configuration.items[0].image\" class=\"cc-component-hero-carousel-preview__background-image\">\n            </div>\n            <div class=\"cc-component-hero-carousel-preview__slides\">\n                <template v-for=\"item in configuration.items\">\n                     <img :src=\"configuration.items[$index].image\" class=\"cc-component-hero-carousel-preview__slide\">\n                </template>\n            </div>\n        </div>\n    </div>`,\n    props: {\n        configuration: {\n            type: Object,\n        },\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: '',\n        },\n    },\n};\n\nexport default ccComponentHeroCarouselPreview;\n","/**\n * Single component information interface.\n */\ninterface IComponentInformation {\n    identifier: string;\n}\n\n/**\n * CMS block preview component.\n * This component is responsible for displaying preview of CMS block component in Layout Builder (admin panel)\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccComponentStaticCmsBlockPreview: vuejs.ComponentOption = {\n    template: `<div class=\"cc-component-static-cms-block-preview\">\n        <h2 class=\"cc-component-static-cms-block-preview__block-id\">CMS Block ID: {{ configuration.identifier }}</h2>\n    </div>`,\n    props: {\n        /**\n         * Single's component configuration \n         */\n        configuration: {\n            type: Object,\n        },\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: '',\n        },\n    },\n};\n\nexport default ccComponentStaticCmsBlockPreview;\n","import actionButton from '../../action-button/src/action-button';\n\nimport ccComponentHeadlinePreview from '../../cc-component-headline-preview/src/cc-component-headline-preview';\nimport ccComponentImageTeaserPreview from '../../cc-component-image-teaser-preview/src/cc-component-image-teaser-preview';\nimport ccComponentHeroCarouselPreview from '../../cc-component-hero-carousel-preview/src/cc-component-hero-carousel-preview';\nimport ccComponentStaticCmsBlockPreview from '../../cc-component-static-cms-block-preview/src/cc-component-static-cms-block-preview';\n\nimport componentActions from '../../cc-component-actions/src/cc-component-actions';\nimport componentAdder from '../../cc-component-adder/src/cc-component-adder';\nimport componentPlaceholder from '../../cc-component-placeholder/src/cc-component-placeholder';\n\nimport template from './cc-layout-builder.tpl';\n\n/**\n * Single component information interface.\n */\ninterface IComponentInformation {\n    name: string;\n    id: string;\n    type: string;\n    data?: any;\n}\n\n/**\n * Layout builder component.\n * This component is responsible for displaying and handling user interactions of\n * entire Content Constructor\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst layoutBuilder: vuejs.ComponentOption = {\n    template: template,\n    /**\n     * Get dependencies\n     */\n    components: {\n        'action-button': actionButton,\n        'cc-component-adder': componentAdder,\n        'cc-component-actions': componentActions,\n        'cc-component-placeholder': componentPlaceholder,\n        'cc-component-headline-preview': ccComponentHeadlinePreview,\n        'cc-component-image-teaser-preview': ccComponentImageTeaserPreview,\n        'cc-component-hero-carousel-preview': ccComponentHeroCarouselPreview,\n        'cc-component-static-cms-block-preview': ccComponentStaticCmsBlockPreview,\n    },\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: '',\n        },\n        assetsSrc: {\n            type: String,\n            default: '',\n        },\n        /**\n         * Initial component configuration encoded as JSON string.\n         */\n        componentsConfiguration: {\n            type: String,\n            default: '',\n        },\n        /**\n         * Callback invoked when edit component button is clicked.\n         * This function should take IComponentInformation and return changed version of it.\n         * If callback returns falsy value then component isn't changed.\n         */\n        editComponent: {\n            type: Function,\n            default: ( componentInfo: IComponentInformation ): IComponentInformation => componentInfo,\n        },\n        /**\n         * Callback invoked when edit component button is clicked.\n         * This function should return IComponentInformation.\n         * If callback returns falsy value then component isn't added.\n         */\n        addComponent: {\n            type: Function,\n            default: (): IComponentInformation => undefined,\n        },\n    },\n    data(): any {\n        return {\n            components: [],\n        };\n    },\n    ready(): void {\n        // Set initial components configuration if provided.\n        this.components = this.componentsConfiguration ? JSON.parse( this.componentsConfiguration ) : [];\n        this.$dispatch( 'cc-layout-builder__update' );\n    },\n    methods: {\n        /**\n         * Returns components information currently stored within layout builder.\n         * @return {IComponentInformation[]} Components information array.\n         */\n        getComponentInformation(): IComponentInformation[] {\n            return JSON.parse(\n                JSON.stringify( this.components ),\n            );\n        },\n        /**\n         * Sets provided component information on current index in components array.\n         * If component exists on given index then this compoennt will be inserted before it.\n         * @param {number}                index         Component index in components array.\n         * @param {IComponentInformation} componentInfo Component information.\n         */\n        addComponentInformation( index: number, componentInfo: IComponentInformation ): void {\n            if ( componentInfo ) {\n                this.components.splice( index, 0, componentInfo );\n                this.$dispatch( 'cc-layout-builder__update' );\n            }\n        },\n        /**\n         * Sets provided component information on current index in components array.\n         * If component exists on given index then it will be overwritten.\n         * @param {number}                index         Component index in components array.\n         * @param {IComponentInformation} componentInfo Component information.\n         */\n        setComponentInformation( index: number, componentInfo: IComponentInformation ): void {\n            if ( componentInfo ) {\n                this.components.$set( index, componentInfo );\n                this.$dispatch( 'cc-layout-builder__update' );\n            }\n        },\n        /**\n         * Creates new component and adds it to a specified index.\n         * This function calls callback specified by \"add-component\" property that\n         * should return IComponentInformation.\n         * If callback returns falsy value then component isn't added.\n         * @param {number} index New component's index in components array.\n         */\n        createNewComponent( index: number ): void {\n            /**\n             * To allow both sync and async set of new component data we call\n             * provided handler with callback function.\n             * If handler doesn't return component information then it can still\n             * set it using given callback.\n             */\n            const componentInfo: IComponentInformation = this.addComponent(\n                ( asyncComponentInfo: IComponentInformation ): void => {\n                    this.addComponentInformation( index, asyncComponentInfo );\n                },\n            );\n            this.addComponentInformation( index, componentInfo );\n        },\n        /**\n         * Initializes edit mode of component.\n         * This function invokes callback given by \"edit-component\" callback that\n         * should take current IComponentInformation as param and return changed version of it.\n         * If callback returns falsy value then component isn't changed.\n         * @param {string} index: Component's index in array.\n         */\n        editComponentSettings( index: number ): void {\n            // Create a static, non-reactive copy of component data.\n            let componentInfo: IComponentInformation = JSON.parse(\n                JSON.stringify( this.components[ index ] ),\n            );\n            /**\n             * To allow both sync and async set of new component data we call\n             * provided handler with current component data and callback function.\n             * If handler doesn't return component information then it can still\n             * set it using given callback.\n             */\n            componentInfo = this.editComponent(\n                componentInfo,\n                ( asyncComponentInfo: IComponentInformation ): void => {\n                    this.setComponentInformation( index, asyncComponentInfo );\n                },\n            );\n            this.setComponentInformation( index, componentInfo );\n        },\n        /**\n         * Moves component under given index up by swaping it with previous element.\n         * @param {number} index Component's index in array.\n         */\n        moveComponentUp( index: number ): void {\n            if ( index > 0 ) {\n                let previousComponent: IComponentInformation = this.components[ index - 1 ];\n                this.components.$set( index - 1, this.components[ index ] );\n                this.components.$set( index, previousComponent );\n                this.$dispatch( 'cc-layout-builder__update' );\n            }\n        },\n        /**\n         * Moves component under given index down by swaping it with next element.\n         * @param {number} index Component's index in array.\n         */\n        moveComponentDown( index: number ): void {\n            if ( index < this.components.length - 1 ) {\n                let previousComponent: IComponentInformation = this.components[ index + 1 ];\n                this.components.$set( index + 1, this.components[ index ] );\n                this.components.$set(  index, previousComponent );\n                this.$dispatch( 'cc-layout-builder__update' );\n            }\n        },\n        /**\n         * Removes component and adder that is right after component from the DOM\n         * @param {number} index Component's index in array.\n         */\n        deleteComponent( index: number ): void {\n            if ( window.confirm( 'Are you sure you want to delete this item?' ) ) {\n                this.components.splice( index, 1 );\n                this.$dispatch( 'cc-layout-builder__update' );\n            }\n        },\n        /**\n         * Tells if component with given index is the first component.\n         * @param  {number}  index Index of the component.\n         * @return {boolean}       If component is first in array.\n         */\n        isFirstComponent( index: number ): boolean {\n            return index === 0;\n        },\n        /**\n         * Tells if component with given index is the last component.\n         * @param  {number}  index Index of the component.\n         * @return {boolean}       If component is last in array.\n         */\n        isLastComponent( index: number ): boolean {\n            return index === this.components.length - 1;\n        },\n\n        transformComponentTypeToText( componentType: string ): string {\n            return componentType.replace( '-', ' ' );\n        },\n    },\n};\n\nexport default layoutBuilder;\nexport { layoutBuilder, IComponentInformation };\n","import ccLayoutBuilder from '../../../components/cc-layout-builder/src/cc-layout-builder';\n\nimport m2cParagraphConfigurator from '../../m2c-paragraph-configurator/src/m2c-paragraph-configurator';\n\nimport $t from 'mage/translate';\nimport confirm from 'Magento_Ui/js/modal/confirm';\n\nimport template from './m2c-layout-builder.tpl';\n\n/**\n * Single component information interface.\n */\ninterface IComponentInformation {\n    name: string;\n    id: string;\n    type: string;\n    data?: any;\n}\n\n/**\n * Layout builder component - M2 implementation.\n * This component is responsible for displaying and handling user interactions of\n * entire Content Constructor\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst m2cLayoutBuilder: vuejs.ComponentOption = {\n    template,\n    mixins: [\n        ccLayoutBuilder,\n    ],\n    /**\n     * Get dependencies\n     */\n    components: {\n        'm2c-paragraph-configurator': m2cParagraphConfigurator,\n    },\n    methods: {\n        /* Removes component from M2C\n         * If it's paragraph that is about to be removed, asks if corresponding CMS Block shall be removed as well\n         * @param index {number} - index of the component in layoutBuilder\n         */\n        deleteComponent( index: number ): void {\n            const builder: any = this;\n\n            confirm( {\n                content: $t( 'Are you sure you want to delete this item?' ),\n                actions: {\n                    confirm(): void {\n                        const component: any = builder.components[ index ];\n\n                        builder.components.splice( index, 1 );\n\n                        if ( component.type === 'paragraph' ) {\n                            builder.deleteStaticBlock( component.data.blockId );\n                        }\n\n                        builder.$dispatch( 'cc-layout-builder__update' );\n                    },\n                },\n            } );\n        },\n\n        deleteStaticBlock( cmsBlockId: string ): void {\n            const component: any = this;\n\n            confirm( {\n                content: $t( 'Would you like to delete CMS Block related to this component (CMS Block ID: %s) ?' ).replace( '%s', cmsBlockId ),\n                actions: {\n                    confirm(): void {\n                        component.$dispatch( 'cc-layout-builder__cmsblock-delete-request', cmsBlockId );\n                    },\n                },\n            } );\n        },\n    },\n};\n\nexport default m2cLayoutBuilder;\nexport { m2cLayoutBuilder, IComponentInformation };\n","/* tslint:disable:no-console */\n\nimport $ from 'jquery';\nimport Vue from 'Vue';\nimport vr from 'VueResource';\n\nimport $t from 'mage/translate';\nimport modal from 'Magento_Ui/js/modal/modal';\nimport uiRegistry from 'uiRegistry';\nimport 'loadingPopup';\n\nimport m2cButtonConfigurator from '../../../customizations/m2c-button-configurator/src/m2c-button-configurator';\nimport m2cCategoryLinksConfigurator from '../../../customizations/m2c-category-links-configurator/src/m2c-category-links-configurator';\nimport m2cHeadlineConfigurator from '../../../customizations/m2c-headline-configurator/src/m2c-headline-configurator';\nimport m2cHeroCarouselConfigurator from '../../../customizations/m2c-hero-carousel-configurator/src/m2c-hero-carousel-configurator';\nimport m2cImageTeaserConfigurator from '../../../customizations/m2c-image-teaser-configurator/src/m2c-image-teaser-configurator';\nimport m2cParagraphConfigurator from '../../../customizations/m2c-paragraph-configurator/src/m2c-paragraph-configurator';\nimport m2cProductCarouselConfigurator from '../../../customizations/m2c-product-carousel-configurator/src/m2c-product-carousel-configurator';\nimport m2cStaticBlockConfigurator from '../../../customizations/m2c-static-block-configurator/src/m2c-static-block-configurator';\nimport ccComponentPicker from '../../cc-component-picker/src/cc-component-picker';\n\nimport { IComponentInformation, m2cLayoutBuilder } from '../../../customizations/m2c-layout-builder/src/m2c-layout-builder';\n\n// Use Vue resource\nVue.use( vr );\n\n// Set Vue's $http headers Accept to text/html\nVue.http.headers.custom.Accept = 'text/html';\n\n// Picker modal options\nlet pickerModalOptions: any = {\n    type: 'slide',\n    responsive: true,\n    innerScroll: true,\n    autoOpen: true,\n    title: $t( 'Please select type of component' ),\n    buttons: [\n        {\n            text: $.mage.__( 'Cancel' ),\n            class: '',\n            click(): void {\n                this.closeModal();\n            },\n        },\n    ],\n};\nlet $pickerModal: any;\n\nlet configuratorModalOptions: any = {\n    type: 'slide',\n    responsive: true,\n    innerScroll: true,\n    autoOpen: true,\n    title: $t( 'Configure your component' ),\n    buttons: [\n        {\n            text: $.mage.__( 'Cancel' ),\n            class: '',\n            click(): void {\n                this.closeModal();\n            },\n        },\n        {\n            text: $.mage.__( 'Save' ),\n            class: 'action-primary',\n        },\n    ],\n};\nlet $configuratorModal: any;\n\n/**\n * M2C Content Constructor component.\n * This is the final layer that is responsible for collecting and tying up all\n * of the M2C admin panel logic.\n */\nconst m2cContentConstructor: vuejs.ComponentOption = {\n    template: `<div class=\"m2c-content-constructor\">\n        <m2c-layout-builder\n            v-ref:m2c-layout-builder\n            :assets-src=\"assetsSrc\"\n            :add-component=\"getComponentPicker\"\n            :edit-component=\"editComponent\"\n            :components-configuration=\"configuration\">\n        </m2c-layout-builder>\n        <div class=\"m2c-content-constructor__modal m2c-content-constructor__modal--picker\" v-el:picker-modal></div>\n        <div class=\"m2c-content-constructor__modal m2c-content-constructor__modal--configurator\" v-el:configurator-modal></div>\n    </div>`,\n    components: {\n        'm2c-layout-builder': m2cLayoutBuilder,\n        'cc-component-picker': ccComponentPicker,\n        'm2c-headline-configurator': m2cHeadlineConfigurator,\n        'm2c-static-block-configurator': m2cStaticBlockConfigurator,\n        'm2c-image-teaser-configurator': m2cImageTeaserConfigurator,\n        'm2c-paragraph-configurator': m2cParagraphConfigurator,\n        'm2c-hero-carousel-configurator': m2cHeroCarouselConfigurator,\n        'm2c-product-carousel-configurator': m2cProductCarouselConfigurator,\n        'm2c-category-links-configurator': m2cCategoryLinksConfigurator,\n        'm2c-button-configurator': m2cButtonConfigurator,\n    },\n    props: {\n        configuration: {\n            type: String,\n            default: '',\n        },\n        assetsSrc: {\n            type: String,\n            default: '',\n        },\n        configuratorEndpoint: {\n            type: String,\n            default: '',\n        },\n        uploaderUrl: {\n            type: String,\n            default: '',\n        },\n        restTokenEndpoint: {\n            type: String,\n            default: '',\n        },\n        imageEndpoint: {\n            type: String,\n            default: '',\n        },\n    },\n    data(): Object {\n        return {\n            initialComponentConfiguration: undefined,\n            restToken: undefined,\n        };\n    },\n    ready(): void {\n        this.dumpConfiguration();\n        this._isPickerLoaded = false;\n        this._cleanupConfiguratorModal = '';\n        this._configuratorSaveCallback = (): undefined => undefined;\n        this.setRestToken();\n\n        // Initialize M2 loader for m2c modals\n        $( 'body' ).loadingPopup( {\n            timeout: false,\n        } ).trigger( 'hideLoadingPopup' );\n    },\n    events: {\n        /**\n         * We update provided input with new components information each time leyout\n         * builder updates.\n         */\n        'cc-layout-builder__update'(): void {\n            this.dumpConfiguration();\n        },\n        'cc-component-configurator__saved'( data: any ): void {\n            this._configuratorSavedCallback( data );\n\n            if ( $configuratorModal && $configuratorModal.closeModal ) {\n                $configuratorModal.closeModal();\n            }\n            if ( $pickerModal && $pickerModal.closeModal ) {\n                $pickerModal.closeModal();\n            }\n        },\n        'cc-layout-builder__cmsblock-delete-request'( cmsBlockId: string ): void {\n            this.deleteStaticBlock( cmsBlockId );\n        },\n    },\n    methods: {\n        /**\n         * Callback that will be invoked when user clicks plus button.\n         * This method should open magento modal with component picker.\n         * @param  {IComponentInformation} addComponentInformation Callback that let's us add component asynchronously.\n         */\n        getComponentPicker( addComponentInformation: ( componentInfo: IComponentInformation ) => void ): void {\n            const component: any = this;\n\n            // Save adding callback for async use.\n            this._addComponentInformation = addComponentInformation;\n\n            pickerModalOptions.opened = function(): void {\n                if ( !component._isPickerLoaded ) {\n                    // Show ajax loader\n                    $( 'body' ).trigger( 'showLoadingPopup' );\n\n                    // Get picker via AJAX\n                    component.$http.get( `${component.configuratorEndpoint}picker` ).then( ( response: any ): void => {\n                        component.$els.pickerModal.innerHTML = response.body;\n                        component.$compile( component.$els.pickerModal );\n                        component._isPickerLoaded = true;\n                        // Hide loader\n                        $( 'body' ).trigger( 'hideLoadingPopup' );\n                    } );\n                }\n            };\n            // Create or Show picker modal depending if exists\n            if ( $pickerModal ) {\n                $pickerModal.openModal();\n            } else {\n                $pickerModal = modal( pickerModalOptions, $( this.$els.pickerModal ) );\n            }\n        },\n\n        /**\n         * Callback that will be invoked when user choses component in picker.\n         * This method should open magento modal with component configurator.\n         * @param {componentType} String - type of component chosen\n         */\n        getComponentConfigurator( componentType: string ): void {\n            const newComponentId: string = 'component' + Math.floor( ( 1 + Math.random() ) * 0x10000 ).toString( 16 ).substring( 1 );\n            this._configuratorSavedCallback = ( componentData: any ): void => {\n                this._addComponentInformation( {\n                    type: componentType,\n                    id: newComponentId,\n                    data: componentData,\n                } );\n            };\n\n            if ( componentType === 'brand-carousel' ) {\n                this.$emit( 'cc-component-configurator__saved', [] );\n            } else {\n                this.initConfiguratorModal( {\n                    type: componentType,\n                    id: newComponentId,\n                    data: undefined,\n                } );\n            }\n        },\n        /**\n         * Callback that will be invoked when user clicks edit button.\n         * This method should open magento modal with component editor.\n         * @param  {IComponentInformation} setComponentInformation Callback that let's us add component asynchronously.\n         */\n        editComponent(\n            prevComponentData: IComponentInformation,\n            setComponentInformation: ( componentInfo: IComponentInformation ) => void,\n        ): void {\n            this._configuratorSavedCallback = ( componentData: any ): void => {\n                setComponentInformation( {\n                    type: prevComponentData.type,\n                    id: prevComponentData.id,\n                    data: componentData,\n                } );\n            };\n\n            this.initConfiguratorModal( prevComponentData );\n        },\n\n        initConfiguratorModal( componentInformation: IComponentInformation ): void {\n            const component: any = this;\n            let cleanupConfiguratorModal: Function = (): undefined => undefined;\n\n            configuratorModalOptions.buttons[1].click = function (): void {\n                component.$broadcast( 'cc-component-configurator__save' );\n            };\n\n            // Configurator modal opened callback\n            configuratorModalOptions.opened = function(): void {\n                // Show ajax loader\n                $( 'body' ).trigger( 'showLoadingPopup' );\n\n                // Get twig component\n                component.$http.get( component.configuratorEndpoint + componentInformation.type ).then( ( response: any ): void => {\n                    component.$els.configuratorModal.innerHTML = response.body;\n\n                    // Set current component configuration data\n                    component.initialComponentConfiguration = componentInformation.data;\n\n                    // compile fetched component\n                    cleanupConfiguratorModal = component.$compile( component.$els.configuratorModal );\n\n                    // Hide loader\n                    $( 'body' ).trigger( 'hideLoadingPopup' );\n                } );\n            };\n\n            configuratorModalOptions.closed = function(): void {\n                // Cleanup configurator component and then remove modal\n                cleanupConfiguratorModal();\n                component.$els.configuratorModal.innerHTML = '';\n                $configuratorModal.modal[ 0 ].parentNode.removeChild( $configuratorModal.modal[ 0 ] );\n                component.initialComponentConfiguration = undefined;\n            };\n            // Create & Show $configuratorModal\n            $configuratorModal = modal( configuratorModalOptions, $( this.$els.configuratorModal ) );\n        },\n\n        dumpConfiguration(): void {\n            uiRegistry.get('cms_page_form.cms_page_form').source.set(\n                'data.components',\n                JSON.stringify(\n                    this.$refs.m2cLayoutBuilder.getComponentInformation(),\n                ),\n            );\n        },\n\n        setRestToken(): void {\n            const component: any = this;\n\n            // send request for token\n            this.$http.get( this.restTokenEndpoint ).then( ( response: any ): void => {\n                component.restToken = `Bearer ${response.body}`;\n            } );\n        },\n\n        deleteStaticBlock( cmsBlockId: string ): void {\n            const component: any = this;\n\n            // Send request to REST API\n            this.$http( {\n                headers: {\n                    Accept: 'application/json',\n                    Authorization: component.restToken,\n                },\n                method: 'delete',\n                url: `${ window.location.origin }/rest/V1/cmsBlock/${cmsBlockId}`,\n            } ).then( ( response: any ): void => {\n                if ( response.body !== 'true' ) {\n                    console.warn( `Something went wrong, CMS block wasn\\'t removed, please check if block with ID: ${cmsBlockId} exists in database` );\n                }\n            } );\n        },\n    },\n};\n\nexport default m2cContentConstructor;\n"],"names":["teaserItemPrototype","template","ccLayoutBuilder"],"mappings":"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"}