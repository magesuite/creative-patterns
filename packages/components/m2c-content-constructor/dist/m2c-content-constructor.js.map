{"version":3,"file":null,"sources":["../../cc-headline-configurator/src/cc-headline-configurator.ts","../../../customizations/m2c-headline-configurator/src/m2c-headline-configurator.ts","../../cc-static-block-configurator/src/cc-static-block-configurator.ts","../../../customizations/m2c-static-block-configurator/src/m2c-static-block-configurator.ts","../../cc-component-picker/src/cc-component-picker.ts","../../action-button/src/action-button.ts","../../cc-component-actions/src/cc-component-actions.ts","../../cc-component-adder/src/cc-component-adder.ts","../../cc-component-placeholder/src/cc-component-placeholder.ts","../../cc-layout-builder/src/cc-layout-builder.ts","../src/m2c-content-constructor.ts"],"sourcesContent":["/* tslint:disable:no-console */\n\n/**\n * Single component information object.\n */\ninterface IComponentInformation {\n    type: string;\n    /**\n     * Component ID\n     * @type {string}\n     */\n    id: string;\n    /**\n     * component data values from inputs\n     * @type {string}\n     */\n    data: Object;\n}\n\n/**\n * Components information object that should be returned by AJAX call to API.\n */\ninterface IComponentsInformation {\n    components: IComponentInformation[];\n}\n\n/**\n * Headline configurator component.\n * This component is responsible for displaying headlines configuration form\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccHeadlineConfigurator: vuejs.ComponentOption = {\n    template: `<form class=\"cc-headline-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\n        <div class=\"cs-input cs-input--type-inline\">\n            <label for=\"cfg-headline\" class=\"cs-input__label\">Headline:</label>\n            <input type=\"text\" v-model=\"configuration.title\" id=\"cfg-headline\" class=\"cs-input__input\" @change=\"onChange\">\n        </div>\n        <div class=\"cs-input cs-input--type-inline\">\n            <label for=\"cfg-subheadline\" class=\"cs-input__label\">Subheadline:</label>\n            <input type=\"text\" v-model=\"configuration.subtitle\" id=\"cfg-subheadline\" class=\"cs-input__input\" @change=\"onChange\">\n        </div>\n        <button type=\"submit\">Save</button>\n    </form>`,\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: '',\n        },\n        /**\n         * Property containing callback triggered when user saves component.\n         */\n        save: {\n            type: Function,\n        },\n        /**\n         * Property containing callback triggered when configuration is changed.\n         */\n        change: {\n            type: Function,\n        },\n        configuration: {\n            type: Object,\n            default: {\n                title: '',\n                subtitle: '',\n            },\n        },\n    },\n    methods: {\n        onChange( event: Event ): void {\n            const data: any = JSON.parse( JSON.stringify( this.configuration ) );\n\n            this.$dispatch( 'cc-headline-configurator__change', data );\n\n            if ( typeof this.change === 'function' ) {\n                this.change( data );\n            }\n        },\n        onSave( event: Event ): void {\n            const data: any = JSON.parse( JSON.stringify( this.configuration ) );\n\n            this.$dispatch( 'cc-headline-configurator__save', data );\n\n            if ( typeof this.save === 'function' ) {\n                this.save( data );\n            }\n        },\n    },\n};\n\nexport default ccHeadlineConfigurator;\n","/* tslint:disable:no-console */\n\nimport ccHeadlineConfigurator from '../../../components/cc-headline-configurator/src/cc-headline-configurator';\n// TODO: Use m2-input component the Vue way.\n\nconst m2cHeadlineConfigurator: vuejs.ComponentOption = {\n    template: `<form class=\"m2c-headline-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\n        <div class=\"m2-input m2-input--type-inline\">\n            <label for=\"cfg-headline\" class=\"m2-input__label\">Headline:</label>\n            <input type=\"text\" v-model=\"configuration.title\" id=\"cfg-headline\" class=\"m2-input__input\" @change=\"onChange\">\n        </div>\n        <div class=\"m2-input m2-input--type-inline\">\n            <label for=\"cfg-subheadline\" class=\"m2-input__label\">Subheadline:</label>\n            <input type=\"text\" v-model=\"configuration.subtitle\" id=\"cfg-subheadline\" class=\"m2-input__input\" @change=\"onChange\">\n        </div>\n    </form>`,\n    mixins: [\n        ccHeadlineConfigurator,\n    ],\n};\n\nexport default m2cHeadlineConfigurator;\n","\r\n/**\r\n * Single component information object.\r\n */\r\ninterface IComponentInformation {\r\n    type: string;\r\n    /**\r\n     * Component ID\r\n     * @type {string}\r\n     */\r\n    id: string;\r\n    /**\r\n     * component data values from inputs\r\n     * @type {string}\r\n     */\r\n    data: Object;\r\n}\r\n\r\n/**\r\n * Components information object that should be returned by AJAX call to API.\r\n */\r\ninterface IComponentsInformation {\r\n    components: IComponentInformation[];\r\n}\r\n\r\n/**\r\n * Static block configurator component.\r\n * This component is responsible for displaying static block's configuration form\r\n * @type {vuejs.ComponentOption} Vue component object.\r\n */\r\nconst ccStaticBlockConfigurator: vuejs.ComponentOption = {\r\n    template: `<form class=\"cc-static-block-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\r\n        <div class=\"cs-input cs-input--type-inline\">\r\n            <label for=\"cfg-static-block\" class=\"cs-input__label\">Static block:</label>\r\n            <select name=\"select\" class=\"cs-input__select\" id=\"cfg-static-block\" v-model=\"configuration.identifier\" @change=\"onChange\">\r\n                <option value=\"1\" selected>Foo</option>\r\n                <option value=\"2\">Bar</option>\r\n            </select>\r\n        </div>\r\n        <button type=\"submit\">Save</button>\r\n    </form>`,\r\n    props: {\r\n        /**\r\n         * Class property support to enable BEM mixes.\r\n         */\r\n        class: {\r\n            type: [ String, Object, Array ],\r\n            default: '',\r\n        },\r\n        /**\r\n         * Property containing callback triggered when user saves component.\r\n         */\r\n        save: {\r\n            type: Function,\r\n        },\r\n        /**\r\n         * Property containing callback triggered when configuration is changed.\r\n         */\r\n        change: {\r\n            type: Function,\r\n        },\r\n        configuration: {\r\n            type: Object,\r\n            default: {\r\n                identifier: '',\r\n            },\r\n        },\r\n    },\r\n    methods: {\r\n        onChange( event: Event ): void {\r\n            const data: any = JSON.parse( JSON.stringify( this.configuration ) );\r\n\r\n            this.$dispatch( 'cc-static-block-configurator__change', data );\r\n\r\n            if ( typeof this.change === 'function' ) {\r\n                this.change( data );\r\n            }\r\n        },\r\n        onSave( event: Event ): void {\r\n            const data: any = JSON.parse( JSON.stringify( this.configuration ) );\r\n\r\n            this.$dispatch( 'cc-static-block-configurator__save', data );\r\n\r\n            if ( typeof this.save === 'function' ) {\r\n                this.save( data );\r\n            }\r\n        },\r\n    },\r\n};\r\n\r\nexport default ccStaticBlockConfigurator;\r\n","import ccStaticBlockConfigurator from '../../../components/cc-static-block-configurator/src/cc-static-block-configurator';\r\n\r\nconst m2cStaticBlockConfigurator: vuejs.ComponentOption = {\r\n    template: '#m2c-static-blocks-form',\r\n    mixins: [\r\n        ccStaticBlockConfigurator,\r\n    ],\r\n};\r\n\r\nexport default m2cStaticBlockConfigurator;\r\n","import template from './cc-component-picker.tpl';\n\n/**\n * Single component information object.\n */\ninterface IComponentInformation {\n    type: string;\n    /**\n     * Cover image url.\n     * @type {string}\n     */\n    cover: string;\n    /**\n     * Cover image alt attribute value.\n     * @type {string}\n     */\n    coverAlt: string;\n    name: string;\n}\n\n/**\n * Components information object that should be returned by AJAX call to API.\n */\ninterface IComponentsInformation {\n    components: IComponentInformation[];\n}\n\n/**\n * Componen picker.\n * Lists all types of components available in m2c in the grid/list mode\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccComponentPicker: vuejs.ComponentOption = {\n    template,\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: String,\n            default: '',\n            coerce: ( value: String ): String => value.replace( 'cc-component-picker', '' ),\n        },\n        /**\n         * Property containing callback triggered when user picks component.\n         */\n        pickComponent: {\n            type: Function,\n        },\n        /**\n         * JSON stringified array containing available components.\n         */\n        components: {\n            type: String,\n            default: '',\n        },\n        /**\n         * URL for API returning JSON stringified array containing available components.\n         */\n        componentsEndpoint: {\n            type: String,\n            default: '',\n        },\n    },\n    data(): any {\n        return {\n            availableComponents: [],\n        };\n    },\n    ready(): void {\n        // If inline JSON is provided then parse it.\n        if ( this.components ) {\n            this.availableComponents = JSON.parse( this.components );\n        } else if ( this.componentsEndpoint ) {\n            // Otherwise load from endpoint if URL provided.\n            this.$http.get( this.componentsEndpoint ).then( function( response: vuejs.HttpResponse ): void {\n                this.availableComponents = response.json();\n            } );\n        }\n    },\n    methods: {\n        /**\n         * Component pick click handler.\n         * This handler triggers \"cc-component-picker__pick\" event up the DOM chain when called.\n         * @param {Event} event Click event object.\n         */\n        onPickComponent( componentType: String ): void {\n            this.$dispatch( 'cc-component-picker__pick', componentType );\n\n            if ( typeof this.pickComponent === 'function' ) {\n                this.pickComponent( componentType );\n            }\n        },\n    },\n};\n\nexport default ccComponentPicker;\n","/**\n * Action button component version.\n * Small component that allows to set it's content.\n *\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst actionButton: vuejs.ComponentOption = {\n    template: `<button class=\"action-button {{ class }}\" @click=\"_onClick\">\n        <slot></slot>\n    </button>`,\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: '',\n        },\n    },\n    methods: {\n        /**\n         * Button click handler.\n         * This handler triggers \"action-button__click\" event up the DOM chain when called.\n         * @param {Event} event Click event object.\n         */\n        _onClick( event: Event ): void {\n            this.$dispatch( 'action-button__click', event );\n        },\n    },\n};\n\nexport default actionButton;\n","/**\n * Component actions component.\n * This component is responsible for displaying and handling user interactions of\n * side utility navigation for each component that supports:\n * - Moving component up,\n * - Moving component down,\n * - Opening component settings,\n * - Deleting component.\n *\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst componentActions: vuejs.ComponentOption = {\n    template: `<aside class=\"cc-component-actions | {{ class }}\">\n        <div class=\"cc-component-actions__top\">\n            <slot name=\"cc-component-actions__top\"></slot>\n        </div>\n        <div class=\"cc-component-actions__bottom\">\n            <slot name=\"cc-component-actions__bottom\"></slot>\n        </div>\n    </aside>`,\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: String,\n            default: '',\n            coerce: ( value: String ): String => value.replace( 'cc-component-actions', '' ),\n        },\n    },\n};\n\nexport default componentActions;\n","/**\n * Component controller component.\n * This component is responsible for displaying annd handling component adding button\n * @type {vuejs.ComponentOption} Vue component object.\n */\n\nconst componentAdder: vuejs.ComponentOption = {\n    template: `<section class=\"cc-component-adder | {{ class }}\">\n        <div class=\"cc-component-adder__button-create\" @click=\"onCreateComponent\">\n            <slot></slot>\n        </div>\n    </section>`,\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: String,\n            default: '',\n            coerce( value: string ): string {\n                return value.replace( 'cc-component-adder', '' );\n            },\n        },\n        /**\n         * Property containing callback triggered when user clicks \"add component\" button.\n         */\n        createComponent: {\n            type: Function,\n        },\n    },\n    methods: {\n        /**\n         * \"Add component\" button click handler.\n         * This handler triggers \"cc-component-adder__create-component\" event up the DOM chain when called.\n         * @param {Event} event Click event object.\n         */\n        onCreateComponent( event: Event ): void {\n            this.$dispatch( 'cc-component-adder__create-component', event );\n            if ( typeof this.createComponent === 'function' ) {\n                this.createComponent( event );\n            }\n        },\n    },\n};\n\nexport default componentAdder;\n","/**\n * Component placeholder component.\n */\nconst componentPlaceholder: any = {\n    template: `<div class=\"cc-component-placeholder\">\n        <div class=\"cc-component-placeholder__content\">\n            <slot></slot>\n        </div>\n    </div>`,\n};\n\nexport default componentPlaceholder;\n","import actionButton from '../../action-button/src/action-button';\nimport componentActions from '../../cc-component-actions/src/cc-component-actions';\nimport componentAdder from '../../cc-component-adder/src/cc-component-adder';\nimport componentPlaceholder from '../../cc-component-placeholder/src/cc-component-placeholder';\n\nimport template from './cc-layout-builder.tpl';\n\n/**\n * Single component information interface.\n */\ninterface IComponentInformation {\n    name: string;\n    id: string;\n    type: string;\n    data?: any;\n}\n\n/**\n * Layout builder component.\n * This component is responsible for displaying and handling user interactions of\n * entire Content Constructor\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst layoutBuilder: vuejs.ComponentOption = {\n    template,\n    /**\n     * Get dependencies\n     */\n    components: {\n        'action-button': actionButton,\n        'cc-component-adder': componentAdder,\n        'cc-component-actions': componentActions,\n        'cc-component-placeholder': componentPlaceholder,\n    },\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: '',\n        },\n        assetsSrc: {\n            type: String,\n            default: '',\n        },\n        /**\n         * Initial component configuration encoded as JSON string.\n         */\n        componentsConfiguration: {\n            type: String,\n            default: '',\n        },\n        /**\n         * Callback invoked when edit component button is clicked.\n         * This function should take IComponentInformation and return changed version of it.\n         * If callback returns falsy value then component isn't changed.\n         */\n        editComponent: {\n            type: Function,\n            default: ( componentInfo: IComponentInformation ): IComponentInformation => componentInfo,\n        },\n        /**\n         * Callback invoked when edit component button is clicked.\n         * This function should return IComponentInformation.\n         * If callback returns falsy value then component isn't added.\n         */\n        addComponent: {\n            type: Function,\n            default: (): IComponentInformation => undefined,\n        },\n    },\n    data(): any {\n        return {\n            components: [],\n        };\n    },\n    ready(): void {\n        // Set initial components configuration if provided.\n        this.components = this.componentsConfiguration ? JSON.parse( this.componentsConfiguration ) : [];\n        this.$dispatch( 'cc-layout-builder__update' );\n    },\n    methods: {\n        /**\n         * Returns components information currently stored within layout builder.\n         * @return {IComponentInformation[]} Components information array.\n         */\n        getComponentInformation(): IComponentInformation[] {\n            return JSON.parse(\n                JSON.stringify( this.components )\n            );\n        },\n        /**\n         * Sets provided component information on current index in components array.\n         * If component exists on given index then this compoennt will be inserted before it.\n         * @param {number}                index         Component index in components array.\n         * @param {IComponentInformation} componentInfo Component information.\n         */\n        addComponentInformation( index: number, componentInfo: IComponentInformation ): void {\n            if ( componentInfo ) {\n                this.components.splice( index, 0, componentInfo );\n                this.$dispatch( 'cc-layout-builder__update' );\n            }\n        },\n        /**\n         * Sets provided component information on current index in components array.\n         * If component exists on given index then it will be overwritten.\n         * @param {number}                index         Component index in components array.\n         * @param {IComponentInformation} componentInfo Component information.\n         */\n        setComponentInformation( index: number, componentInfo: IComponentInformation ): void {\n            if ( componentInfo ) {\n                this.components.$set( index, componentInfo );\n                this.$dispatch( 'cc-layout-builder__update' );\n            }\n        },\n        /**\n         * Creates new component and adds it to a specified index.\n         * This function calls callback specified by \"add-component\" property that\n         * should return IComponentInformation.\n         * If callback returns falsy value then component isn't added.\n         * @param {number} index New component's index in components array.\n         */\n        createNewComponent( index: number ): void {\n            /**\n             * To allow both sync and async set of new component data we call\n             * provided handler with callback function.\n             * If handler doesn't return component information then it can still\n             * set it using given callback.\n             */\n            const componentInfo: IComponentInformation = this.addComponent(\n                ( asyncComponentInfo: IComponentInformation ): void => {\n                    this.addComponentInformation( index, asyncComponentInfo );\n                }\n            );\n            this.addComponentInformation( index, componentInfo );\n        },\n        /**\n         * Initializes edit mode of component.\n         * This function invokes callback given by \"edit-component\" callback that\n         * should take current IComponentInformation as param and return changed version of it.\n         * If callback returns falsy value then component isn't changed.\n         * @param {string} index: Component's index in array.\n         */\n        editComponentSettings( index: number ): void {\n            // Create a static, non-reactive copy of component data.\n            let componentInfo: IComponentInformation = JSON.parse(\n                JSON.stringify( this.components[ index ] )\n            );\n            /**\n             * To allow both sync and async set of new component data we call\n             * provided handler with current component data and callback function.\n             * If handler doesn't return component information then it can still\n             * set it using given callback.\n             */\n            componentInfo = this.editComponent(\n                componentInfo,\n                ( asyncComponentInfo: IComponentInformation ): void => {\n                    this.setComponentInformation( index, asyncComponentInfo );\n                }\n            );\n            this.setComponentInformation( index, componentInfo );\n        },\n        /**\n         * Moves component under given index up by swaping it with previous element.\n         * @param {number} index Component's index in array.\n         */\n        moveComponentUp( index: number ): void {\n            if ( index > 0 ) {\n                let previousComponent: IComponentInformation = this.components[ index - 1 ];\n                this.components.$set( index - 1, this.components[ index ] );\n                this.components.$set( index, previousComponent );\n                this.$dispatch( 'cc-layout-builder__update' );\n            }\n        },\n        /**\n         * Moves component under given index down by swaping it with next element.\n         * @param {number} index Component's index in array.\n         */\n        moveComponentDown( index: number ): void {\n            if ( index < this.components.length - 1 ) {\n                let previousComponent: IComponentInformation = this.components[ index + 1 ];\n                this.components.$set( index + 1, this.components[ index ] );\n                this.components.$set(  index, previousComponent );\n                this.$dispatch( 'cc-layout-builder__update' );\n            }\n        },\n        /**\n         * Removes component and adder that is right after component from the DOM\n         * @param {number} index Component's index in array.\n         */\n        deleteComponent( index: number ): void {\n             if ( confirm( `Are you sure you want to remove this component?` ) ) {\n                this.components.splice( index, 1 );\n                this.$dispatch( 'cc-layout-builder__update' );\n            }\n        },\n        /**\n         * Tells if component with given index is the first component.\n         * @param  {number}  index Index of the component.\n         * @return {boolean}       If component is first in array.\n         */\n        isFirstComponent( index: number ): boolean {\n            return index === 0;\n        },\n        /**\n         * Tells if component with given index is the last component.\n         * @param  {number}  index Index of the component.\n         * @return {boolean}       If component is last in array.\n         */\n        isLastComponent( index: number ): boolean {\n            return index === this.components.length - 1;\n        },\n    },\n};\n\nexport default layoutBuilder;\nexport { layoutBuilder, IComponentInformation };\n","/* tslint:disable:no-console */\n\nimport $ from 'jquery';\nimport Vue from 'Vue';\nimport vr from 'VueResource';\n\nimport $t from 'mage/translate';\nimport modal from 'Magento_Ui/js/modal/modal';\nimport uiRegistry from 'uiRegistry';\n\nimport m2cHeadlineConfigurator from '../../../customizations/m2c-headline-configurator/src/m2c-headline-configurator';\nimport m2cStaticBlockConfigurator from '../../../customizations/m2c-static-block-configurator/src/m2c-static-block-configurator';\n// import m2cImageTeaserConfigurator from '../../../customizations/m2c-image-teaser-configurator/src/m2c-image-teaser-configurator';\nimport ccComponentPicker from '../../cc-component-picker/src/cc-component-picker';\nimport { IComponentInformation, layoutBuilder } from '../../cc-layout-builder/src/cc-layout-builder';\n\n// Use Vue resource\nVue.use( vr );\n\n// Set Vue's $http headers Accept to text/html\nVue.http.headers.custom.Accept = 'text/html';\n\n// Picker modal options\nlet pickerModalOptions: any = {\n    type: 'slide',\n    responsive: true,\n    innerScroll: true,\n    autoOpen: true,\n    title: $t( 'Please select type of component' ),\n    buttons: [\n        {\n            text: $.mage.__( 'Cancel' ),\n            class: '',\n            click(): void {\n                this.closeModal();\n            },\n        },\n    ],\n};\nlet $pickerModal: any;\n\nlet configuratorModalOptions: any = {\n    type: 'slide',\n    responsive: true,\n    innerScroll: true,\n    autoOpen: true,\n    title: $t( 'Configure your component' ),\n    buttons: [\n        {\n            text: $.mage.__( 'Cancel' ),\n            class: '',\n            click(): void {\n                this.closeModal();\n            },\n        },\n        {\n            text: $.mage.__( 'Save' ),\n            class: 'action-primary',\n        },\n    ],\n};\nlet $configuratorModal: any;\n\n/**\n * M2C Content Constructor component.\n * This is the final layer that is responsible for collecting and tying up all\n * of the M2C admin panel logic.\n */\nconst m2cContentConstructor: vuejs.ComponentOption = {\n    template: `<div class=\"m2c-content-constructor\">\n        <cc-layout-builder\n            v-ref:layout-builder\n            :assets-src=\"assetsSrc\"\n            :add-component=\"getComponentPicker\"\n            :edit-component=\"editComponent\"\n            :components-configuration=\"configuration\">\n        </cc-layout-builder>\n        <div class=\"m2c-content-constructor__modal m2c-content-constructor__modal--picker\" v-el:picker-modal></div>\n        <div class=\"m2c-content-constructor__modal m2c-content-constructor__modal--configurator\" v-el:configurator-modal></div>\n    </div>`,\n    components: {\n        'cc-layout-builder': layoutBuilder,\n        'cc-component-picker': ccComponentPicker,\n        'm2c-headline-configurator': m2cHeadlineConfigurator,\n        'm2c-static-block-configurator': m2cStaticBlockConfigurator,\n        // 'm2c-image-teaser-configurator': m2cImageTeaserConfigurator,\n    },\n    props: {\n        configuration: {\n            type: String,\n            default: '',\n        },\n        assetsSrc: {\n            type: String,\n            default: '',\n        },\n        configuratorEndpoint: {\n            type: String,\n            default: '',\n        },\n        /* uploaderUrl: {\n            type: String,\n            default: '',\n        }, */\n    },\n    data(): Object {\n        return {\n            currentComponentConfiguration: undefined,\n        };\n    },\n    ready(): void {\n        this.dumpConfiguration();\n        this.isPickerLoaded = false;\n        this.cleanupConfiguratorModal = '';\n    },\n    events: {\n        /**\n         * We update provided input with new components information each time leyout\n         * builder updates.\n         */\n        'cc-layout-builder__update'(): void {\n            this.dumpConfiguration();\n        },\n        'cc-headline-configurator__change'( data: any ): void {\n            this._currentConfiguratorData = data;\n        },\n        'cc-static-block-configurator__change'( data: any ): void {\n            this._currentConfiguratorData = data;\n        },\n        'cc-image-teaser-configurator__change'( data: any ): void {\n            this._currentConfiguratorData = data;\n        },\n    },\n    methods: {\n        /**\n         * Callback that will be invoked when user clicks plus button.\n         * This method should open magento modal with component picker.\n         * @param  {IComponentInformation} addComponentInformation Callback that let's us add component asynchronously.\n         */\n        getComponentPicker( addComponentInformation: ( componentInfo: IComponentInformation ) => void ): void {\n            const component: any = this;\n\n            // Save adding callback for async use.\n            this._addComponentInformation = addComponentInformation;\n\n            pickerModalOptions.opened = function(): void {\n                if ( !component.isPickerLoaded ) {\n                    // Get picker via AJAX\n                    component.$http.get( `${component.configuratorEndpoint}picker` ).then( ( response: any ): void => {\n                        component.$els.pickerModal.innerHTML = response.body;\n                        component.$compile( component.$els.pickerModal );\n                        component.isPickerLoaded = true;\n                    } );\n                }\n            };\n            // Create or Show picker modal depending if exists\n            if ( $pickerModal ) {\n                $pickerModal.openModal();\n            } else {\n                $pickerModal = modal( pickerModalOptions, $( this.$els.pickerModal ) );\n            }\n        },\n\n        /**\n         * Callback that will be invoked when user choses component in picker.\n         * This method should open magento modal with component configurator.\n         * @param {componentType} String - type of component chosen\n         */\n        getComponentConfigurator( componentType: string ): void {\n            const component: any = this;\n            component._currentConfiguratorData = {};\n\n            // On save component:\n            configuratorModalOptions.buttons[1].click = function (): void {\n\n                console.log( component._currentConfiguratorData );\n\n                component._addComponentInformation( {\n                    type: componentType,\n                    id: 'component' + Math.floor( ( 1 + Math.random() ) * 0x10000 ).toString( 16 ).substring( 1 ),\n                    data: component._currentConfiguratorData,\n                } );\n\n                this.closeModal();\n                $pickerModal.closeModal();\n            };\n\n            // Configurator modal opened callback\n            configuratorModalOptions.opened = function(): void {\n                // Get twig component\n                component.$http.get( component.configuratorEndpoint + componentType ).then( ( response: any ): void => {\n                    component.$els.configuratorModal.innerHTML = response.body;\n                    // compile fetched component\n                    component.cleanupConfiguratorModal = component.$compile( component.$els.configuratorModal );\n                } );\n            };\n\n            configuratorModalOptions.closed = function(): void {\n                // Cleanup configurator component and then remove modal\n                if ( typeof component.cleanupConfiguratorModal === 'function' ) {\n                    component.cleanupConfiguratorModal();\n                }\n                $configuratorModal.modal[ 0 ].parentNode.removeChild( $configuratorModal.modal[ 0 ] );\n            };\n            // Create & Show $configuratorModal\n            $configuratorModal = modal( configuratorModalOptions, $( this.$els.configuratorModal ) );\n        },\n        /**\n         * Callback that will be invoked when user clicks edit button.\n         * This method should open magento modal with component editor.\n         * @param  {IComponentInformation} setComponentInformation Callback that let's us add component asynchronously.\n         */\n        editComponent(\n            currentComponentConfiguration: IComponentInformation,\n            setComponentInformation: ( componentInfo: IComponentInformation ) => void\n        ): void {\n            const component: any = this;\n\n            configuratorModalOptions.buttons[1].click = function (): void {\n\n                console.log( component._currentConfiguratorData );\n\n                setComponentInformation( {\n                    type: currentComponentConfiguration.type,\n                    id: currentComponentConfiguration.id,\n                    data: component._currentConfiguratorData,\n                } );\n\n                this.closeModal();\n            };\n\n            // Configurator modal opened callback\n            configuratorModalOptions.opened = function(): void {\n                // Get twig component\n                component.$http.get( component.configuratorEndpoint + currentComponentConfiguration.type ).then( ( response: any ): void => {\n                    component.$els.configuratorModal.innerHTML = response.body;\n\n                    // Set current component configuration data\n                    component.currentComponentConfiguration = currentComponentConfiguration.data;\n\n                    // compile fetched component\n                    component.cleanupConfiguratorModal = component.$compile( component.$els.configuratorModal );\n                } );\n            };\n\n            configuratorModalOptions.closed = function(): void {\n                // Cleanup configurator component and then remove modal\n                if ( typeof component.cleanupConfiguratorModal === 'function' ) {\n                    component.cleanupConfiguratorModal();\n                }\n                $configuratorModal.modal[ 0 ].parentNode.removeChild( $configuratorModal.modal[ 0 ] );\n                component.currentComponentConfiguration = null;\n            };\n            // Create & Show $configuratorModal\n            $configuratorModal = modal( configuratorModalOptions, $( this.$els.configuratorModal ) );\n        },\n        dumpConfiguration(): void {\n            uiRegistry.get('cms_page_form.cms_page_form').source.set(\n                'data.components',\n                JSON.stringify(\n                    this.$refs.layoutBuilder.getComponentInformation()\n                )\n            );\n        },\n    },\n};\n\nexport default m2cContentConstructor;\n"],"names":["template"],"mappings":"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"}