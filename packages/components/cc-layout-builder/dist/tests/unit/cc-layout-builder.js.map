{"version":3,"file":null,"sources":["../../../../action-button/src/action-button.ts","../../../../cc-component-adder/src/cc-component-adder.ts","../../../../cc-component-actions/src/cc-component-actions.ts","../../../../cc-component-placeholder/src/cc-component-placeholder.ts","../../../src/cc-layout-builder.ts","../../../src/tests/unit/cc-layout-builder.ts"],"sourcesContent":["/**\n * Action button component version.\n * Small component that allows to set it's content.\n *\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst actionButton: vuejs.ComponentOption = {\n    template: `<button class=\"action-button {{ class }}\" @click=\"onClick\">\n        <slot></slot>\n    </button>`,\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: ''\n        },\n        iconId: {\n            type: String\n        },\n        iconClasses: {\n            type: String\n        }\n    },\n    methods: {\n        /**\n         * Button click handler.\n         * This handler triggers \"action-button__click\" event up the DOM chain when called.\n         * @param {Event} event Click event object.\n         */\n        onClick: function ( event: Event ): void {\n            this.$dispatch( 'action-button__click', event );\n        }\n    }\n};\n\nexport default actionButton;\n","/**\n * Component controller component.\n * This component is responsible for displaying annd handling component adding button\n * @type {vuejs.ComponentOption} Vue component object.\n */\n\nconst componentAdder: vuejs.ComponentOption = {\n    template: `<section class=\"cc-component-adder | {{ class }}\">\n        <div class=\"cc-component-adder__button-create\" @click=\"onCreateComponent\">\n            <slot></slot>\n        </div>\n    </section>`,\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: String,\n            default: '',\n            coerce: function ( value: string ): string {\n                return value.replace( 'cc-component-adder', '' );\n            }\n        },\n        /**\n         * Property containing callback triggered when user clicks \"add component\" button.\n         */\n        createComponent: {\n            type: Function\n        }\n    },\n    methods: {\n        /**\n         * \"Add component\" button click handler.\n         * This handler triggers \"cc-component-adder__create-component\" event up the DOM chain when called.\n         * @param {Event} event Click event object.\n         */\n        onCreateComponent: function( event: Event ): void {\n            this.$dispatch( 'cc-component-adder__create-component', event );\n            if ( typeof this.createComponent === 'function' ) {\n                this.createComponent( event );\n            }\n        }\n    }\n};\n\nexport default componentAdder;\n","import actionButton from '../../action-button/src/action-button.ts';\n\n/**\n * Component actions component.\n * This component is responsible for displaying and handling user interactions of\n * side utility navigation for each component that supports:\n * - Moving component up,\n * - Moving component down,\n * - Opening component settings,\n * - Deleting component.\n *\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst componentActions: vuejs.ComponentOption = {\n    template: `<aside class=\"cc-component-actions | {{ class }}\">\n        <div class=\"cc-component-actions__top\">\n            <slot name=\"cc-component-actions__top\"></slot>\n        </div>\n        <div class=\"cc-component-actions__bottom\">\n            <slot name=\"cc-component-actions__bottom\"></slot>\n        </div>\n    </aside>`,\n    components: {\n        'action-button': actionButton\n    },\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: String,\n            default: '',\n            coerce: ( value: String ): String => value.replace( 'cc-component-actions', '' )\n        },\n        /**\n         * Property containing callback triggered when user clicks move up button.\n         */\n        moveUp: {\n            type: Function\n        },\n        /**\n         * Property containing callback triggered when user clicks move down button.\n         */\n        moveDown: {\n            type: Function\n        },\n        /**\n         * Property containing callback triggered when user clicks settings button.\n         */\n        openSettings: {\n            type: Function\n        },\n        /**\n         * Property containing callback triggered when user clicks delete button.\n         */\n        deleteComponent: {\n            type: Function\n        }\n    },\n    methods: {\n        /**\n         * Move up button click handler.\n         * This handler triggers \"cc-component-actions__move-up\" event up the DOM chain when called.\n         * @param {Event} event Click event object.\n         */\n        onMoveUp: function ( event: Event ): void {\n            this.$dispatch( 'cc-component-actions__move-up', event );\n            if ( typeof this.moveUp === 'function' ) {\n                this.moveUp( event );\n            }\n        },\n        /**\n         * Move down button click handler.\n         * This handler triggers \"cc-component-actions__move-down\" event up the DOM chain when called.\n         * @param {Event} event Click event object.\n         */\n        onMoveDown: function ( event: Event ): void {\n            this.$dispatch( 'cc-component-actions__move-down', event );\n            if ( typeof this.moveDown === 'function' ) {\n                this.moveDown( event );\n            }\n        },\n        /**\n         * Settings button click handler.\n         * This handler triggers \"cc-component-actions__open-settings\" event up the DOM chain when called.\n         * @param {Event} event Click event object.\n         */\n        onOpenSettings: function ( event: Event ): void {\n            this.$dispatch( 'cc-component-actions__open-settings', event );\n            if ( typeof this.openSettings === 'function' ) {\n                this.openSettings( event );\n            }\n        },\n        /**\n         * Delete button click handler.\n         * This handler triggers \"cc-component-actions__delete-component\" event up the DOM chain when called.\n         * @param {Event} event Click event object.\n         */\n        onDeleteComponent: function ( event: Event ): void {\n            this.$dispatch( 'cc-component-actions__delete-component', event );\n            if ( typeof this.deleteComponent === 'function' ) {\n                this.deleteComponent( event );\n            }\n        }\n    }\n};\n\nexport default componentActions;\n","/**\n * Component placeholder component.\n */\nconst componentPlaceholder = {\n    template: `<div class=\"cc-component-placeholder\">\n        <div class=\"cc-component-placeholder__content\">\n            <slot></slot>\n        </div>\n    </div>`\n};\n\nexport default componentPlaceholder;\n","import actionButton from '../../action-button/src/action-button';\nimport componentAdder from '../../cc-component-adder/src/cc-component-adder';\nimport componentActions from '../../cc-component-actions/src/cc-component-actions';\nimport componentPlaceholder from '../../cc-component-placeholder/src/cc-component-placeholder';\n\nimport template from './cc-layout-builder.tpl';\n\n/**\n * Single component information interface.\n */\ninterface IComponentInformation {\n    name: string;\n    id: string;\n    settings: any;\n}\n\n/**\n * Layout builder component.\n * This component is responsible for displaying and handling user interactions of\n * entire Content Constructor\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst layoutBuilder: vuejs.ComponentOption = {\n    template: template,\n    /**\n     * Get dependencies\n     */\n    components: {\n        'action-button': actionButton,\n        'cc-component-adder': componentAdder,\n        'cc-component-actions': componentActions,\n        'cc-component-placeholder': componentPlaceholder\n    },\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: ''\n        },\n        /**\n         * Callback invoked when edit component button is clicked.\n         * This function should take IComponentInformation and return changed version of it.\n         * If callback returns falsy value then component isn't changed.\n         */\n        editComponent: {\n            type: Function,\n            default: ( componentInfo: IComponentInformation ): IComponentInformation => componentInfo\n        },\n        /**\n         * Callback invoked when edit component button is clicked.\n         * This function should return IComponentInformation.\n         * If callback returns falsy value then component isn't added.\n         */\n        addComponent: {\n            type: Function,\n            default: (): IComponentInformation => undefined\n        }\n    },\n    data: function(): any {\n        return {\n            addedComponents: []\n        };\n    },\n    methods: {\n        /**\n         * Sets provided component information on current index in components array.\n         * If component exists on given index then this compoennt will be inserted before it.\n         * @param {number}                index         Component index in components array.\n         * @param {IComponentInformation} componentInfo Component information.\n         */\n        addComponentInformation: function( index: number, componentInfo: IComponentInformation ): void {\n            if ( componentInfo ) {\n                this.addedComponents.splice( index, 0, componentInfo );\n            }\n        },\n        /**\n         * Sets provided component information on current index in components array.\n         * If component exists on given index then it will be overwritten.\n         * @param {number}                index         Component index in components array.\n         * @param {IComponentInformation} componentInfo Component information.\n         */\n        setComponentInformation: function( index: number, componentInfo: IComponentInformation ): void {\n            if ( componentInfo ) {\n                this.addedComponents.$set( index, componentInfo );\n            }\n        },\n        /**\n         * Creates new component and adds it to a specified index.\n         * This function calls callback specified by \"add-component\" property that\n         * should return IComponentInformation.\n         * If callback returns falsy value then component isn't added.\n         * @param {number} index New component's index in components array.\n         */\n        createNewComponent: function ( index: number ): void {\n            /**\n             * To allow both sync and async set of new component data we call\n             * provided handler with callback function.\n             * If handler doesn't return component information then it can still\n             * set it using given callback.\n             */\n            const componentInfo: IComponentInformation = this.addComponent(\n                ( asyncComponentInfo: IComponentInformation ): void => {\n                    this.addComponentInformation( index, asyncComponentInfo );\n                }\n            );\n            this.addComponentInformation( index, componentInfo );\n        },\n        /**\n         * Initializes edit mode of component.\n         * This function invokes callback given by \"edit-component\" callback that\n         * should take current IComponentInformation as param and return changed version of it.\n         * If callback returns falsy value then component isn't changed.\n         * @param {string} index: Component's index in array.\n         */\n        editComponentSettings: function( index: number ): void {\n            // Create a static, non-reactive copy of component data.\n            let componentInfo: IComponentInformation = JSON.parse(\n                JSON.stringify( this.addedComponents[ index ] )\n            );\n            /**\n             * To allow both sync and async set of new component data we call\n             * provided handler with current component data and callback function.\n             * If handler doesn't return component information then it can still\n             * set it using given callback.\n             */\n            componentInfo = this.editComponent(\n                componentInfo,\n                ( asyncComponentInfo: IComponentInformation ): void => {\n                    this.setComponentInformation( index, asyncComponentInfo );\n                }\n            );\n            this.setComponentInformation( index, componentInfo );\n        },\n        /**\n         * Moves component under given index up by swaping it with previous element.\n         * @param {number} index Component's index in array.\n         */\n        moveComponentUp: function( index: number ): void {\n            if ( index > 0 ) {\n                let previousComponent: IComponentInformation = this.addedComponents[ index - 1 ];\n                this.addedComponents.$set( index - 1, this.addedComponents[ index ] );\n                this.addedComponents.$set( index, previousComponent );\n            }\n        },\n        /**\n         * Moves component under given index down by swaping it with next element.\n         * @param {number} index Component's index in array.\n         */\n        moveComponentDown: function( index: number ): void {\n            if ( index < this.addedComponents.length - 1 ) {\n                let previousComponent: IComponentInformation = this.addedComponents[ index + 1 ];\n                this.addedComponents.$set( index + 1, this.addedComponents[ index ] );\n                this.addedComponents.$set(  index, previousComponent );\n            }\n        },\n        /**\n         * Removes component and adder that is right after component from the DOM\n         * @param {number} index Component's index in array.\n         */\n        deleteComponent: function( index: number ): void {\n             if ( confirm( `Are you sure you want to remove this component?` ) ) {\n                this.addedComponents.splice( index, 1 );\n            }\n        },\n        /**\n         * Tells if component with given index is the first component.\n         * @param  {number}  index Index of the component.\n         * @return {boolean}       If component is first in array.\n         */\n        isFirstComponent: function( index: number ): boolean {\n            return index === 0;\n        },\n        /**\n         * Tells if component with given index is the last component.\n         * @param  {number}  index Index of the component.\n         * @return {boolean}       If component is last in array.\n         */\n        isLastComponent: function( index: number ): boolean {\n            return index === this.addedComponents.length - 1;\n        }\n    },\n};\n\nexport default layoutBuilder;\nexport { layoutBuilder, IComponentInformation };\n","import component from '../../cc-layout-builder';\n\ndescribe( 'Component controller object.', function(): void {\n    const methods: any = component.methods;\n    const props: any = component.props;\n\n    it( 'has a create new component method.', function(): void {\n        expect( typeof methods.createNewComponent ).toBe( 'function' );\n    } );\n\n    it( 'has a move component up method.', function(): void {\n        expect( typeof methods.moveComponentUp ).toBe( 'function' );\n    } );\n\n    it( 'has a move component down method.', function(): void {\n        expect( typeof methods.moveComponentDown ).toBe( 'function' );\n    } );\n\n    it( 'has a delete component method.', function(): void {\n        expect( typeof methods.deleteComponent ).toBe( 'function' );\n    } );\n\n    it( 'has a class property.', function(): void {\n        expect( props.class ).toEqual( jasmine.anything() );\n    } );\n\n    it( 'has an edit component property.', function(): void {\n        expect( props.editComponent ).toEqual( jasmine.anything() );\n    } );\n\n    it( 'has an add component property.', function(): void {\n        expect( props.addComponent ).toEqual( jasmine.anything() );\n    } );\n});\n"],"names":["component"],"mappings":"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"}