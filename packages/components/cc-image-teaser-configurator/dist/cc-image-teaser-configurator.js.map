{"version":3,"file":null,"sources":["../src/cc-image-teaser-configurator.ts"],"sourcesContent":["\n/**\n * Single component information object.\n */\ninterface IComponentInformation {\n    type: string;\n    /**\n     * Component ID\n     * @type {string}\n     */\n    id: string;\n    /**\n     * component data values from inputs\n     * @type {string}\n     */\n    data: Object;\n}\n\n/**\n * Components information object that should be returned by AJAX call to API.\n */\ninterface IComponentsInformation {\n    components: IComponentInformation[];\n}\n\n/**\n * Image teaser configurator component.\n * This component is responsible for displaying image teaser's configuration form\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccImageTeaserConfigurator: vuejs.ComponentOption = {\n    template: `<form class=\"cc-image-teaser-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\n        <section class=\"cc-image-teaser-configurator__section\">\n            <div class=\"cs-input cs-input--type-inline\">\n                <label for=\"cfg-it-width\" class=\"cs-input__label\">Teaser width:</label>\n                <select name=\"cfg-it-width-select\" class=\"cs-input__select\" id=\"cfg-it-width\" v-model=\"configuration.teaserWidth\" @change=\"onChange\">\n                    <option value=\"full-width\" selected>Full browser width</option>\n                    <option value=\"limited-width\">Breaking point width (1280px)</option>\n                </select>\n            </div>\n            <div class=\"cs-input cs-input--type-inline\">\n                <label for=\"cfg-it-images-per-slide\" class=\"cs-input__label\">Images per slide:</label>\n                <select name=\"cfg-it-images-per-slide\" class=\"cs-input__select\" id=\"cfg-it-images-per-slide\" v-model=\"configuration.itemsPerSlide\" @change=\"onChange\">\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                    <option value=\"6\">6</option>\n                    <option value=\"7\">7</option>\n                    <option value=\"8\">8</option>\n                    <option value=\"9\">9</option>\n                </select>\n            </div>\n        </section>\n\n        <section class=\"cc-image-teaser-configurator__section\">\n            <div class=\"cc-image-teaser-configurator__teaser\">\n                <template v-for=\"item in configuration.items\">\n                    <div class=\"cc-image-teaser-configurator__teaser-item\" id=\"cc-image-teaser-item-{{ $index }}\">\n                        <div class=\"cc-image-teaser-configurator__toolbar\">\n                            <span class=\"cc-image-teaser-configurator__teaser-item-title\">Banner {{ $index+1 }}/{{ configuration.items.length }}</span>\n                            <a href=\"#\" class=\"cc-image-teaser-configurator__upload-link href=\"#\">Upload image</a>\n                        </div>\n                        <div class=\"cc-image-teaser-configurator__image-holder-outer\">\n                            <div class=\"cc-image-teaser-configurator__image-holder-inner\">\n                                <input type=\"hidden\" value=\"\" class=\"cc-image-teaser-configurator__image-url\" v-model=\"configuration.items[$index].image\" @change=\"onChange\"> \n                            </div>\n                        </div>\n                        <div class=\"cs-input cs-input--type-required\">\n                            <label for=\"cfg-it-teaser{{ $index+1 }}-headline\" class=\"cs-input__label\">Headline:</label>\n                            <input type=\"text\" v-model=\"configuration.items[$index].headline\" id=\"cfg-it-teaser{{ $index+1 }}-headline\" class=\"cs-input__input\" @change=\"onChange\">\n                        </div>\n                        <div class=\"cs-input cs-input--type-required\">\n                            <label for=\"cfg-it-teaser{{ $index+1 }}-paragraph\" class=\"cs-input__label\">Paragraph:</label>\n                            <textarea type=\"text\" v-model=\"configuration.items[$index].paragraph\" id=\"cfg-it-teaser{{ $index+1 }}-paragraph\" class=\"cs-input__textarea cs-input__textarea--look-thin\" @change=\"onChange\" placeholder=\"(max 200 characters)\" maxlength=\"200\"></textarea>\n                        </div>\n                        <div class=\"cs-input\">\n                            <label for=\"cfg-it-teaser{{ $index+1 }}-cta-label\" class=\"cs-input__label\">CTA label:</label>\n                            <input type=\"text\" v-model=\"configuration.items[$index].ctaLabel\" id=\"cfg-it-teaser{{ $index+1 }}-cta-label\" class=\"cs-input__input\" @change=\"onChange\">\n                        </div>\n                        <div class=\"cs-input\">\n                            <label for=\"cfg-it-teaser{{ $index+1 }}-cta-target\" class=\"cs-input__label\">CTA target link:</label>\n                            <input type=\"text\" v-model=\"item.ctaTarget\" id=\"cfg-it-teaser{{ $index+1 }}-cta-target\" class=\"cs-input__input\" @change=\"onChange\">\n                        </div>\n                    </div>\n                </template>\n            </div>\n        </section>\n\n        <section class=\"cc-image-teaser-configurator__section cc-image-teaser-configurator__section--type-actions\">\n            <button type=\"submit\">Save</button>\n        </section>\n    </form>`,\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: '',\n        },\n        /**\n         * Property containing callback triggered when user saves component.\n         */\n        save: {\n            type: Function,\n        },\n        /**\n         * Property containing callback triggered when configuration is changed.\n         */\n        change: {\n            type: Function,\n        },\n        /**\n         * Single's component configuration \n         */\n        configuration: {\n            type: Object,\n            default(): Object {\n                return {\n                    teaserWidth: 'full-width',\n                    items: [\n                        {\n                            image: '',\n                            headline: '',\n                            paragraph: '',\n                            ctaLabel: 'More',\n                            ctaTarget: '',\n                        },\n                        {\n                            image: '',\n                            headline: '',\n                            paragraph: '',\n                            ctaLabel: 'More',\n                            ctaTarget: '',\n                        },\n                        {\n                            image: '',\n                            headline: '',\n                            paragraph: '',\n                            ctaLabel: 'More',\n                            ctaTarget: '',\n                        },\n                    ],\n                };\n            },\n        },\n    },\n    methods: {\n        onSave( event: Event ): void {\n            const data: any = JSON.parse( JSON.stringify( this.configuration ) );\n\n            this.$dispatch( 'cc-image-teaser-configurator__save', data );\n\n            if ( typeof this.save === 'function' ) {\n                this.save( data );\n            }\n        },\n        updateConfig(): void {\n            const data: any = JSON.parse( JSON.stringify( this.configuration ) );\n\n            this.$dispatch( 'cc-image-teaser-configurator__change', data );\n\n            if ( typeof this.change === 'function' ) {\n                this.change( data );\n            }\n        },\n        onChange( event: Event ): void {\n            this.updateConfig();\n        },\n    },\n};\n\nexport default ccImageTeaserConfigurator;\n"],"names":[],"mappings":";;;;;;AAyBA;;;;;AAKA,IAAM,yBAAyB,GAA0B;IACrD,QAAQ,EAAE,urJA8DF;IACR,KAAK,EAAE;;;;QAIH,KAAK,EAAE;YACH,IAAI,EAAE,CAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAE;YAC/B,OAAO,EAAE,EAAE;SACd;;;;QAID,IAAI,EAAE;YACF,IAAI,EAAE,QAAQ;SACjB;;;;QAID,MAAM,EAAE;YACJ,IAAI,EAAE,QAAQ;SACjB;;;;QAID,aAAa,EAAE;YACX,IAAI,EAAE,MAAM;YACZ,OAAO;gBACH,OAAO;oBACH,WAAW,EAAE,YAAY;oBACzB,KAAK,EAAE;wBACH;4BACI,KAAK,EAAE,EAAE;4BACT,QAAQ,EAAE,EAAE;4BACZ,SAAS,EAAE,EAAE;4BACb,QAAQ,EAAE,MAAM;4BAChB,SAAS,EAAE,EAAE;yBAChB;wBACD;4BACI,KAAK,EAAE,EAAE;4BACT,QAAQ,EAAE,EAAE;4BACZ,SAAS,EAAE,EAAE;4BACb,QAAQ,EAAE,MAAM;4BAChB,SAAS,EAAE,EAAE;yBAChB;wBACD;4BACI,KAAK,EAAE,EAAE;4BACT,QAAQ,EAAE,EAAE;4BACZ,SAAS,EAAE,EAAE;4BACb,QAAQ,EAAE,MAAM;4BAChB,SAAS,EAAE,EAAE;yBAChB;qBACJ;iBACJ,CAAC;aACL;SACJ;KACJ;IACD,OAAO,EAAE;QACL,MAAM,YAAE,KAAY;YAChB,IAAM,IAAI,GAAQ,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,SAAS,CAAE,IAAI,CAAC,aAAa,CAAE,CAAE,CAAC;YAErE,IAAI,CAAC,SAAS,CAAE,oCAAoC,EAAE,IAAI,CAAE,CAAC;YAE7D,IAAK,OAAO,IAAI,CAAC,IAAI,KAAK,UAAW,EAAE;gBACnC,IAAI,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;aACrB;SACJ;QACD,YAAY;YACR,IAAM,IAAI,GAAQ,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,SAAS,CAAE,IAAI,CAAC,aAAa,CAAE,CAAE,CAAC;YAErE,IAAI,CAAC,SAAS,CAAE,sCAAsC,EAAE,IAAI,CAAE,CAAC;YAE/D,IAAK,OAAO,IAAI,CAAC,MAAM,KAAK,UAAW,EAAE;gBACrC,IAAI,CAAC,MAAM,CAAE,IAAI,CAAE,CAAC;aACvB;SACJ;QACD,QAAQ,YAAE,KAAY;YAClB,IAAI,CAAC,YAAY,EAAE,CAAC;SACvB;KACJ;CACJ,CAAC,AAEF;;;;"}