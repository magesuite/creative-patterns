{"version":3,"sources":["../../../utilities/breakpoint/src/breakpoint.scss","../../../utilities/breakpoint/node_modules/include-media/dist/_include-media.scss","grid-layout.scss","demo/index.scss","../../grid-product/src/grid-product.scss"],"names":[],"mappings":"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","file":"demo/index.css","sourcesContent":["// Breakpoint\n// Utility for sharing breakpoints between CSS and JS.\n//\n// See http://warpspire.com/kss/ for documentation guidelines.\n// Version 0.0.1\n\n/**\n * Default project breakpoints, can be overwritten by setting a variable with the same name\n * before importing this file.\n */\n$breakpoints: (\n    phone: 23.13em,   // 370px\n    phone-lg: 30em,   // 480px\n    tablet: 48em,     // 768px\n    laptop: 64em,     // 1024px\n    laptop-lg: 80em,  // 1280px\n    desktop: 90em,    // 1440px\n    tv: 120em         // 1920px\n) !default;\n\n@import '../node_modules/include-media/dist/include-media';\n\n/**\n * These atom is responsible for setting aprropriate :before and :after content to body\n * so that its JS counterpart can read and return current breakpoint to other\n * scripts.\n */\nbody {\n    /* stylelint-disable string-no-newline */\n    &:before {\n        // Keys will be converted from dash-case to camelCase in JS object.\n        content: '{\n            \"phone\": 370,\n            \"phone-lg\": 480,\n            \"tablet\": 768,\n            \"laptop\": 1024,\n            \"laptop-lg\": 1280,\n            \"desktop\": 1440,\n            \"tv\": 1920\n        }';\n        display: none;\n    }\n    /* stylelint-enable */\n\n    &:after {\n        content: '370';\n        display: none;\n\n        @include media( '>=phone-lg' ) {\n            content: '480';\n        }\n\n        @include media( '>=tablet' ) {\n            content: '768';\n        }\n\n        @include media( '>=laptop' ) {\n            content: '1024';\n        }\n\n        @include media( '>=laptop-lg' ) {\n            content: '1280';\n        }\n\n        @include media( '>=desktop' ) {\n            content: '1440';\n        }\n\n        @include media( '>=tv' ) {\n            content: '1920';\n        }\n    }\n}\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      // scss-lint:disable SpaceAroundOperator\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  // scss-lint:disable SpaceAroundOperator\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","@import '../../../utilities/breakpoint/src/breakpoint';\n\n/**\n * @param $bricksPerRow {map} - this map variable informs component how many columns there is in single row.\n *                              Must have all specified breakpoints in project, and their keys must much\n *                              keys of $breakpoint variable. Example:\n *              $bricksPerRow: (\n *                  phone: 1,\n *                  phone-lg: 2,\n *                  tablet: 3,\n *                  laptop: 4,\n *                  laptop-lg: 4,\n *                  desktop: 5,\n *                  tv: 6\n *              );\n *\n * @param $bricksHeight {map} - this map variable informs about height of single grid item. \n *                              Unfortunately this has to be specified for browser that do not support CSS Grid Layout.\n *                              The thing is that as a fallback we use floats (flexbox won't work) and for tiles (teasers, hero product) that is displayed in 2 rows this mixin has to know the height of single tile (1x1 size).\n *                              Just like previously keys have to match breakpoint object key-names and each breakpoint has to be defined:\n *              $bricksHeight: (\n *                  phone: 379px,\n *                  phone-lg: 379px,\n *                  tablet: 443px,\n *                  laptop: 443px,\n *                  laptop-lg: 443px,\n *                  desktop: 443px,\n *                  tv: 443px\n *              );\n *\n * @param $padding {in px} - defines gap between columns and rows (default value is 10px)\n */\n@mixin gridLayout( $bricksPerRow, $bricksHeight, $padding: 10px ) {\n    $root: &;\n\n    @if $padding > 0 {\n        margin-left: -#{$padding};\n        margin-right: -#{$padding};\n    }\n\n    &__grid {\n        margin: 0;\n        padding: 0;\n        list-style: none;\n    }\n\n    &__teaser {\n        max-height: 100%;\n        max-width: 100%;\n        overflow: hidden;\n\n        &-image {\n            height: 100%;\n        }\n    }\n\n    &__brick {\n        width: calc( 100% / #{ map-get( $bricksPerRow, phone ) } );\n        margin: 0;\n        position: relative;\n        padding: $padding;\n        box-sizing: border-box;\n        float: left;\n        height: map-get( $bricksHeight, phone ) + 2 * $padding;\n\n        &--right {\n            float: right;\n        }\n\n        &--hidden {\n            display: none !important;\n        }\n\n        @include media( '>=phone-lg' ) {\n            width: calc( 100% / #{ map-get( $bricksPerRow, phone-lg ) } );\n            height: map-get( $bricksHeight, phone-lg ) + 2 * $padding;\n\n            &--x2 {\n                width: calc( 100% / #{ map-get( $bricksPerRow, phone-lg ) } * 2 );\n            }\n\n            &--y2 {\n                height: 2 * map-get( $bricksHeight, phone-lg ) + 4 * $padding;\n            }\n        }\n\n        @include media( '>=tablet' ) {\n            width: calc( 100% / #{ map-get( $bricksPerRow, tablet ) } );\n            height: map-get( $bricksHeight, tablet ) + 2 * $padding;\n\n            &--x2 {\n                width: calc( 100% / #{ map-get( $bricksPerRow, tablet ) } * 2 );\n            }\n\n            &--y2 {\n                height: 2 * map-get( $bricksHeight, tablet ) + 4 * $padding;\n\n                &#{$root}__brick--left,\n                &#{$root}__brick--hero {\n                    float: left;\n                }\n            }\n        }\n\n        @include media( '>=laptop' ) {\n            width: calc( 100% / #{ map-get( $bricksPerRow, laptop ) } );\n            height: map-get( $bricksHeight, laptop ) + 2 * $padding;\n\n            &--x2 {\n                width: calc( 100% / #{ map-get( $bricksPerRow, laptop ) } * 2 );\n            }\n\n            &--y2 {\n                height: 2 * map-get( $bricksHeight, laptop ) + 4 * $padding;\n            }\n        }\n\n        @include media( '>=laptop-lg' ) {\n            width: calc( 100% / #{ map-get( $bricksPerRow, laptop-lg ) } );\n            height: map-get( $bricksHeight, laptop-lg ) + 2 * $padding;\n\n            &--x2 {\n                width: calc( 100% / #{ map-get( $bricksPerRow, laptop-lg ) } * 2 );\n            }\n\n            &--y2 {\n                height: 2 * map-get( $bricksHeight, laptop-lg ) + 4 * $padding;\n            }\n        }\n\n        @include media( '>=desktop' ) {\n            width: calc( 100% / #{ map-get( $bricksPerRow, desktop ) } );\n            height: map-get( $bricksHeight, desktop ) + 2 * $padding;\n\n            &--x2 {\n                width: calc( 100% / #{ map-get( $bricksPerRow, desktop ) } * 2 );\n            }\n\n            &--y2 {\n                height: 2 * map-get( $bricksHeight, desktop ) + 4 * $padding;\n            }\n        }\n\n        @include media( '>=tv' ) {\n            width: calc( 100% / #{ map-get( $bricksPerRow, tv ) } );\n            height: map-get( $bricksHeight, tv ) + 2 * $padding;\n\n            &--x2 {\n                width: calc( 100% / #{ map-get( $bricksPerRow, tv ) } * 2 );\n            }\n\n            &--y2 {\n                height: 2 * map-get( $bricksHeight, tv ) + 4 * $padding;\n            }\n        }\n\n        @include media( '<tablet' ) {\n            &--hero {\n                width: calc( 100% / #{ map-get( $bricksPerRow, phone-lg ) } );\n                height: map-get( $bricksHeight, phone-lg ) + 2 * $padding;\n            }\n        }\n\n        @include media( '<phone-lg' ) {\n            &--hero {\n                width: calc( 100% / #{ map-get( $bricksPerRow, phone ) } );\n                height: map-get( $bricksHeight, phone ) + 2 * $padding;\n            }\n        }\n    }\n\n    @supports ( display: grid ) and ( not( display: -ms-grid ) ) {\n        &__grid {\n            display: grid;\n            grid-template-columns: repeat( #{ map-get( $bricksPerRow, phone ) }, 1fr );\n            grid-template-rows: auto;\n\n            @include media( '>=phone-lg' ) {\n                grid-template-columns: repeat( #{ map-get( $bricksPerRow, phone-lg ) }, 1fr );\n            }\n\n            @include media( '>=tablet' ) {\n                grid-template-columns: repeat( #{ map-get( $bricksPerRow, tablet ) }, 1fr );\n            }\n\n            @include media( '>=laptop' ) {\n                grid-template-columns: repeat( #{ map-get( $bricksPerRow, laptop ) }, 1fr );\n            }\n\n            @include media( '>=laptop-lg' ) {\n                grid-template-columns: repeat( #{ map-get( $bricksPerRow, laptop-lg ) }, 1fr );\n            }\n\n            @include media( '>=desktop' ) {\n                grid-template-columns: repeat( #{ map-get( $bricksPerRow, desktop ) }, 1fr );\n            }\n\n            @include media( '>=tv' ) {\n                grid-template-columns: repeat( #{ map-get( $bricksPerRow, tv ) }, 1fr );\n            }\n        }\n\n        @include media( '>=phone-lg' ) {\n            &__brick {\n                width: auto;\n                display: grid;\n                align-items: stretch;\n\n                &--right {\n                    float: none;\n                }\n\n                &--x2 {\n                    width: auto;\n                    grid-column-end: span 2;\n                }\n\n                &--y2 {\n                    grid-row-end: span 2;\n                }\n\n                &--teaser {\n                    display: none;\n\n                    &-ready {\n                        display: grid;\n                    }\n                }\n            }\n        }\n    }\n}\n","$namespace: 'cs-';\n@import '../../../grid-product/src/grid-product.scss';\n@import '../grid-layout.scss';\n\nhtml {\n    font-family: Open Sans, Arial, sans-serif;\n    background: #f0f0f0;\n}\n\nhtml, body {\n    margin: 0;\n    padding: 0;\n}\n\n.container {\n    margin: 0 0 3rem;\n    padding: 0 10px;\n}\n\n.toggle-guidelines {\n    margin: 3rem 0;\n    padding: .6rem 2rem;\n    border: 1px solid #aaa;\n    background: transparent;\n    font-size: 1rem;\n    cursor: pointer;\n    border-radius: 4px;\n    font-family: Open Sans, Arial, sans-serif;\n    transition: background-color .15s linear;\n\n    &:hover,\n    &:focus,\n    &:active {\n        background-color: #fff;\n    }\n}\n\n.legend {\n    list-style: none;\n    margin: 0 0 3rem;\n    padding: 0;\n    display: none;\n\n    .guides & {\n        display: block;\n    }\n\n    li {\n        display: flex;\n        margin: 0 0 .5rem;\n        align-items: center;\n    }\n\n    span {\n        display: inline-block;\n        width: 1.5rem;\n        height: 1.5rem;\n        border: 1px solid #ddd;\n        border-radius: 2px;\n        margin-right: .5rem;\n    }\n\n    .grid-tile span { background: #e8e8e8; }\n    .product span { background: #fff; }\n}\n\n$bricksPerRow: (\n    phone: 1,\n    phone-lg: 2,\n    tablet: 3,\n    laptop: 4,\n    laptop-lg: 4,\n    desktop: 5,\n    tv: 6\n);\n\n$bricksHeight: (\n    phone: 379px,\n    phone-lg: 379px,\n    tablet: 443px,\n    laptop: 443px,\n    laptop-lg: 443px,\n    desktop: 443px,\n    tv: 443px\n);\n\n.#{$namespace}grid-layout {\n    @include gridLayout( $bricksPerRow, $bricksHeight, 5px );\n\n    &__brick {\n        .guides & {\n            background: #e8e8e8;\n            border: 1px solid #ddd;\n        }\n    }\n}\n\n.#{$namespace}grid-product {\n    @include gridProduct();\n}\n","@import '../../../utilities/breakpoint/src/breakpoint';\n\n@mixin gridProduct() {\n    $root: &;\n\n    padding: 0;\n    position: relative;\n    z-index: 2;\n    background-color: transparent;\n    box-sizing: border-box;\n\n    @include media( '>=laptop' ) {\n        &:before {\n            display: block;\n            position: absolute;\n            left: 0;\n            width: 100%;\n            z-index: -1;\n            background-color: #fff;\n            content: '';\n            height: 100%;\n            top: 0;\n            transition: box-shadow .15s ease-in-out;\n\n            #{$root}.no-transition & {\n                transition: none;\n            }\n        }\n\n        &--show-details {\n            z-index: 3;\n\n            &:before {\n                box-shadow: 1px 3px 3rem 0 rgba( 30, 48, 67, .34 );\n            }\n        }\n    }\n\n    &__main {\n        z-index: 2;\n        box-shadow: none;\n        background-color: #fff;\n        padding: 1rem;\n        transform: translate3d( 0, 0, 0 ); // Fixes z-index issue in Safari\n        transition: box-shadow .15s ease-in-out;\n\n        #{$root}.no-transition & {\n            transition: none;\n        }\n\n        @include media( '>=laptop' ) {\n            &:after {\n                display: block;\n                position: absolute;\n                bottom: 0;\n                left: 0;\n                width: 100%;\n                height: 0;\n                z-index: -1;\n                background-color: #fff;\n                content: '';\n\n                #{$root}--show-details & {\n                    height: 3rem;\n                }\n            }\n        }\n    }\n\n    &__addons {\n        width: 100%;\n        background-color: #fff;\n        text-align: center;\n        padding: 0 1rem .5rem;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        flex-wrap: wrap;\n        box-sizing: border-box;\n        position: absolute;\n        left: 0;\n        overflow: hidden;\n        z-index: -2;\n        opacity: 0;\n        transform: translateY( -100% );\n        transition: box-shadow .15s ease-in-out, transform .15s ease-in-out, opacity .15s ease-in-out;\n\n        #{$root}.no-transition & {\n            transition: none;\n        }\n\n        #{$root}--show-details & {\n            opacity: 1;\n            box-shadow: 1px 3px 3rem 0 rgba( 30, 48, 67, .34 );\n            transform: translateY( 0 );\n            z-index: -1;\n\n            &:after {\n                height: 3rem;\n            }\n        }\n\n        &__left,\n        &__right {\n            width: 50%;\n            box-sizing: border-box;\n            min-height: 1px;\n        }\n\n        &__left {\n            padding-left: 0;\n            padding-right: .5rem;\n            text-align: left;\n        }\n\n        &__right {\n            padding-right: 0;\n            padding-left: .5rem;\n            text-align: right;\n        }\n    }\n\n    &__addon {\n        padding: .5rem 0;\n        width: 100%;\n        box-sizing: border-box;\n\n        &--in-stock {\n            color: #008000;\n        }\n\n        &--out-of-stock {\n            color: #f00;\n        }\n    }\n\n    &__figure-wrapper,\n    &__name-link {\n        display: block;\n        text-align: center;\n\n        &:hover {\n            color: inherit;\n            text-decoration: none;\n        }\n\n        &:visited {\n            color: inherit;\n        }\n    }\n\n    &__figure-wrapper {\n        margin: -1rem -1rem 0;\n        padding: 1rem;\n    }\n\n    &__figure {\n        position: relative;\n        margin: 0;\n        height: 14rem;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n\n        @include media( '>=tablet' ) {\n            height: 18rem;\n        }\n    }\n\n    &__image {\n        max-height: 100%;\n        max-width: 100%;\n        width: auto;\n        flex-shrink: 0;\n    }\n\n    &__badges {\n        position: absolute;\n        top: 1rem;\n        left: 1rem;\n        list-style: none;\n        margin: 0;\n        padding: 0;\n    }\n\n    &__badge {\n        display: flex;\n        align-items: center;\n    }\n\n    $swatchesHeight: 1.375rem;\n    &__swatches {\n        display: flex;\n        justify-content: center;\n        height: $swatchesHeight;\n        margin-bottom: .75rem;\n\n        + #{$root}__name {\n            margin-top: 0;\n        }\n    }\n\n    $nameLineHeight: 1.265rem;\n    &__name {\n        margin-top: calc( #{$swatchesHeight} + .75rem );\n        margin-bottom: .5 * $nameLineHeight;\n        height: 2 * $nameLineHeight;\n        line-height: $nameLineHeight;\n        font-weight: 600;\n        overflow: hidden;\n    }\n\n    /* disabled because autoprefixer can't build this */\n    /* stylelint-disable value-no-vendor-prefix */\n    /* stylelint-disable property-no-vendor-prefix */\n    &__name-link {\n        text-overflow: -o-ellipsis-lastline;\n\n        @supports ( -webkit-line-clamp: 1 ) {\n            display: -webkit-box;\n            -webkit-line-clamp: 2;\n            -webkit-box-orient: vertical;\n            max-width: 100%;\n        }\n    }\n    /* stylelint-enable value-no-vendor-prefix */\n    /* stylelint-enable property-no-vendor-prefix */\n\n    &__price {\n        text-align: center;\n    }\n\n    &__comment {\n        margin-bottom: 1rem;\n\n        &-input {\n            max-height: 4rem;\n        }\n    }\n\n    &__stock {\n        margin: 0;\n    }\n\n    &__links {\n        list-style: none;\n        margin: 0;\n        padding: 0;\n    }\n\n    &__link-item {\n        display: inline-block;\n    }\n\n    &__remove {\n        position: absolute;\n        top: 1rem;\n        right: 1rem;\n        z-index: 2;\n    }\n\n    &--static {\n        padding: 1rem;\n        background-color: #fff;\n\n        #{$root}__main {\n            padding: 0;\n        }\n\n        #{$root}__addons {\n            position: relative;\n            transform: none;\n            opacity: 1;\n            height: auto;\n            transition: none;\n            box-shadow: none !important;\n            padding: .5rem 0 0;\n            margin-bottom: -.5rem;\n\n            &:after {\n                display: none !important;\n            }\n        }\n    }\n\n    &--in-carousel {\n        #{$root}__main {\n            width: 100%;\n            box-sizing: border-box;\n        }\n\n        #{$root}__addons {\n            top: 100%;\n        }\n    }\n\n    &--hidden {\n        #{$root}__main,\n        #{$root}__addons,\n        #{$root}:before {\n            visibility: hidden !important;\n        }\n    }\n}\n"],"sourceRoot":"/source/"}