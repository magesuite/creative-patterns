{"version":3,"file":null,"sources":["../../../src/class.notification.ts","../../../src/class.notifications.ts","../../../src/tests/unit/cs-notifications.ts"],"sourcesContent":["import $ from 'jQuery';\n\ninterface INotification {\n    getMessage(): string;\n    getType(): string;\n    remove(): void;\n    setType(type: INotificationType): void;\n    hide(hiddenClassName?: string): void;\n    show(): void;\n    getTemplate(): JQuery;\n}\n\ninterface INotificationSettings {\n    notificationHTML: string|JQuery;\n    textSelector: string|JQuery;\n    iconSelector?: string|JQuery;\n    onClose?(): any;\n    onAdd?(): any;\n}\n\ninterface INotificationType {\n    name: string;\n    iconHTML?: string;\n    textClass?: string;\n}\n\nclass Notification {\n    public message: string = null;\n\n    protected _type: INotificationType = {\n        name: 'default',\n        iconHTML: null,\n        textClass: null,\n    };\n\n    private _defaults: INotificationSettings = {\n        notificationHTML: null,\n        textSelector: null,\n        iconSelector: null,\n        onClose: null,\n        onAdd: null,\n    };\n\n    private _settings: INotificationSettings = null;\n\n    private _$template: JQuery = null;\n\n    // If once set hidden by adding class name, will store it and reuse it\n    private _hiddenClassName: string = null;\n\n    constructor(message: string, settings: INotificationSettings) {\n\n        this._settings = $.extend(this._defaults, settings);\n\n        this.message = message;\n    }\n\n    public getMessage(): string {\n        return this.message;\n    }\n\n    public getType(): string {\n        return this._type.name;\n    }\n\n    public remove(): void {\n        this._$template.remove();\n    }\n\n    public setType(type: INotificationType): void {\n        this._type = type;\n    }\n\n    public hide(className?: string): void {\n        if (className) {\n            this._$template.addClass(className);\n            this._hiddenClassName = className;\n\n        } else if (this._hiddenClassName) {\n            this._$template.addClass(this._hiddenClassName);\n\n        } else {\n            this._$template.hide();\n\n        }\n    }\n\n    public show(): void {\n        if (this._$template.hasClass(this._hiddenClassName)) {\n            this._$template.removeClass(this._hiddenClassName);\n        } else {\n            this._$template.show();\n        }\n    }\n\n    public getTemplate(): JQuery {\n        if (!this._$template) {\n            this._$template = this._compileTemplate();\n        }\n\n        return this._$template;\n    }\n\n    private _compileTemplate(): JQuery {\n        let $html: JQuery = $(this._settings.notificationHTML);\n        let $text: JQuery = $html.find(this._settings.textSelector);\n        let $iconPlaceholder: JQuery = null;\n\n        $text.text(this.message);\n        $text.addClass(this._type.textClass);\n\n        if (this._settings.iconSelector) {\n            $iconPlaceholder = $html.find(this._settings.iconSelector);\n            $iconPlaceholder.after(this._type.iconHTML);\n            $iconPlaceholder.remove();\n        }\n\n        this._$template = $html;\n\n        return $html;\n\n    }\n}\n\nexport {INotification, INotificationSettings, INotificationType, Notification};\n","import jQuery from 'jQuery';\n\n$ = jQuery;\n\nimport {Notification} from './class.notification';\n\ninterface INotificationsManager {\n    init(): void;\n    addNotification(notification: Notification): void;\n    removeNotification(notification: Notification): void;\n    getNotifications(): Notification[];\n\n}\n\ninterface INotificationsManagerSettings {\n    callback?: {\n        notificationAdded?(): any;\n        notificationRemoved?(): any;\n        notificationClosed?(): any;\n    };\n    $componentSelector: JQuery;\n    $closeComponentSelector?: JQuery;\n    deleteOnClose?: boolean;\n}\n\nclass NotificationsManager implements INotificationsManager {\n\n    private _defaults: INotificationsManagerSettings = {\n        callback: {\n            notificationAdded: null,\n            notificationRemoved: null,\n            notificationClosed: null,\n        },\n        $componentSelector: null,\n        $closeComponentSelector: null,\n    };\n\n    private _settings: INotificationsManagerSettings = null;\n\n    private _notificationsList: Notification[] = [];\n\n    constructor(settings: INotificationsManagerSettings) {\n\n        this._settings = $.extend(this._defaults, settings, true);\n\n    }\n\n    public init(): void {\n        this._bindEvents();\n    }\n\n    public addNotification(notification: Notification): void {\n\n        this._notificationsList.push(notification);\n\n        this._printNotification(notification.getTemplate());\n\n    }\n\n    public removeNotification(notification: Notification): void {\n\n        notification.remove();\n\n        let arrayPos: number = this._notificationsList.indexOf(notification);\n        this._notificationsList.splice(arrayPos, 1);\n\n        if (this._settings.callback.notificationRemoved) {\n            this._settings.callback.notificationRemoved();\n\n        }\n\n    }\n\n    public getNotifications(): Notification[] {\n        return this._notificationsList;\n    }\n\n    private _printNotification(template: HTMLElement|JQuery): void {\n        this._settings.$componentSelector.append(template);\n\n        if (this._settings.callback.notificationAdded) {\n            this._settings.callback.notificationAdded();\n\n        }\n\n    }\n\n    private _close(): void {\n        if (this._settings.callback.notificationClosed) {\n            this._settings.callback.notificationClosed();\n\n        }\n\n        if (this._settings.deleteOnClose) {\n            for (let notification: Notification of this._notificationsList) {\n                notification.remove();\n            }\n        }\n    }\n\n    private _bindEvents(): void {\n        if (this._settings.$closeComponentSelector) {\n            this._settings.$closeComponentSelector.on('click', (e: Event) => {\n                e.preventDefault();\n                this._close();\n\n            });\n\n        }\n\n    }\n}\n\nexport {INotificationsManager, INotificationsManagerSettings, NotificationsManager};\n","import $ from 'jQuery';\n\nimport {INotification, INotificationSettings, INotificationType, Notification} from '../../class.notification';\nimport {INotificationsManagerSettings, NotificationsManager} from '../../class.notifications';\n\nlet notificationConfig: INotificationSettings = {\n    notificationHTML: '<li class=\"cs-notifications__item\"><div class=\"cs-notifications__item-icon\"></div><span class=\"cs-notifications__item-text\"></span></li>',\n    textSelector: '.cs-notifications__item-text',\n    iconSelector: '.cs-notifications__item-icon',\n};\n\ndescribe('Single notification component', function (): void {\n    let singleNotification: INotification = null;\n    let notificationMessage: string = 'message';\n\n    beforeEach(() => {\n        singleNotification = new Notification(notificationMessage, notificationConfig);\n    });\n\n    afterEach(function (): void {\n        singleNotification.getTemplate().remove();\n    });\n\n    // Check if methods exist\n    it('has getMessage() method', () => {\n        expect(typeof singleNotification.getMessage).toBe('function');\n    });\n\n    it('has getType() method', () => {\n        expect(typeof singleNotification.getType).toBe('function');\n    });\n\n    it('has remove() method', () => {\n        expect(typeof singleNotification.remove).toBe('function');\n    });\n\n    it('has setType() method', () => {\n        expect(typeof singleNotification.setType).toBe('function');\n    });\n\n    it('has hide() method', () => {\n        expect(typeof singleNotification.hide).toBe('function');\n    });\n\n    it('has show() method', () => {\n        expect(typeof singleNotification.show).toBe('function');\n    });\n\n    it('has getTemplate() method', () => {\n        expect(typeof singleNotification.getTemplate).toBe('function');\n    });\n\n    // Check if return values of methods are correct\n\n    it('has getMessage() method returns string', () => {\n        expect(typeof singleNotification.getMessage()).toBe('string');\n    });\n\n    it('has getTemplate() method returns JQuery', () => {\n\n        expect(singleNotification.getTemplate().jquery).not.toBeUndefined();\n\n        // expect(singleNotification.getTemplate() instanceof jQuery).toBeTruthy();\n    });\n\n    // TODO Waitning for stack overflow because WTF!\n\n    // it('has getType() method returns string', () => {\n    //     expect(typeof singleNotification.getType()).toBe('string');\n    // });\n    //\n    // // Check behaviour\n    // it('is hidden after hide() method', () => {\n    //     // singleNotification.hide();\n    //     expect(singleNotification.getTemplate()).toBeHidden();\n    // });\n    //\n    // it('is hidden after show() method', () => {\n    //     // singleNotification.show();\n    //     expect(singleNotification.getTemplate()).toBeVisible();\n    // });\n    //\n    // it('sets class to < text > element of component after hide(className) method', () => {\n    //     let className: string = 'class';\n    //     // singleNotification.hide(className);\n    //\n    //     expect(singleNotification.getTemplate().find(notificationConfig.textSelector)).toHaveClass(className);\n    // });\n\n    it('allows to set custom type and returns it', () => {\n        let typeName: string = 'name';\n        let type: INotificationType = {\n            name: typeName,\n        };\n\n        singleNotification.setType(type);\n\n        expect(singleNotification.getType()).toBe(typeName);\n    });\n\n});\n\ndescribe('Notifications manager component', function (): void {\n    let $component: JQuery = $('<ul id=\"#notifications\"></ul>');\n\n    let notificationsManagerConfig: INotificationsManagerSettings = {\n        $componentSelector: $('#notifications'),\n        callback: {},\n    };\n\n    let NM: NotificationsManager = null;\n\n    beforeEach(function (): void {\n        $('body').append($component);\n\n        NM = new NotificationsManager(\n            notificationsManagerConfig,\n        );\n    });\n\n    // Check if methods exist\n    it('has init() method', () => {\n        expect(typeof NM.init).toBe('function');\n    });\n    it('has addNotification() method', () => {\n        expect(typeof NM.addNotification).toBe('function');\n    });\n    it('has removeNotification() method', () => {\n        expect(typeof NM.removeNotification).toBe('function');\n    });\n    it('has getNotifications() method', () => {\n        expect(typeof NM.getNotifications).toBe('function');\n    });\n\n    // Check if methods return proper value\n    it('getNotifications() method returns array', () => {\n        expect(NM.getNotifications()).toEqual(jasmine.any(Array));\n    });\n\n    // Check behaviour\n    it('getNotifications() method length should be 1 after single addNotification() method', () => {\n        NM.addNotification(new Notification('text', notificationConfig));\n\n        expect(NM.getNotifications().length).toEqual(1);\n    });\n\n    it('getNotifications() method length should be empty array after single addNotification() method and removeNotification()', () => {\n        let not: Notification = new Notification('text', notificationConfig);\n\n        NM.addNotification(not);\n        NM.removeNotification(not);\n\n        expect(NM.getNotifications().length).toEqual(0);\n    });\n\n    // Test callbacks\n\n    it('will trigger callback after adding new notification', (done: Function) => {\n\n        notificationsManagerConfig.callback.notificationAdded = function (): void {\n            done();\n        };\n\n        NM = new NotificationsManager(notificationsManagerConfig);\n\n        NM.addNotification(new Notification('text', notificationConfig));\n\n    });\n\n    it('will trigger callback after removing notification', (done: Function) => {\n\n        notificationsManagerConfig.callback.notificationRemoved = function (): void {\n            done();\n        };\n\n        NM = new NotificationsManager(notificationsManagerConfig);\n\n        let not: Notification = new Notification('text', notificationConfig);\n\n        NM.addNotification(not);\n        NM.removeNotification(not);\n\n    });\n\n});\n"],"names":["$","jQuery"],"mappings":";;;;;AA0BA;IAwBI,sBAAY,OAAe,EAAE,QAA+B;QAvBrD,YAAO,GAAW,IAAI,CAAC;QAEpB,UAAK,GAAsB;YACjC,IAAI,EAAE,SAAS;YACf,QAAQ,EAAE,IAAI;YACd,SAAS,EAAE,IAAI;SAClB,CAAC;QAEM,cAAS,GAA0B;YACvC,gBAAgB,EAAE,IAAI;YACtB,YAAY,EAAE,IAAI;YAClB,YAAY,EAAE,IAAI;YAClB,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,IAAI;SACd,CAAC;QAEM,cAAS,GAA0B,IAAI,CAAC;QAExC,eAAU,GAAW,IAAI,CAAC;;QAG1B,qBAAgB,GAAW,IAAI,CAAC;QAIpC,IAAI,CAAC,SAAS,GAAGA,GAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAEpD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;IAEM,iCAAU,GAAjB;QACI,OAAO,IAAI,CAAC,OAAO,CAAC;KACvB;IAEM,8BAAO,GAAd;QACI,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;KAC1B;IAEM,6BAAM,GAAb;QACI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;KAC5B;IAEM,8BAAO,GAAd,UAAe,IAAuB;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;KACrB;IAEM,2BAAI,GAAX,UAAY,SAAkB;QAC1B,IAAI,SAAS,EAAE;YACX,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACpC,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC;SAErC;aAAM,IAAI,IAAI,CAAC,gBAAgB,EAAE;YAC9B,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;SAEnD;aAAM;YACH,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;SAE1B;KACJ;IAEM,2BAAI,GAAX;QACI,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE;YACjD,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;SACtD;aAAM;YACH,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;SAC1B;KACJ;IAEM,kCAAW,GAAlB;QACI,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAClB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;SAC7C;QAED,OAAO,IAAI,CAAC,UAAU,CAAC;KAC1B;IAEO,uCAAgB,GAAxB;QACI,IAAI,KAAK,GAAWA,GAAC,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;QACvD,IAAI,KAAK,GAAW,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAC5D,IAAI,gBAAgB,GAAW,IAAI,CAAC;QAEpC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAErC,IAAI,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE;YAC7B,gBAAgB,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YAC3D,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC5C,gBAAgB,CAAC,MAAM,EAAE,CAAC;SAC7B;QAED,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAExB,OAAO,KAAK,CAAC;KAEhB;IACL,mBAAC;CAAA,IAAA,AAED;;AC1HA,CAAC,GAAGC,GAAM,CAAC;AAuBX;IAgBI,8BAAY,QAAuC;QAd3C,cAAS,GAAkC;YAC/C,QAAQ,EAAE;gBACN,iBAAiB,EAAE,IAAI;gBACvB,mBAAmB,EAAE,IAAI;gBACzB,kBAAkB,EAAE,IAAI;aAC3B;YACD,kBAAkB,EAAE,IAAI;YACxB,uBAAuB,EAAE,IAAI;SAChC,CAAC;QAEM,cAAS,GAAkC,IAAI,CAAC;QAEhD,uBAAkB,GAAmB,EAAE,CAAC;QAI5C,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;KAE7D;IAEM,mCAAI,GAAX;QACI,IAAI,CAAC,WAAW,EAAE,CAAC;KACtB;IAEM,8CAAe,GAAtB,UAAuB,YAA0B;QAE7C,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAE3C,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC,CAAC;KAEvD;IAEM,iDAAkB,GAAzB,UAA0B,YAA0B;QAEhD,YAAY,CAAC,MAAM,EAAE,CAAC;QAEtB,IAAI,QAAQ,GAAW,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACrE,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAE5C,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,mBAAmB,EAAE;YAC7C,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC;SAEjD;KAEJ;IAEM,+CAAgB,GAAvB;QACI,OAAO,IAAI,CAAC,kBAAkB,CAAC;KAClC;IAEO,iDAAkB,GAA1B,UAA2B,QAA4B;QACnD,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAEnD,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,iBAAiB,EAAE;YAC3C,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC;SAE/C;KAEJ;IAEO,qCAAM,GAAd;QACI,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,kBAAkB,EAAE;YAC5C,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,kBAAkB,EAAE,CAAC;SAEhD;QAED,IAAI,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE;YAC9B,KAAuC,UAAuB,EAAvB,KAAA,IAAI,CAAC,kBAAkB,EAAvB,cAAuB,EAAvB,IAAuB;gBAAzD,IAAI,YAAY,SAAc;gBAC/B,YAAY,CAAC,MAAM,EAAE,CAAC;aACzB;SACJ;KACJ;IAEO,0CAAW,GAAnB;QAAA,iBAUC;QATG,IAAI,IAAI,CAAC,SAAS,CAAC,uBAAuB,EAAE;YACxC,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,CAAQ;gBACxD,CAAC,CAAC,cAAc,EAAE,CAAC;gBACnB,KAAI,CAAC,MAAM,EAAE,CAAC;aAEjB,CAAC,CAAC;SAEN;KAEJ;IACL,2BAAC;CAAA,IAAA,AAED;;AC5GA,IAAI,kBAAkB,GAA0B;IAC5C,gBAAgB,EAAE,0IAA0I;IAC5J,YAAY,EAAE,8BAA8B;IAC5C,YAAY,EAAE,8BAA8B;CAC/C,CAAC;AAEF,QAAQ,CAAC,+BAA+B,EAAE;IACtC,IAAI,kBAAkB,GAAkB,IAAI,CAAC;IAC7C,IAAI,mBAAmB,GAAW,SAAS,CAAC;IAE5C,UAAU,CAAC;QACP,kBAAkB,GAAG,IAAI,YAAY,CAAC,mBAAmB,EAAE,kBAAkB,CAAC,CAAC;KAClF,CAAC,CAAC;IAEH,SAAS,CAAC;QACN,kBAAkB,CAAC,WAAW,EAAE,CAAC,MAAM,EAAE,CAAC;KAC7C,CAAC,CAAC;;IAGH,EAAE,CAAC,yBAAyB,EAAE;QAC1B,MAAM,CAAC,OAAO,kBAAkB,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KACjE,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE;QACvB,MAAM,CAAC,OAAO,kBAAkB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC9D,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE;QACtB,MAAM,CAAC,OAAO,kBAAkB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC7D,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE;QACvB,MAAM,CAAC,OAAO,kBAAkB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC9D,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE;QACpB,MAAM,CAAC,OAAO,kBAAkB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC3D,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE;QACpB,MAAM,CAAC,OAAO,kBAAkB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC3D,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE;QAC3B,MAAM,CAAC,OAAO,kBAAkB,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAClE,CAAC,CAAC;;IAIH,EAAE,CAAC,wCAAwC,EAAE;QACzC,MAAM,CAAC,OAAO,kBAAkB,CAAC,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACjE,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE;QAE1C,MAAM,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;;KAGvE,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;IA0BH,EAAE,CAAC,0CAA0C,EAAE;QAC3C,IAAI,QAAQ,GAAW,MAAM,CAAC;QAC9B,IAAI,IAAI,GAAsB;YAC1B,IAAI,EAAE,QAAQ;SACjB,CAAC;QAEF,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEjC,MAAM,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACvD,CAAC,CAAC;CAEN,CAAC,CAAC;AAEH,QAAQ,CAAC,iCAAiC,EAAE;IACxC,IAAI,UAAU,GAAWD,GAAC,CAAC,+BAA+B,CAAC,CAAC;IAE5D,IAAI,0BAA0B,GAAkC;QAC5D,kBAAkB,EAAEA,GAAC,CAAC,gBAAgB,CAAC;QACvC,QAAQ,EAAE,EAAE;KACf,CAAC;IAEF,IAAI,EAAE,GAAyB,IAAI,CAAC;IAEpC,UAAU,CAAC;QACPA,GAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAE7B,EAAE,GAAG,IAAI,oBAAoB,CACzB,0BAA0B,CAC7B,CAAC;KACL,CAAC,CAAC;;IAGH,EAAE,CAAC,mBAAmB,EAAE;QACpB,MAAM,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC3C,CAAC,CAAC;IACH,EAAE,CAAC,8BAA8B,EAAE;QAC/B,MAAM,CAAC,OAAO,EAAE,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KACtD,CAAC,CAAC;IACH,EAAE,CAAC,iCAAiC,EAAE;QAClC,MAAM,CAAC,OAAO,EAAE,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KACzD,CAAC,CAAC;IACH,EAAE,CAAC,+BAA+B,EAAE;QAChC,MAAM,CAAC,OAAO,EAAE,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KACvD,CAAC,CAAC;;IAGH,EAAE,CAAC,yCAAyC,EAAE;QAC1C,MAAM,CAAC,EAAE,CAAC,gBAAgB,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;KAC7D,CAAC,CAAC;;IAGH,EAAE,CAAC,oFAAoF,EAAE;QACrF,EAAE,CAAC,eAAe,CAAC,IAAI,YAAY,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC,CAAC;QAEjE,MAAM,CAAC,EAAE,CAAC,gBAAgB,EAAE,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;KACnD,CAAC,CAAC;IAEH,EAAE,CAAC,uHAAuH,EAAE;QACxH,IAAI,GAAG,GAAiB,IAAI,YAAY,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;QAErE,EAAE,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QACxB,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;QAE3B,MAAM,CAAC,EAAE,CAAC,gBAAgB,EAAE,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;KACnD,CAAC,CAAC;;IAIH,EAAE,CAAC,qDAAqD,EAAE,UAAC,IAAc;QAErE,0BAA0B,CAAC,QAAQ,CAAC,iBAAiB,GAAG;YACpD,IAAI,EAAE,CAAC;SACV,CAAC;QAEF,EAAE,GAAG,IAAI,oBAAoB,CAAC,0BAA0B,CAAC,CAAC;QAE1D,EAAE,CAAC,eAAe,CAAC,IAAI,YAAY,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC,CAAC;KAEpE,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,UAAC,IAAc;QAEnE,0BAA0B,CAAC,QAAQ,CAAC,mBAAmB,GAAG;YACtD,IAAI,EAAE,CAAC;SACV,CAAC;QAEF,EAAE,GAAG,IAAI,oBAAoB,CAAC,0BAA0B,CAAC,CAAC;QAE1D,IAAI,GAAG,GAAiB,IAAI,YAAY,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;QAErE,EAAE,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QACxB,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;KAE9B,CAAC,CAAC;CAEN,CAAC,CAAC;;"}