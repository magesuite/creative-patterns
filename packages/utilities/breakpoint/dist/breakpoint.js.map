{"version":3,"file":null,"sources":["../src/breakpoint.ts"],"sourcesContent":["/**\n * Breakpoint utility for sharing breakpoints between CSS and JS.\n */\n\n/**\n * Converts dash-case to camelCase.\n * @type {Function}\n */\nconst camelCase: Function = ( input: string ): string => {\n    return input.toLowerCase().replace( /-(.)/g, function( match: string, group: string ): string {\n        return group.toUpperCase();\n    } );\n};\n\n/**\n * Returns object containign available breakpoints.\n * @return {Object} Object containing avaliable breakpoints in shape { breakpointName: pixelsNumber }\n */\nconst getAvaliableBreakpoints: Function = (): Object => JSON.parse( window.getComputedStyle( body, ':before' )\n    .getPropertyValue( 'content' ).slice( 1, -1 ).replace( /\\\\\"/g, '\"' ) );\n\n/**\n * Returs current breakpoint set by CSS.\n * @return {number} Current breakpoint in number of pixels.\n */\nconst getCurrentBreakpoint: Function = (): number => +window.getComputedStyle( body, ':after' )\n    .getPropertyValue( 'content' ).replace( /\"/g, '' );\n\nconst body: HTMLElement = document.querySelector( 'body' );\n/**\n * Module cache to export.\n * @type {Object}\n */\nconst breakpoint: any = {\n    current: getCurrentBreakpoint(),\n};\n\n/**\n * Available breakpoints cache.\n */\nconst breakpoints: Object = getAvaliableBreakpoints();\n// Extend breakpoint module with available breakpoint keys converted to camelCase.\nObject.keys( breakpoints ).forEach( ( breakpointName: string ): void => {\n    breakpoint[ camelCase( breakpointName ) ] = breakpoints[ breakpointName ];\n});\n\n// Let's check if we can register passive resize event for better performance.\nlet passiveOption: any = undefined;\ntry {\n    const opts: any = Object.defineProperty( {}, 'passive', {\n        get: function(): void {\n            passiveOption = { passive: true };\n        },\n    } );\n    window.addEventListener( 'test', null, opts );\n} catch (e) {}\n\n// Update current breakpoint on every resize.\nwindow.addEventListener( 'resize', () => {\n    breakpoint.current = getCurrentBreakpoint();\n}, passiveOption );\n\nexport default breakpoint;\n"],"names":[],"mappings":";;;;;;AAAA;;;;;;;AAQA,IAAM,SAAS,GAAa,UAAE,KAAa;IACvC,OAAO,KAAK,CAAC,WAAW,EAAE,CAAC,OAAO,CAAE,OAAO,EAAE,UAAU,KAAa,EAAE,KAAa;QAC/E,OAAO,KAAK,CAAC,WAAW,EAAE,CAAC;KAC9B,CAAE,CAAC;CACP,CAAC;;;;;AAMF,IAAM,uBAAuB,GAAa,cAAc,OAAA,IAAI,CAAC,KAAK,CAAE,MAAM,CAAC,gBAAgB,CAAE,IAAI,EAAE,SAAS,CAAE;KACzG,gBAAgB,CAAE,SAAS,CAAE,CAAC,KAAK,CAAE,CAAC,EAAE,CAAC,CAAC,CAAE,CAAC,OAAO,CAAE,MAAM,EAAE,GAAG,CAAE,CAAE,GAAA,CAAC;;;;;AAM3E,IAAM,oBAAoB,GAAa,cAAc,OAAA,CAAC,MAAM,CAAC,gBAAgB,CAAE,IAAI,EAAE,QAAQ,CAAE;KAC1F,gBAAgB,CAAE,SAAS,CAAE,CAAC,OAAO,CAAE,IAAI,EAAE,EAAE,CAAE,GAAA,CAAC;AAEvD,IAAM,IAAI,GAAgB,QAAQ,CAAC,aAAa,CAAE,MAAM,CAAE,CAAC;;;;;AAK3D,IAAM,UAAU,GAAQ;IACpB,OAAO,EAAE,oBAAoB,EAAE;CAClC,CAAC;;;;AAKF,IAAM,WAAW,GAAW,uBAAuB,EAAE,CAAC;;AAEtD,MAAM,CAAC,IAAI,CAAE,WAAW,CAAE,CAAC,OAAO,CAAE,UAAE,cAAsB;IACxD,UAAU,CAAE,SAAS,CAAE,cAAc,CAAE,CAAE,GAAG,WAAW,CAAE,cAAc,CAAE,CAAC;CAC7E,CAAC,CAAC;;AAGH,IAAI,aAAa,GAAQ,SAAS,CAAC;AACnC,IAAI;IACA,IAAM,IAAI,GAAQ,MAAM,CAAC,cAAc,CAAE,EAAE,EAAE,SAAS,EAAE;QACpD,GAAG,EAAE;YACD,aAAa,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;SACrC;KACJ,CAAE,CAAC;IACJ,MAAM,CAAC,gBAAgB,CAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAE,CAAC;CAChD;AAAA,OAAO,CAAC,EAAE,GAAE;;AAGd,MAAM,CAAC,gBAAgB,CAAE,QAAQ,EAAE;IAC/B,UAAU,CAAC,OAAO,GAAG,oBAAoB,EAAE,CAAC;CAC/C,EAAE,aAAa,CAAE,CAAC,AAEnB;;;;"}