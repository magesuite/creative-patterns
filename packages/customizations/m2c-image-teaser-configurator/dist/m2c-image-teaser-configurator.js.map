{"version":3,"file":null,"sources":["../../../components/cc-component-configurator/src/cc-component-configurator.ts","../../../components/cc-image-teaser-configurator/src/cc-image-teaser-configurator.ts","../src/m2c-image-teaser-configurator.ts"],"sourcesContent":["/**\n * Base configurator component.\n * This component is responsible for providing base functionality for other configurators.\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccComponentConfigurator: vuejs.ComponentOption = {\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: '',\n        },\n        /**\n         * Property containing callback triggered when user saves component.\n         * For default, we are providing a dummy function so we can skip the type check.\n         */\n        save: {\n            type: Function,\n            default: (): Function => (): undefined => undefined,\n        },\n        /**\n         * Property containing callback triggered when configuration is changed.\n         * For default, we are providing a dummy function so we can skip the type check.\n         */\n        change: {\n            type: Function,\n            default: (): Function => (): undefined => undefined,\n        },\n        /**\n         *\n         */\n        configuration: {\n            type: String,\n            default(): any {},\n        },\n    },\n    methods: {\n        onChange( event?: Event ): void {\n            // Serialize reactive data.\n            const data: any = JSON.parse( JSON.stringify( this.configuration ) );\n            // Trigger event and callback.\n            this.$dispatch( 'cc-component-configurator__changed', data );\n            this.change( data );\n        },\n        onSave( event?: Event ): void {\n            // Serialize reactive data.\n            const data: any = JSON.parse( JSON.stringify( this.configuration ) );\n            // Trigger event and callback.\n            this.$dispatch( 'cc-component-configurator__saved', data );\n            this.save( data );\n        },\n    },\n    events: {\n        /**\n         * Listen on save event from Content Configurator component.\n         */\n        'cc-component-configurator__save'(): void {\n            if ( this._events['cc-component-configurator__save'].length === 1 ) {\n                this.onSave();\n            }\n        },\n    },\n};\n\nexport { IComponentInformation, ccComponentConfigurator };\nexport default ccComponentConfigurator;\n","import ccComponentConfigurator from '../../cc-component-configurator/src/cc-component-configurator';\n/**\n * Image teaser configurator component.\n * This component is responsible for displaying image teaser's configuration form\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccImageTeaserConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccComponentConfigurator,\n    ],\n    template: `<form class=\"cc-image-teaser-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\n        <section class=\"cc-image-teaser-configurator__section\">\n            <div class=\"cs-input cs-input--type-inline\">\n                <label for=\"cfg-it-width\" class=\"cs-input__label\">Teaser width:</label>\n                <select name=\"cfg-it-width-select\" class=\"cs-input__select\" id=\"cfg-it-width\" v-model=\"configuration.teaserWidth\" @change=\"onChange\">\n                    <option value=\"full-width\" selected>Full browser width</option>\n                    <option value=\"limited-width\">Breaking point width (1280px)</option>\n                </select>\n            </div>\n            <div class=\"cs-input cs-input--type-inline\">\n                <label for=\"cfg-it-images-per-slide\" class=\"cs-input__label\">Images per slide:</label>\n                <select name=\"cfg-it-images-per-slide\" class=\"cs-input__select\" id=\"cfg-it-images-per-slide\" v-model=\"configuration.itemsPerSlide\" @change=\"onChange\">\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                    <option value=\"6\">6</option>\n                    <option value=\"7\">7</option>\n                    <option value=\"8\">8</option>\n                    <option value=\"9\">9</option>\n                </select>\n            </div>\n        </section>\n\n        <section class=\"cc-image-teaser-configurator__section\">\n            <div class=\"cc-image-teaser-configurator__teaser\">\n                <template v-for=\"item in configuration.items\">\n                    <div class=\"cc-image-teaser-configurator__teaser-item\" id=\"cc-image-teaser-item-{{ $index }}\">\n                        <div class=\"cc-image-teaser-configurator__toolbar\">\n                            <span class=\"cc-image-teaser-configurator__teaser-item-title\">Banner {{ $index+1 }}/{{ configuration.items.length }}</span>\n                            <a href=\"#\" class=\"cc-image-teaser-configurator__upload-link href=\"#\">Upload image</a>\n                        </div>\n                        <div class=\"cc-image-teaser-configurator__image-holder-outer\">\n                            <div class=\"cc-image-teaser-configurator__image-holder-inner\">\n                                <input type=\"hidden\" value=\"\" class=\"cc-image-teaser-configurator__image-url\" v-model=\"configuration.items[$index].image\" @change=\"onChange\">\n                            </div>\n                        </div>\n                        <div class=\"cs-input cs-input--type-required\">\n                            <label for=\"cfg-it-teaser{{ $index+1 }}-headline\" class=\"cs-input__label\">Headline:</label>\n                            <input type=\"text\" v-model=\"configuration.items[$index].headline\" id=\"cfg-it-teaser{{ $index+1 }}-headline\" class=\"cs-input__input\" @change=\"onChange\">\n                        </div>\n                        <div class=\"cs-input cs-input--type-required\">\n                            <label for=\"cfg-it-teaser{{ $index+1 }}-paragraph\" class=\"cs-input__label\">Paragraph:</label>\n                            <textarea type=\"text\" v-model=\"configuration.items[$index].paragraph\" id=\"cfg-it-teaser{{ $index+1 }}-paragraph\" class=\"cs-input__textarea cs-input__textarea--look-thin\" @change=\"onChange\" placeholder=\"(max 200 characters)\" maxlength=\"200\"></textarea>\n                        </div>\n                        <div class=\"cs-input\">\n                            <label for=\"cfg-it-teaser{{ $index+1 }}-cta-label\" class=\"cs-input__label\">CTA label:</label>\n                            <input type=\"text\" v-model=\"configuration.items[$index].ctaLabel\" id=\"cfg-it-teaser{{ $index+1 }}-cta-label\" class=\"cs-input__input\" @change=\"onChange\">\n                        </div>\n                        <div class=\"cs-input\">\n                            <label for=\"cfg-it-teaser{{ $index+1 }}-cta-target\" class=\"cs-input__label\">CTA target link:</label>\n                            <input type=\"text\" v-model=\"item.ctaTarget\" id=\"cfg-it-teaser{{ $index+1 }}-cta-target\" class=\"cs-input__input\" @change=\"onChange\">\n                        </div>\n                    </div>\n                </template>\n            </div>\n        </section>\n\n        <section class=\"cc-image-teaser-configurator__section cc-image-teaser-configurator__section--type-actions\">\n            <button type=\"submit\">Save</button>\n        </section>\n    </form>`,\n    props: {\n        /**\n         * Single's component configuration\n         */\n        configuration: {\n            type: Object,\n            default(): Object {\n                return {\n                    teaserWidth: 'full-width',\n                    items: [\n                        {\n                            image: '',\n                            headline: '',\n                            paragraph: '',\n                            ctaLabel: 'More',\n                            ctaTarget: '',\n                        },\n                        {\n                            image: '',\n                            headline: '',\n                            paragraph: '',\n                            ctaLabel: 'More',\n                            ctaTarget: '',\n                        },\n                        {\n                            image: '',\n                            headline: '',\n                            paragraph: '',\n                            ctaLabel: 'More',\n                            ctaTarget: '',\n                        },\n                    ],\n                };\n            },\n        },\n    },\n};\n\nexport default ccImageTeaserConfigurator;\n","import $ from 'jquery';\nimport $t from 'mage/translate';\n\nimport ccImageTeaserConfigurator from '../../../components/cc-image-teaser-configurator/src/cc-image-teaser-configurator';\n\n// Pattern for teaser Item\nconst teaserItemDataPattern: any = {\n    image: '',\n    decodedImage: '',\n    headline: '',\n    paragraph: '',\n    ctaLabel: $t( 'More' ),\n    ctaTarget: '',\n};\n\n/**\n * M2C Image teaser component for admin panel.\n * This component is responsible for managing image teasers including image upload and widget chooser\n */\nconst m2cImageTeaserConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccImageTeaserConfigurator,\n    ],\n    template: `<form class=\"m2c-image-teaser-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\n        <section class=\"m2c-image-teaser-configurator__section\">\n            <div class=\"m2-input m2-input--type-inline\">\n                <label for=\"cfg-it-width\" class=\"m2-input__label\">${$t( 'Teaser width' )}:</label>\n                <select name=\"cfg-it-width-select\" class=\"m2-input__select\" id=\"cfg-it-width\" v-model=\"configuration.teaserWidth\" @change=\"onChange\">\n                    <option value=\"full-width\">${$t( 'Full browser width' )}</option>\n                    <option value=\"limited-width\">${$t( 'Breaking point width (1280px)' )}</option>\n                </select>\n            </div>\n        </section>\n\n        <section class=\"m2c-image-teaser-configurator__section\">\n            <div class=\"m2c-image-teaser-configurator__teaser\">\n                <template v-for=\"item in configuration.items\">\n                    <div class=\"m2c-image-teaser-configurator__teaser-item\" id=\"m2c-image-teaser-item-{{ $index }}\">\n                        <div class=\"m2c-image-teaser-configurator__toolbar\">\n                            <span class=\"m2c-image-teaser-configurator__teaser-item-title\">\n                                ${$t( 'Banner' )} {{ $index+1 }}/{{ configuration.items.length }}\n                            </span>\n                            <template v-if=\"configuration.items[$index].image\">\n                                <a href=\"#\" href=\"#\" @click=\"getImageUploader( $index )\">${$t( 'Change image' )}</a>\n                            </template>\n                            <template v-else>\n                                <a href=\"#\" href=\"#\" @click=\"getImageUploader( $index )\">${$t( 'Upload image' )}</a>\n                            </template>\n                        </div>\n                        <div class=\"m2c-image-teaser-configurator__image-holder-outer\">\n                            <div class=\"m2c-image-teaser-configurator__image-holder-inner\">\n                                <img :src=\"configuration.items[$index].image\" class=\"m2c-image-teaser-configurator__image\" v-show=\"configuration.items[$index].image\">\n                                <template v-if=\"isPossibleToDelete( $index )\">\n                                    <button class=\"action-button action-button--look_default action-button--type_icon | m2c-image-teaser-configurator__delete-button\" @click=\"deleteTeaserItem( $index )\">\n                                        <svg class=\"action-button__icon action-button__icon--size_300\">\n                                            <use v-bind=\"{ 'xlink:href': assetsSrc + 'images/sprites.svg#icon_trash-can' }\"></use>\n                                        </svg>\n                                        ${$t( 'Delete banner' )}\n                                    </button>\n                                </template>\n                                <input type=\"hidden\" class=\"m2c-image-teaser-configurator__image-url\" v-model=\"configuration.items[$index].image\" id=\"img-{{$index}}\">\n                            </div>\n                        </div>\n                        <div class=\"m2-input\">\n                            <label for=\"cfg-it-teaser{{ $index+1 }}-headline\" class=\"m2-input__label\">${$t( 'Headline' )}:</label>\n                            <input type=\"text\" v-model=\"configuration.items[$index].headline\" id=\"cfg-it-teaser{{ $index+1 }}-headline\" class=\"m2-input__input\" @change=\"onChange\">\n                        </div>\n                        <div class=\"m2-input\">\n                            <label for=\"cfg-it-teaser{{ $index+1 }}-paragraph\" class=\"m2-input__label\">${$t( 'Paragraph' )}:</label>\n                            <textarea type=\"text\" v-model=\"configuration.items[$index].paragraph\" id=\"cfg-it-teaser{{ $index+1 }}-paragraph\" class=\"m2-input__textarea m2-input__textarea--look-thin\" @change=\"onChange\" placeholder=\"(${$t( 'max 200 characters' )})\" maxlength=\"200\"></textarea>\n                        </div>\n                        <div class=\"m2-input\">\n                            <label for=\"cfg-it-teaser{{ $index+1 }}-cta-label\" class=\"m2-input__label\">${$t( 'CTA label' )}:</label>\n                            <input type=\"text\" v-model=\"configuration.items[$index].ctaLabel\" id=\"cfg-it-teaser{{ $index+1 }}-cta-label\" class=\"m2-input__input\" @change=\"onChange\">\n                        </div>\n                        <div class=\"m2-input\">\n                            <div class=\"m2c-image-teaser-configurator__cta-actions\">\n                                <label class=\"m2-input__label\">${$t( 'CTA target link' )}:</label>\n                                <template v-if=\"item.ctaTarget\">\n                                    <a href=\"#\" @click=\"openCtaTargetModal( $index )\">${$t( 'Edit' )}</a>\n                                </template>\n                                <template v-else>\n                                    <a href=\"#\" @click=\"openCtaTargetModal( $index )\">${$t( 'Add' )}</a>\n                                </template>\n                            </div>\n                            <input type=\"text\" class=\"m2-input__input m2-input--type-readonly | m2c-image-teaser-configurator__cta-target-link\" readonly v-model=\"configuration.items[$index].ctaTarget\" id=\"ctatarget-output-{{ $index }}\">\n                        </div>\n                    </div>\n                </template>\n            </div>\n        </section>\n    </form>`,\n    props: {\n        /*\n         * Single's component configuration\n         */\n        configuration: {\n            type: Object,\n            default(): Object {\n                return {\n                    teaserWidth: 'full-width',\n                    items: [ JSON.parse( JSON.stringify( teaserItemDataPattern ) ) ],\n                };\n            },\n        },\n\n        /* Collect base-url for the image uploader */\n        uploaderBaseUrl: {\n            type: String,\n            default: '',\n        },\n\n        /* get assets for displaying component images */\n        assetsSrc: {\n            type: String,\n            default: '',\n        },\n    },\n    events: {\n        /**\n         * Listen on save event from Content Configurator component.\n         */\n        'cc-component-configurator__save'(): void {\n            this.cleanupConfiguration();\n            this.onSave();\n        },\n    },\n    methods: {\n        /* Opens M2's built-in image manager modal\n         * Manages all images: image upload from hdd, select image that was already uploaded to server\n         * @param index {number} - index of image teaser item\n         */\n        getImageUploader( index: number ): void {\n            MediabrowserUtility.openDialog( `${this.uploaderBaseUrl}target_element_id/img-${index}/`,\n                'auto',\n                'auto',\n                $t( 'Insert File...' ),\n                {\n                    closed: true,\n                },\n            );\n\n            this.imageUploadListener();\n        },\n\n        /* Listener for image uploader\n         * Since Magento does not provide any callback after image has been chosen\n         * we have to watch for target where decoded url is placed\n         */\n        imageUploadListener(): void {\n            const component: any = this;\n\n            // jQuery has to be used, native addEventListener doesn't catch change of input's value\n            $( '.m2c-image-teaser-configurator__image-url' ).on( 'change', ( event: Event ): void => {\n                component.onImageUploaded( event.target );\n\n                // For some reason this is emmitted twice, so prevent second action\n                $( this ).off( event );\n            } );\n        },\n\n        /* Action after image was uploaded\n         * URL is encoded, so strip it and decode Base64 to get {{ media url=\"...\"}} format\n         * which will go to the items.image and will be used to display image on front end\n         * @param input { object } - input with raw image path which is used in admin panel\n         */\n        onImageUploaded( input: any ): void {\n            const itemIndex: any = input.id.substr( input.id.length - 1 );\n            const encodedImage: any = input.value.match( '___directive\\/([a-zA-Z0-9]*)' )[ 1 ];\n\n            this.configuration.items[ itemIndex ].decodedImage = Base64 ? Base64.decode( encodedImage ) : window.atob( encodedImage );\n            this.onChange();\n            this.createTeaserItem();\n        },\n\n        /* Creates another teaser item using teaserItemDataPattern */\n        createTeaserItem(): void {\n            /* If image of last array item in this.configuration.items is not empty, add another teaser item */\n            if ( this.configuration.items && this.configuration.items.slice( -1 )[ 0 ].image !== '' ) {\n                this.configuration.items.push( JSON.parse( JSON.stringify( teaserItemDataPattern ) ) );\n            }\n        },\n\n        /* Opens modal with M2 built-in widget chooser\n         * @param index {number} - index of teaser item to know where to place output of widget chooser\n         */\n        openCtaTargetModal( index: number ): void {\n            const component: any = this;\n\n            widgetTools.openDialog( `${window.location.origin}/admin/admin/widget/index/widget_target_id/ctatarget-output-${index}` );\n\n            /* clean current value since widget chooser doesn't do that to allow multiple widgets\n             * we don't want that since this should be url for CTA */\n            component.configuration.items[ index ].ctaTarget = '';\n\n            // There must be better way to do that...\n            /*const getIsWidgetReady: any = window.setInterval((): void => {\n                if ( !$( widgetTools.dialogWindow[ 0 ] ).is( ':empty' ) ) {\n\n                    if ( wWidget ) {\n                        hideUnwantedWidgetOptions( wWidget );\n                        clearInterval( getIsWidgetReady );\n                    }\n                }\n            }, 100);\n\n            const hideUnwantedWidgetOptions: void = function( wWidget: any ) {\n                for ( let option of wWidget.widgetEl.options ) {\n                    if (\n                        escape( option.value ) === 'Magento%5CCms%5CBlock%5CWidget%5CBlock' ||\n                        escape( option.value ) === 'Magento%5CCatalog%5CBlock%5CProduct%5CWidget%5CNewWidget' ||\n                        escape( option.value ) === 'Magento%5CCatalogWidget%5CBlock%5CProduct%5CProductsList' ||\n                        escape( option.value ) === 'Magento%5CSales%5CBlock%5CWidget%5CGuest%5CForm' ||\n                        escape( option.value ) === 'Magento%5CReports%5CBlock%5CProduct%5CWidget%5CCompared' ||\n                        escape( option.value ) === 'Magento%5CReports%5CBlock%5CProduct%5CWidget%5CViewed'\n                    ) {\n                        option.style.display = 'none';\n                    }\n                }\n            };*/\n        },\n        /* Sets listener for widget chooser\n         * It triggers component.onChange to update component's configuration\n         * after value of item.ctaTarget is changed\n         */\n        widgetSetListener(): void {\n            const component: any = this;\n\n            $( '.m2c-image-teaser-configurator__cta-target-link' ).on( 'change', (): void => {\n                component.onChange();\n            } );\n        },\n\n        /* Checks if it's possible to display Delete button\n         * This function is used in component's template\n         * Button can be displayed only on items that have item uploaded\n         * @param index {number} - index of teaser item\n         * @returns Boolean\n         */\n        isPossibleToDelete( index: number ): Boolean {\n            if ( ( index !== 0 || this.configuration.items.length > 1 ) && this.configuration.items[ index ].image !== '' ) {\n                return true;\n            }\n\n            return false;\n        },\n\n        /* Removes teaser item after Delete button is clicked\n         * and triggers component's onChange to update it's configuration\n         * @param index {number} - index of teaser item to remove\n         */\n        deleteTeaserItem( index: number ): void {\n            if ( confirm( $t( `Are you sure you want to remove this banner?` ) ) ) {\n                this.configuration.items.splice( index, 1 );\n                this.onChange();\n            }\n        },\n\n        /* Cleans configuration for M2C content constructor after Saving component\n         * All empty teaser items has to be removed to not get into configuration object\n         */\n        cleanupConfiguration(): void {\n            const filteredArray: any = this.configuration.items.filter( ( item: any ): any => item.image !== '' );\n            this.configuration.items = filteredArray;\n            this.onChange();\n        },\n    },\n    ready(): void {\n        this.widgetSetListener();\n        this.createTeaserItem();\n    },\n};\n\nexport default m2cImageTeaserConfigurator;\n"],"names":[],"mappings":"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"}