{"version":3,"file":null,"sources":["../../../utilities/cs-asset/src/cs-asset.ts","../../../components/action-button/src/action-button.ts","../../../components/cc-component-actions/src/cc-component-actions.ts","../../../components/cc-component-adder/src/cc-component-adder.ts","../../../components/cc-component-placeholder/src/cc-component-placeholder.ts","../../../components/cc-layout-builder/src/cc-layout-builder.ts","../src/cc-content-constructor.ts"],"sourcesContent":["\nlet assetDir: string = null;\n\nexport default function( assetPath: string ): string {\n    if ( assetDir === null ) {\n        assetDir = document.querySelector( 'body' ).getAttribute( 'data-cs-asset-dir' );\n        if ( !assetDir ) {\n            assetDir = '';\n        }\n    }\n\n    return assetDir + assetPath;\n};\n","/**\n * Action button component version.\n * Small component that allows to set it's content.\n *\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst actionButton: vuejs.ComponentOption = {\n    template: `<button class=\"action-button {{ class }}\" @click=\"_onClick\">\n        <slot></slot>\n    </button>`,\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: '',\n        },\n    },\n    methods: {\n        /**\n         * Button click handler.\n         * This handler triggers \"action-button__click\" event up the DOM chain when called.\n         * @param {Event} event Click event object.\n         */\n        _onClick( event: Event ): void {\n            this.$dispatch( 'action-button__click', event );\n        },\n    },\n};\n\nexport default actionButton;\n","/**\n * Component actions component.\n * This component is responsible for displaying and handling user interactions of\n * side utility navigation for each component that supports:\n * - Moving component up,\n * - Moving component down,\n * - Opening component settings,\n * - Deleting component.\n *\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst componentActions: vuejs.ComponentOption = {\n    template: `<aside class=\"cc-component-actions | {{ class }}\">\n        <div class=\"cc-component-actions__top\">\n            <slot name=\"cc-component-actions__top\"></slot>\n        </div>\n        <div class=\"cc-component-actions__bottom\">\n            <slot name=\"cc-component-actions__bottom\"></slot>\n        </div>\n    </aside>`,\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: String,\n            default: '',\n            coerce: ( value: String ): String => value.replace( 'cc-component-actions', '' ),\n        },\n    },\n};\n\nexport default componentActions;\n","/**\n * Component controller component.\n * This component is responsible for displaying annd handling component adding button\n * @type {vuejs.ComponentOption} Vue component object.\n */\n\nconst componentAdder: vuejs.ComponentOption = {\n    template: `<section class=\"cc-component-adder | {{ class }}\">\n        <div class=\"cc-component-adder__button-create\" @click=\"onCreateComponent\">\n            <slot></slot>\n        </div>\n    </section>`,\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: String,\n            default: '',\n            coerce( value: string ): string {\n                return value.replace( 'cc-component-adder', '' );\n            },\n        },\n        /**\n         * Property containing callback triggered when user clicks \"add component\" button.\n         */\n        createComponent: {\n            type: Function,\n        },\n    },\n    methods: {\n        /**\n         * \"Add component\" button click handler.\n         * This handler triggers \"cc-component-adder__create-component\" event up the DOM chain when called.\n         * @param {Event} event Click event object.\n         */\n        onCreateComponent( event: Event ): void {\n            this.$dispatch( 'cc-component-adder__create-component', event );\n            if ( typeof this.createComponent === 'function' ) {\n                this.createComponent( event );\n            }\n        },\n    },\n};\n\nexport default componentAdder;\n","/**\n * Component placeholder component.\n */\nconst componentPlaceholder: any = {\n    template: `<div class=\"cc-component-placeholder\">\n        <div class=\"cc-component-placeholder__content\">\n            <slot></slot>\n        </div>\n    </div>`,\n};\n\nexport default componentPlaceholder;\n","import asset from '../../../utilities/cs-asset/src/cs-asset';\nimport actionButton from '../../action-button/src/action-button';\nimport componentActions from '../../cc-component-actions/src/cc-component-actions';\nimport componentAdder from '../../cc-component-adder/src/cc-component-adder';\nimport componentPlaceholder from '../../cc-component-placeholder/src/cc-component-placeholder';\n\nimport template from './cc-layout-builder.tpl';\n\n/**\n * Single component information interface.\n */\ninterface IComponentInformation {\n    name: string;\n    id: string;\n    type: string;\n    data?: any;\n}\n\n/**\n * Layout builder component.\n * This component is responsible for displaying and handling user interactions of\n * entire Content Constructor\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst layoutBuilder: vuejs.ComponentOption = {\n    template,\n    /**\n     * Get dependencies\n     */\n    components: {\n        'action-button': actionButton,\n        'cc-component-adder': componentAdder,\n        'cc-component-actions': componentActions,\n        'cc-component-placeholder': componentPlaceholder,\n    },\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: '',\n        },\n        /**\n         * Initial component configuration encoded as JSON string.\n         */\n        componentsConfiguration: {\n            type: String,\n            default: '',\n        },\n        /**\n         * Callback invoked when edit component button is clicked.\n         * This function should take IComponentInformation and return changed version of it.\n         * If callback returns falsy value then component isn't changed.\n         */\n        editComponent: {\n            type: Function,\n            default: ( componentInfo: IComponentInformation ): IComponentInformation => componentInfo,\n        },\n        /**\n         * Callback invoked when edit component button is clicked.\n         * This function should return IComponentInformation.\n         * If callback returns falsy value then component isn't added.\n         */\n        addComponent: {\n            type: Function,\n            default: (): IComponentInformation => undefined,\n        },\n    },\n    data(): any {\n        return {\n            components: [],\n        };\n    },\n    ready(): void {\n        // Set initial components configuration if provided.\n        this.components = this.componentsConfiguration ? JSON.parse( this.componentsConfiguration ) : [];\n        this.$dispatch( 'cc-layout-builder__update' );\n    },\n    methods: {\n        asset,\n        /**\n         * Returns components information currently stored within layout builder.\n         * @return {IComponentInformation[]} Components information array.\n         */\n        getComponentInformation(): IComponentInformation[] {\n            return JSON.parse(\n                JSON.stringify( this.components )\n            );\n        },\n        /**\n         * Sets provided component information on current index in components array.\n         * If component exists on given index then this compoennt will be inserted before it.\n         * @param {number}                index         Component index in components array.\n         * @param {IComponentInformation} componentInfo Component information.\n         */\n        addComponentInformation( index: number, componentInfo: IComponentInformation ): void {\n            if ( componentInfo ) {\n                this.components.splice( index, 0, componentInfo );\n                this.$dispatch( 'cc-layout-builder__update' );\n            }\n        },\n        /**\n         * Sets provided component information on current index in components array.\n         * If component exists on given index then it will be overwritten.\n         * @param {number}                index         Component index in components array.\n         * @param {IComponentInformation} componentInfo Component information.\n         */\n        setComponentInformation( index: number, componentInfo: IComponentInformation ): void {\n            if ( componentInfo ) {\n                this.components.$set( index, componentInfo );\n                this.$dispatch( 'cc-layout-builder__update' );\n            }\n        },\n        /**\n         * Creates new component and adds it to a specified index.\n         * This function calls callback specified by \"add-component\" property that\n         * should return IComponentInformation.\n         * If callback returns falsy value then component isn't added.\n         * @param {number} index New component's index in components array.\n         */\n        createNewComponent( index: number ): void {\n            /**\n             * To allow both sync and async set of new component data we call\n             * provided handler with callback function.\n             * If handler doesn't return component information then it can still\n             * set it using given callback.\n             */\n            const componentInfo: IComponentInformation = this.addComponent(\n                ( asyncComponentInfo: IComponentInformation ): void => {\n                    this.addComponentInformation( index, asyncComponentInfo );\n                }\n            );\n            this.addComponentInformation( index, componentInfo );\n        },\n        /**\n         * Initializes edit mode of component.\n         * This function invokes callback given by \"edit-component\" callback that\n         * should take current IComponentInformation as param and return changed version of it.\n         * If callback returns falsy value then component isn't changed.\n         * @param {string} index: Component's index in array.\n         */\n        editComponentSettings( index: number ): void {\n            // Create a static, non-reactive copy of component data.\n            let componentInfo: IComponentInformation = JSON.parse(\n                JSON.stringify( this.components[ index ] )\n            );\n            /**\n             * To allow both sync and async set of new component data we call\n             * provided handler with current component data and callback function.\n             * If handler doesn't return component information then it can still\n             * set it using given callback.\n             */\n            componentInfo = this.editComponent(\n                componentInfo,\n                ( asyncComponentInfo: IComponentInformation ): void => {\n                    this.setComponentInformation( index, asyncComponentInfo );\n                }\n            );\n            this.setComponentInformation( index, componentInfo );\n        },\n        /**\n         * Moves component under given index up by swaping it with previous element.\n         * @param {number} index Component's index in array.\n         */\n        moveComponentUp( index: number ): void {\n            if ( index > 0 ) {\n                let previousComponent: IComponentInformation = this.components[ index - 1 ];\n                this.components.$set( index - 1, this.components[ index ] );\n                this.components.$set( index, previousComponent );\n            }\n        },\n        /**\n         * Moves component under given index down by swaping it with next element.\n         * @param {number} index Component's index in array.\n         */\n        moveComponentDown( index: number ): void {\n            if ( index < this.components.length - 1 ) {\n                let previousComponent: IComponentInformation = this.components[ index + 1 ];\n                this.components.$set( index + 1, this.components[ index ] );\n                this.components.$set(  index, previousComponent );\n            }\n        },\n        /**\n         * Removes component and adder that is right after component from the DOM\n         * @param {number} index Component's index in array.\n         */\n        deleteComponent( index: number ): void {\n             if ( confirm( `Are you sure you want to remove this component?` ) ) {\n                this.components.splice( index, 1 );\n            }\n        },\n        /**\n         * Tells if component with given index is the first component.\n         * @param  {number}  index Index of the component.\n         * @return {boolean}       If component is first in array.\n         */\n        isFirstComponent( index: number ): boolean {\n            return index === 0;\n        },\n        /**\n         * Tells if component with given index is the last component.\n         * @param  {number}  index Index of the component.\n         * @return {boolean}       If component is last in array.\n         */\n        isLastComponent( index: number ): boolean {\n            return index === this.components.length - 1;\n        },\n    },\n};\n\nexport default layoutBuilder;\nexport { layoutBuilder, IComponentInformation };\n","import { IComponentInformation, layoutBuilder } from '../../../components/cc-layout-builder/src/cc-layout-builder';\n\n/**\n * CC Content Constructor component.\n * Dummy example on how to implement custom Content Constructor logic.\n */\nconst m2cContentConstructor: vuejs.ComponentOption = {\n    template: `<div class=\"cc-content-constructor\">\n        <cc-layout-builder\n            v-ref:layout-builder\n            :add-component=\"pickRandomComponent\"\n            :edit-component=\"editRandomComponent\"\n            :components-configuration=\"configuration\">\n        </cc-layout-builder>\n    </div>`,\n    components: {\n        'cc-layout-builder': layoutBuilder,\n    },\n    props: {\n        configuration: {\n            type: String,\n            default: '',\n        },\n    },\n    methods: {\n        /**\n         * Callback that will be invoked when user clicks plus button.\n         * This method should open magento modal with component picker.\n         * @param  {IComponentInformation} addComponentInformation Callback that let's us add component asynchronously.\n         */\n        pickRandomComponent( addComponentInformation: ( componentInfo: IComponentInformation ) => void ): void {\n            this._addComponentInformation = addComponentInformation;\n            console.log( 'Getting component picker.' );\n            const componentTypes: string[] = [\n                'headline',\n                'static-block',\n                'hero',\n            ]\n            const componentType: string = componentTypes[ Math.floor( Math.random() * componentTypes.length ) ];\n            if ( window.confirm( `Randomly picked \"${componentType}\" component, ok?` ) ) {\n                this.getRandomConfigurator( componentType );\n            }\n        },\n        getRandomConfigurator( componentType: string ): void {\n            console.log( `Getting configurator for ${componentType} component.` );\n            const componentConfiguration: any = {\n                type: componentType,\n                id: 'component' + Math.floor( ( 1 + Math.random() ) * 0x10000 ).toString( 16 ).substring( 1 ),\n                data: {},\n            };\n            if ( window.confirm( `Do you want to add component with below configuration?\n                ${JSON.stringify(componentConfiguration, null, 2)}` ) ) {\n                this._addComponentInformation( componentConfiguration );\n            }\n        },\n        /**\n         * Callback that will be invoked when user clicks edit button.\n         * This method should open magento modal with component editor.\n         * @param  {IComponentInformation} setComponentInformation Callback that let's us add component asynchronously.\n         */\n        editRandomComponent(\n            currentInfo: IComponentInformation,\n            setComponentInformation: ( componentInfo: IComponentInformation ) => void\n        ): void {\n            const componentConfiguration: any = {\n                type: currentInfo.type,\n                id: 'component' + Math.floor( ( 1 + Math.random() ) * 0x10000 ).toString( 16 ).substring( 1 ),\n                data: currentInfo.data,\n            };\n            if ( window.confirm( `Do you want to edit component with below configuration?\n                ${JSON.stringify(componentConfiguration, null, 2)}` ) ) {\n                setComponentInformation( componentConfiguration );\n            }\n        },\n    },\n};\n\nexport default m2cContentConstructor;\n"],"names":[],"mappings":"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"}