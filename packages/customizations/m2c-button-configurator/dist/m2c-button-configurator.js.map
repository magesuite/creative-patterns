{"version":3,"file":null,"sources":["../../../components/cc-component-configurator/src/cc-component-configurator.ts","../../../components/cc-button-configurator/src/cc-button-configurator.ts","../src/m2c-button-configurator.ts"],"sourcesContent":["/**\n * Base configurator component.\n * This component is responsible for providing base functionality for other configurators.\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccComponentConfigurator: vuejs.ComponentOption = {\n    props: {\n        /**\n         * Class property support to enable BEM mixes.\n         */\n        class: {\n            type: [ String, Object, Array ],\n            default: '',\n        },\n        /**\n         * Property containing callback triggered when user saves component.\n         * For default, we are providing a dummy function so we can skip the type check.\n         */\n        save: {\n            type: Function,\n            default: (): Function => (): undefined => undefined,\n        },\n        /**\n         * Property containing callback triggered when configuration is changed.\n         * For default, we are providing a dummy function so we can skip the type check.\n         */\n        change: {\n            type: Function,\n            default: (): Function => (): undefined => undefined,\n        },\n        /**\n         *\n         */\n        configuration: {\n            type: String,\n            default(): any {},\n        },\n    },\n    methods: {\n        onChange( event?: Event ): void {\n            // Serialize reactive data.\n            const data: any = JSON.parse( JSON.stringify( this.configuration ) );\n            // Trigger event and callback.\n            this.$dispatch( 'cc-component-configurator__changed', data );\n            this.change( data );\n        },\n        onSave( event?: Event ): void {\n            // Serialize reactive data.\n            const data: any = JSON.parse( JSON.stringify( this.configuration ) );\n            // Trigger event and callback.\n            this.$dispatch( 'cc-component-configurator__saved', data );\n            this.save( data );\n        },\n    },\n    events: {\n        /**\n         * Listen on save event from Content Configurator component.\n         */\n        'cc-component-configurator__save'(): void {\n            if ( this._events['cc-component-configurator__save'].length === 1 ) {\n                this.onSave();\n            }\n        },\n    },\n};\n\nexport { ccComponentConfigurator };\nexport default ccComponentConfigurator;\n","import ccComponentConfigurator from '../../cc-component-configurator/src/cc-component-configurator';\n\n/**\n * button configurator component.\n * This component is responsible for displaying buttons configuration form\n * @type {vuejs.ComponentOption} Vue component object.\n */\nconst ccButtonConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccComponentConfigurator,\n    ],\n    template: `<form class=\"cc-button-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\n        <div class=\"cs-input cs-input--type-inline\">\n            <label for=\"cfg-label\" class=\"cs-input__label\">Label:</label>\n            <input type=\"text\" v-model=\"configuration.label\" id=\"cfg-label\" class=\"cs-input__input\" @change=\"onChange\">\n        </div>\n        <div class=\"cs-input cs-input--type-inline\">\n            <label for=\"cfg-target\" class=\"cs-input__label\">Target:</label>\n            <input type=\"text\" v-model=\"configuration.target\" id=\"cfg-target\" class=\"cs-input__input\" @change=\"onChange\">\n        </div>\n        <button type=\"submit\">Save</button>\n    </form>`,\n    props: {\n        configuration: {\n            type: Object,\n            default: {\n                label: '',\n                target: '',\n            },\n        },\n    },\n};\n\nexport default ccButtonConfigurator;\n","import ccButtonConfigurator from '../../../components/cc-button-configurator/src/cc-button-configurator';\n\nimport $ from 'jquery';\nimport $t from 'mage/translate';\n\nconst m2cButtonConfigurator: vuejs.ComponentOption = {\n    mixins: [\n        ccButtonConfigurator,\n    ],\n    template: `<form class=\"m2c-button-configurator {{ classes }} | {{ mix }}\" {{ attributes }} @submit.prevent=\"onSave\">\n        <div class=\"m2-input m2-input--type-inline\">\n            <label for=\"cfg-label\" class=\"m2-input__label\">${$t( 'Label' )}:</label>\n            <input type=\"text\" v-model=\"configuration.label\" id=\"cfg-label\" class=\"m2-input__input\" @change=\"onChange\">\n        </div>\n        <div class=\"m2-input m2-input--type-addon m2-input--type-inline | m2c-button-configurator__item-form-element\">\n            <label for=\"cfg-target\" class=\"m2-input__label\">${$t( 'Target' )}:</label>\n            <div class=\"m2-input__addon-wrapper\">\n                <input type=\"text\" class=\"m2-input__input | m2c-button-configurator__target\" v-model=\"configuration.target\" id=\"cfg-target\">\n                <span class=\"m2-input__addon | m2c-button-configurator__widget-chooser-trigger\" @click=\"openCtaTargetModal()\">\n                    <svg class=\"m2-input__addon-icon\">\n                        <use xlink:href=\"#icon_link\"></use>\n                    </svg>\n                </span>\n            </div>\n        </div>\n    </form>`,\n    props: {\n        /*\n         * Single's component configuration\n         */\n        configuration: {\n            type: Object,\n            default(): Object {\n                return {\n                    label: '',\n                    target: '',\n                };\n            },\n        },\n        /* Get assets for displaying component images */\n        assetsSrc: {\n            type: String,\n            default: '',\n        },\n    },\n    events: {\n        /**\n         * Listen on save event from Content Configurator component.\n         */\n        'cc-component-configurator__save'(): void {\n            this.onSave();\n        },\n    },\n    methods: {\n        /* Opens modal with M2 built-in widget chooser\n         */\n        openCtaTargetModal(): void {\n            widgetTools.openDialog( `${window.location.origin}/admin/admin/widget/index/filter_widgets/Link/widget_target_id/cfg-target` );\n\n            this.wWidgetListener();\n        },\n        /* Sets listener for widget chooser\n         * It triggers component.onChange to update component's configuration\n         * after value of target input is changed\n         */\n        widgetSetListener(): void {\n            const component: any = this;\n\n            $( '.m2c-button-configurator__cta-target-link' ).on( 'change', (): void => {\n                component.onChange();\n            } );\n        },\n        /*\n         * Check if widget chooser is loaded. If not, wait for it, if yes:\n         * Override default onClick for \"Insert Widget\" button in widget's modal window\n         * to clear input's value before inserting new one\n         */\n        wWidgetListener(): void {\n            if ( typeof wWidget !== 'undefined' && widgetTools.dialogWindow[ 0 ].innerHTML !== '' ) {\n                const _this: any = this;\n                const button: any = widgetTools.dialogWindow[ 0 ].querySelector( '#insert_button' );\n\n                button.onclick = null;\n                button.addEventListener( 'click', function(): void {\n                    _this.configuration.target = '';\n                    wWidget.insertWidget();\n                } );\n            } else {\n                setTimeout( this.wWidgetListener, 300 );\n            }\n        },\n    },\n    ready(): void {\n        this.widgetSetListener();\n    },\n};\n\nexport default m2cButtonConfigurator;\n"],"names":[],"mappings":"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"}